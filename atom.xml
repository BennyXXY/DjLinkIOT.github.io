<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>DjLink技术博客</title>
  <subtitle>日积月累，精益求精</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://djlinkiot.github.io/"/>
  <updated>2016-12-22T09:16:24.478Z</updated>
  <id>https://djlinkiot.github.io/</id>
  
  <author>
    <name>鼎甲微联</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>物联行业竞品分析</title>
    <link href="https://djlinkiot.github.io/2016/12/16/iot-competitive-products-analysis/"/>
    <id>https://djlinkiot.github.io/2016/12/16/iot-competitive-products-analysis/</id>
    <published>2016-12-16T21:20:41.000Z</published>
    <updated>2016-12-22T09:16:24.478Z</updated>
    
    <content type="html"><![CDATA[<h1 id="横向对比"><a href="#横向对比" class="headerlink" title="横向对比"></a>横向对比</h1><h2 id="App"><a href="#App" class="headerlink" title="App"></a>App</h2><h2 id="SDK"><a href="#SDK" class="headerlink" title="SDK"></a>SDK</h2><h2 id="云平台"><a href="#云平台" class="headerlink" title="云平台"></a>云平台</h2><h2 id="大数据"><a href="#大数据" class="headerlink" title="大数据"></a>大数据</h2><h2 id="人工智能"><a href="#人工智能" class="headerlink" title="人工智能"></a>人工智能</h2><h1 id="公司分类介绍"><a href="#公司分类介绍" class="headerlink" title="公司分类介绍"></a>公司分类介绍</h1><h2 id="互联网巨头"><a href="#互联网巨头" class="headerlink" title="互联网巨头"></a>互联网巨头</h2><h3 id="京东-微联"><a href="#京东-微联" class="headerlink" title="京东 微联"></a>京东 微联</h3><h3 id="阿里-小智"><a href="#阿里-小智" class="headerlink" title="阿里 小智"></a>阿里 小智</h3><h3 id="小米-米家"><a href="#小米-米家" class="headerlink" title="小米 米家"></a>小米 米家</h3><h3 id="QQ-物联"><a href="#QQ-物联" class="headerlink" title="QQ 物联"></a><a href="http://iot.open.qq.com/wiki/index.html" target="_blank" rel="external">QQ 物联</a></h3><a id="more"></a><h3 id="微信-物联"><a href="#微信-物联" class="headerlink" title="微信 物联"></a>微信 物联</h3><h2 id="家电巨头"><a href="#家电巨头" class="headerlink" title="家电巨头"></a>家电巨头</h2><h3 id="海尔-UHome"><a href="#海尔-UHome" class="headerlink" title="海尔 UHome"></a><a href="http://www.haigeek.com/static/information/page1.html" target="_blank" rel="external">海尔 UHome</a></h3><h4 id="U-平台概述"><a href="#U-平台概述" class="headerlink" title="U+平台概述"></a><a href="http://developer.haigeek.com:9030/selfservice/static/index.html#/devloperDoc//false" target="_blank" rel="external">U+平台概述</a></h4><ul><li><p>U+开放平台介绍</p><p>通过U+开放平台提供的 <code>WiFi模块uPlug</code>、<code>设备端SDK</code>、<code>应用端uSDK</code>、<code>嵌入式开发包uGW</code>，设备厂商的 <strong>WiFi设备</strong>、<strong>蓝牙设备</strong>、<strong>GPRS设备</strong>，以及 <strong>Zigbee</strong>、<strong>DALI</strong> 等异构类设备，都能便捷快速的实现与U+开放平台的互联和通讯，也能便捷的与不同厂家的不同产品实现互联互通。</p></li><li><p>U+接入方案介绍</p><p><img src="http://uhome.haier.net/download/resource/selfService/ueditor/image/1461727797518056433.jpg" alt="U+开放平台技术架构图"></p></li></ul><h4 id="接入流程"><a href="#接入流程" class="headerlink" title="接入流程"></a>接入流程</h4><ul><li><p>硬件接入流程</p></li><li><p>APP接入流程</p></li><li><p>轻应用接入流程</p></li><li><p>Open API接入流程</p></li></ul><h4 id="移动端SDK"><a href="#移动端SDK" class="headerlink" title="移动端SDK"></a>移动端SDK</h4><ul><li><p>概要介绍</p><p>uSDK 是一种可以配置、搜索和控制物联网家电的手机软件开发中间件。它对硬件资源要求小，运行稳定。目前支持的手机平台包括Android和iOS。现在已经被众多APP厂商使用，并开发出多款智能家电的手机应用。</p></li><li><p>功能介绍</p><p>uSDK应用结构图如下所示：</p><p><img src="http://uhome.haier.net/download/resource/selfService/ueditor/image/1462258403416015147.jpg" alt="uSDK应用结构图"></p><p>功能列表</p><ol><li>家庭内U+类设备搜索</li><li>U+类家电入网配置</li><li>家庭内控制U+类家电</li><li>U+类家电状态和报警上报</li><li>通知类消息推送</li><li>远程控制U+类家电</li><li>支持U+开放平台第三方APP管理</li></ol></li><li><p>优势介绍</p><p>uSDK 具有如下优点：</p><ol><li>提供快捷和方便的配置智能家电入网方式，目前支持 <code>softap</code> 和 <code>smartconfig</code> 两种</li><li>提供 <code>Android</code> 和 <code>iOS</code> 平台的 API，屏蔽了复杂的协议解析和网络通讯</li><li>长期改进用户体验和优化性能</li><li>专职的技术支持人员帮助开发者完成智能硬件手机应用的开发</li></ol></li><li><p>发展规划</p><p>uSDK 以用户为中心，以不断改进用户体验和优化性能为目标，打造成一种简单易用、 功能强大、运行稳定的手机软件中间件。</p><p>发展规划思路如下：</p><ol><li>支持更多协议类型的设备，例如AllSeen</li><li>不断提升用户体验，为满足手机开发者的需求，提供简单和功能强大的API接口和开发文档</li><li>软件功能迭代，随着市场需求的变化，uSDK 会不断开发新版本，以满足各种需求</li></ol></li></ul><h4 id="网关SDK（uGW）"><a href="#网关SDK（uGW）" class="headerlink" title="网关SDK（uGW）"></a>网关SDK（uGW）</h4><ul><li><p>简介</p><p>uGW 为u+网关中间件，提供管理设备操作的接口，应用开发者通过接口很方便操控u+下的设备；并为第三方设备厂商提供u+的接入标准及对应API接口，方便第三方设备接入U+。</p><p>uGW是基于Linux系统开发的，提供c语言及JAVA语言两种API。功能包括设备入网配置、搜索、控制、查询状态、设备状态变化上报、报警上报等操作接口。</p></li><li><p>开发包</p><ul><li>uGW_client.so（应用开发者使用该库提供的管理接口集中管理设备(接入U+的设备)）</li><li>uGW_server（uGW主服务程序）</li><li>uGW_br.so（设备接入库，设备接入者可以使用该库提供的接口将设备接入u+）</li></ul></li><li><p>系统框架图</p><p><img src="http://uhome.haier.net/download/resource/selfService/ueditor/image/1462784077137082140.jpg" alt="系统框架图"></p><p>支持功能：</p><ul><li>uGW支持所有海尔白电设备（uwt）的管控</li><li>uGW支持新标准海尔设备（CAE）的管控</li><li>uGW支持第三方设备以标准方式的接入管控</li><li>uGW支持接入设备的远程管控（U＋云）</li><li>uGW支持与手机端uSDK的互联互通</li></ul></li><li><p>应用开发者API</p><ul><li>设备配置入网API</li><li>设备列表获取API</li><li>设备上下线通知API</li><li>设备操作API</li><li>设备状态改变上报API</li><li>设备报警上报API</li><li>设备能力集获取API</li></ul></li><li><p>设备接入者API</p><ul><li>设备注册API</li><li>设备属性注册API</li><li>设备操作API</li><li>设备状态上报API</li><li>设备报警上报API</li></ul></li><li><p>发布</p><ul><li>UGW可以运行在多种嵌入式平台，需要运行平台或者接入设备厂商提供对应的工具链交叉编译。</li><li>设备开发文档及接口说明文档发布在海极网，需要开发者注册账号下载需要的开发文档进行开发</li></ul></li></ul><h4 id="蓝牙SDK"><a href="#蓝牙SDK" class="headerlink" title="蓝牙SDK"></a>蓝牙SDK</h4><p>蓝牙SDK是一种支持经典蓝牙、低功耗（BLE）蓝牙设备的软件开发中间件。可运行在 POSIX 标准系统上，例如 Android、iOS、Linux 等。</p><ul><li><p>优势介绍</p><p>蓝牙SDK 具有如下优点：</p><ol><li>设计轻量化</li><li>接口定义简单</li><li>支持品类众多，目前已支持Bong、欧姆龙、时云、微智电子等厂家的蓝牙设备</li><li>占用资源小，可以在嵌入式设备上运行</li><li>长期改进用户体验和优化性能</li></ol></li><li><p>发展规划</p><p>蓝牙SDK以用户为中心，以不断改进用户体验和优化性能为目标，打造成一种简单易用、 功能强大、运行稳定、支持品类众多的软件中间件。</p></li></ul><h4 id="Open-API"><a href="#Open-API" class="headerlink" title="Open API"></a>Open API</h4><h3 id="美的-M·Smart"><a href="#美的-M·Smart" class="headerlink" title="美的 M·Smart"></a><a href="https://iot.midea.com/index.php" target="_blank" rel="external">美的 M·Smart</a></h3><h4 id="概述"><a href="#概述" class="headerlink" title="概述"></a><a href="http://smartbbs.midea.com/thread-2327-1-1.html" target="_blank" rel="external">概述</a></h4><p>整个系统从上至下分为四层。业务逻辑层开放给事业部进行二次开发，事业部可以根据自己的需求定制不同的功能。应用框架、应用协议和系统调度为研究院对M-Smart协议的完整实现，包括系统控制、家电端串口通信，网络端通信三大部分。适配层接口为研究院针对不同Wi-Fi芯片定制的一套统一接口。该接口是上层应用与芯片模块沟通的桥梁。</p><p><img src="http://m-bbs.oss-cn-shenzhen.aliyuncs.com/forum/201602/17/105001sni8k4oio4r8tr44.png" alt="美的SDK分层架构图"></p><p>采用这层种分层架构设计使得M-Smart Wi-Fi系统具备跨平台性和可移植性。这为M-Smart系统的推广起到了很好的推动作用；此外，采用适配层接口的设计，减轻了上层应用、协议开发的维护成本，利于提高整个系统的稳定性和可靠性。总体而言，M-Smart SDK相较于市场上现有的物联网解决方案，具备以下几大优势：</p><ul><li>通用性 —— 一套代码适配多家芯片方案</li><li>开发便利性 —— 只需修改一行代码即可切换芯片平台</li><li>系统非耦合性 —— SDK的功能模块之间相互独立，用户可以自由裁剪</li><li>系统可移植性 —— 由于采用适配层接口设计，可以方便移植到Linux、Android平台</li><li>多云平台支持 —— 除了支持美的云之外，还支持包括京东云、阿里云、Homekit等其他云平台</li><li>低成本优势 —— M-Smart SDK支持的Wi-Fi模块均具备高性价比</li></ul><p><img src="http://m-bbs.oss-cn-shenzhen.aliyuncs.com/forum/201602/17/105001dz7gr1aah091a6rz.png" alt="M-Smart SDK"></p><p>M-Smart SDK是沟通底层芯片硬件与云平台之间的桥梁。M-Smart SDK完美地实现了“多对多”方案，极大地丰富了家电厂商对于云平台、Wi-Fi芯片的可选择性。</p><h4 id="App-SDK-介绍"><a href="#App-SDK-介绍" class="headerlink" title="App SDK 介绍"></a><a href="https://iot.midea.com/index.php/develop/index?pid=206&amp;cid=207" target="_blank" rel="external">App SDK 介绍</a></h4><p><img src="http://test-smartbbs.oss-cn-hangzhou.aliyuncs.com/openplatform/editor/image/20160617/sw2.png" alt="M-Smart SDK"></p><h4 id="开发者注册及应用相关流程文档"><a href="#开发者注册及应用相关流程文档" class="headerlink" title="开发者注册及应用相关流程文档"></a>开发者注册及应用相关流程文档</h4><ul><li><a href="http://test-smartbbs.oss-cn-hangzhou.aliyuncs.com/openplatform/editor/file/20160617/M-Smart%E5%BC%80%E5%8F%91%E8%80%85%E6%B3%A8%E5%86%8C.pdf" target="_blank" rel="external">M-Smart 开发者注册</a></li><li><a href="http://test-smartbbs.oss-cn-hangzhou.aliyuncs.com/openplatform/editor/file/20160617/M-Smart_%E5%BA%94%E7%94%A8%E5%8F%91%E5%B8%83%E7%94%B3%E8%AF%B7.pdf" target="_blank" rel="external">M-Smart 应用发布申请</a></li><li><a href="http://test-smartbbs.oss-cn-hangzhou.aliyuncs.com/openplatform/editor/file/20160617/M-Smart_%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91%E7%94%B3%E8%AF%B7.pdf" target="_blank" rel="external">M-Smart 应用开发申请</a></li></ul><h4 id="SDK集成调用说明"><a href="#SDK集成调用说明" class="headerlink" title="SDK集成调用说明"></a>SDK集成调用说明</h4><ul><li><a href="http://test-smartbbs.oss-cn-hangzhou.aliyuncs.com/openplatform/editor/file/20160621/001---SDK_%E5%BA%94%E7%94%A8%E9%9B%86%E6%88%90%E8%B0%83%E7%94%A8%E6%95%B4%E4%BD%93%E6%B5%81%E7%A8%8B.pdf" target="_blank" rel="external">SDK 应用集成调用整体流程</a></li><li><a href="http://test-smartbbs.oss-cn-hangzhou.aliyuncs.com/openplatform/editor/file/20160621/%E7%AE%80%E5%8C%96%E7%89%88SDK%E5%AF%B9%E6%8E%A5%E6%B5%81%E7%A8%8B.pdf" target="_blank" rel="external">简化版SDK对接流程</a></li><li><a href="http://test-smartbbs.oss-cn-hangzhou.aliyuncs.com/openplatform/editor/file/20160621/005---%E7%AC%AC%E4%B8%89%E6%96%B9%E4%BA%91%E5%AF%B9%E6%8E%A5%E6%96%B9%E6%A1%88%E8%AF%B4%E6%98%8E(%E7%AC%AC%E4%B8%89%E6%96%B9%E4%BA%91%E7%AB%AF%E9%9C%80%E8%A6%81%E5%AE%9E%E7%8E%B0%E7%9A%84%E6%8E%A5%E5%8F%A3" target="_blank" rel="external">云对接方案说明</a>-1.5.pdf)</li><li><a href="http://test-smartbbs.oss-cn-hangzhou.aliyuncs.com/openplatform/editor/file/20160621/004---%E5%AE%B6%E7%94%B5%E5%8A%9F%E8%83%BD%E5%B1%9E%E6%80%A7--%E7%94%A8%E4%BA%8EAndroid%E7%BB%84MAP%E5%8C%85.xlsx" target="_blank" rel="external">家电功能属性</a></li></ul><h4 id="接口说明文档以及错误码"><a href="#接口说明文档以及错误码" class="headerlink" title="接口说明文档以及错误码"></a>接口说明文档以及错误码</h4><ul><li><a href="http://test-smartbbs.oss-cn-hangzhou.aliyuncs.com/openplatform/editor/file/20160621/002---SDK_%E5%BA%95%E5%B1%82%E6%8E%A5%E5%8F%A3%E8%AF%B4%E6%98%8E-Android.pdf" target="_blank" rel="external">SDK Android底层接口说明</a><br>—— 用户管理接口，家电管理接口，数据传输接口</li><li><a href="http://test-smartbbs.oss-cn-hangzhou.aliyuncs.com/openplatform/editor/file/20160621/003---SDK_%E5%BA%94%E7%94%A8%E6%8E%A5%E5%8F%A3%E8%AF%B4%E6%98%8E1.1.6_.pdf" target="_blank" rel="external">SDK Android应用接口说明</a><br>—— 设备控制接口，语音识别接口（控制、合成）</li><li><a href="http://test-smartbbs.oss-cn-hangzhou.aliyuncs.com/openplatform/editor/file/20160622/iOS_SLK_家庭组接口文档.zip" target="_blank" rel="external">SDK iOS底层接口说明</a></li><li><a href="http://test-smartbbs.oss-cn-hangzhou.aliyuncs.com/openplatform/editor/file/20160617/%E8%AF%AD%E9%9F%B3SDK2.0%E8%AF%AD%E9%9F%B3%E9%9B%86%E6%88%90%E6%8E%A5%E5%8F%A3.pdf" target="_blank" rel="external">语音SDK集成接口</a></li><li><a href="http://test-smartbbs.oss-cn-hangzhou.aliyuncs.com/openplatform/editor/file/20160621/%E9%94%99%E8%AF%AF%E7%A0%81%E8%AF%B4%E6%98%8E_20160102.pdf" target="_blank" rel="external">SDK错误码说明</a><br>—— 通用错误，用户相关，设备相关，插件相关，家庭相关，SDK状态码</li></ul><h4 id="SDK示例Demo"><a href="#SDK示例Demo" class="headerlink" title="SDK示例Demo"></a>SDK示例Demo</h4><ul><li><a href="http://test-smartbbs.oss-cn-hangzhou.aliyuncs.com/openplatform/editor/file/20160621/SLK_2.62_1045_pro.zip" target="_blank" rel="external">Android底层SDK（SLK）</a></li><li><a href="http://test-smartbbs.oss-cn-hangzhou.aliyuncs.com/openplatform/editor/file/20160622/SSK_1.2.9_201604192021.zip" target="_blank" rel="external">Android 应用层SDK（SSK）</a></li><li><a href="http://test-smartbbs.oss-cn-hangzhou.aliyuncs.com/openplatform/editor/file/20160622/Android_SLKDemo_20160614.zip" target="_blank" rel="external">Android SLK Demo</a></li><li><a href="http://test-smartbbs.oss-cn-hangzhou.aliyuncs.com/openplatform/editor/file/20160622/SSKDemoProguard_20160616.zip" target="_blank" rel="external">Android SSK Demo</a></li><li><a href="http://test-smartbbs.oss-cn-hangzhou.aliyuncs.com/openplatform/editor/file/20160622/SLK_iOS_V2.4.3(family" target="_blank" rel="external">iOS 底层SDK附带Demo（SLK）</a>.zip)</li><li><a href="http://test-smartbbs.oss-cn-hangzhou.aliyuncs.com/openplatform/editor/file/20160622/SSKProtocol库-Demo-文档.zip" target="_blank" rel="external">iOS 应用层SDK附带Demo（SSK）</a></li></ul><h3 id="苏宁-智能开发平台"><a href="#苏宁-智能开发平台" class="headerlink" title="苏宁 智能开发平台"></a><a href="http://opensh.suning.com/shsys-web/openPlatform/account/ptjs.htm" target="_blank" rel="external">苏宁 智能开发平台</a></h3><h4 id="平台概况"><a href="#平台概况" class="headerlink" title="平台概况"></a><a href="http://opensh.suning.com/shsys-web/openPlatform/account/jszc.htm#help1" target="_blank" rel="external">平台概况</a></h4><p>智能家居产品体系以智能家居云平台和各种智能家庭终端为服务载体。具备以下优势：</p><ol><li>云平台基于云计算和大数据技术，通过苏宁云服务框架整合公司优势资源，搭建起来的云服务的开放平台。</li><li>开放平台面向家庭用户、家电厂商、创新企业、各种电器设备提供服务。</li><li>云平台开放的能力包括：基础设施云平台、大数据分析、苏宁IT系统和完整的供应链。</li></ol><p><img src="http://opensh.suning.com/shsys-web/webstatic/smartHomeOpen2.0v/openHome-help/temp/d_p1.png" alt=""></p><h4 id="开发平台系统架构"><a href="#开发平台系统架构" class="headerlink" title="开发平台系统架构"></a><a href="http://opensh.suning.com/shsys-web/openPlatform/account/jszc.htm#help2" target="_blank" rel="external">开发平台系统架构</a></h4><p>为智能家居合作伙伴提供对接苏宁智能家居的服务平台，通过苏宁智能家居云平台的支撑，使合作伙伴简单、快速的完成设备与平台的对接。</p><p><img src="http://opensh.suning.com/shsys-web/webstatic/smartHomeOpen2.0v/openHome-help/temp/d_p2.png" alt=""></p><p>平台优势</p><ul><li><strong>安全性高</strong>：<br>采用2048位非对称加密算法进行密匙传递， 设备模块与云端数据交互，均使用密匙加解密，保证设备通讯安全。</li><li><strong>稳定性好</strong>：<br>系统使用云端部署，可根据使用情况进行动态扩充。采用及时消息与普通消息分离的系统设计，提升系统性能。</li><li><strong>接入速度快</strong>：<br>系统自动生成固件代码及控制面板原型，用户仅需提交设备通讯协议及选择的无线模块型号，双方技术沟通确认后，即可通过系统生成相关资料。</li><li><strong>提供用户定制操作面板能力</strong>：<br>系统提供功能供用户自己上传开发的面板，提升交互的积极性与参与感。</li><li><strong>提供用户定制APP能力</strong>：<br>用户根据需要提交需调用的api接口申请，根据接口说明，开发自己的应用程序。</li></ul><h4 id="合作伙伴申请"><a href="#合作伙伴申请" class="headerlink" title="合作伙伴申请"></a><a href="http://opensh.suning.com/shsys-web/openPlatform/account/jszc.htm#help3" target="_blank" rel="external">合作伙伴申请</a></h4><h4 id="合作流程"><a href="#合作流程" class="headerlink" title="合作流程"></a><a href="http://opensh.suning.com/shsys-web/openPlatform/account/jszc.htm#help4" target="_blank" rel="external">合作流程</a></h4><h4 id="技术学习"><a href="#技术学习" class="headerlink" title="技术学习"></a><a href="http://opensh.suning.com/shsys-web/openPlatform/account/jszc.htm#help5" target="_blank" rel="external">技术学习</a></h4><ul><li><p>家电配网详解</p><p><img src="http://opensh.suning.com/shsys-web/webstatic/smartHomeOpen2.0v/openHome-help/temp/d_p66.jpg" alt="家电配网流程"></p><ol><li>苏宁智能APP扫描设备上的配网二维码；</li><li>苏宁智能APP分析二维码信息，从中获取到设备的PID和配网模式；</li><li>苏宁智能APP根据设备PID信息，从苏宁云端获取设备图片、配网引导等；</li><li>手动触发设备进入配网模式；</li><li>设备通知wifi模块进入配网模式；</li><li>wifi模块启动配网监听服务，监听配网广播包；</li><li>苏宁智能APP将用户输入的WIFI账号、密码信息通过广播发送给wifi模块；</li><li>wifi模块接收到WIFI账号、密码信息后，进行联网；</li><li>wifi模块联网成功后，通知苏宁智能APP配网成功，并返回设备MAC信息；</li><li>苏宁智能APP接收到配网成功的消息后，调用苏宁云端接口进行设备绑定；</li></ol></li><li><p>APP操作详解</p><p><img src="http://opensh.suning.com//shsys-web/webstatic/smartHomeOpen2.0v/openHome-help/temp/d_p77.jpg" alt="App操作详解"></p><p>命令发送过程：</p><ol><li>用户在苏宁智能APP控制面板上控制设备，比如开机；</li><li>苏宁智能APP将控制设备的命令进行加密，将命令信息发送给苏宁云；</li><li>苏宁云端收到苏宁智能APP发送的命令后，判断用户是否登录，判断用户是否具有控制该设备的权限，对命令进行解密；</li><li>苏宁云端根据设备型号将命令信息做必要的转换，进行加密，发送给智能设备；</li><li>智能设备接收到命令信息，对信息进行解密，判断信息的有效性；</li><li>智能设备执行命令；</li></ol><p>状态数据上报过程：</p><ol><li>智能设备状态发生变化时，智能设备将最新状态进行加密，将最新状态数据上报给苏宁云端；</li><li>苏宁云端接收到设备上报的数据，进行解密，根据设备型号解析数据，得到上报的状态数据；</li><li>苏宁云端将解析后的状态数据发送给苏宁智能APP；</li><li>苏宁智能APP接收到最新的状态数据，使用状态数据刷新控制面板，APP呈现设备最新的状态；</li></ol></li></ul><h4 id="APP-SDK下载"><a href="#APP-SDK下载" class="headerlink" title="APP SDK下载"></a><a href="http://opensh.suning.com/shsys-web/openPlatform/account/jszc.htm#help6" target="_blank" rel="external">APP SDK下载</a></h4><p>SDK提供功能</p><ol><li>设备配网：让智能设备连上指定的路由器；</li><li>设备绑定：让智能设备连接到苏宁云；</li><li>设备删除：从苏宁云删除智能设备；</li><li>用户设备查询：查询用户下已经绑定的智能设备；</li><li>用户设备分享：将设备分享给另一个用户；</li><li>修改设备名称：修改用户下显示的设备名称；</li><li>设备查询：查询智能设备的信息和状态；</li><li>设备控制：控制智能设备；</li><li>接收状态推送：收取智能设备上报的状态变化；</li></ol><h4 id="API-说明"><a href="#API-说明" class="headerlink" title="API 说明"></a><a href="http://opensh.suning.com/shsys-web/openPlatform/account/jszc.htm#help7" target="_blank" rel="external">API 说明</a></h4><p>需要成为合作伙伴</p><h4 id="通用面板下载"><a href="#通用面板下载" class="headerlink" title="通用面板下载"></a><a href="http://opensh.suning.com/shsys-web/openPlatform/account/jszc.htm#help8" target="_blank" rel="external">通用面板下载</a></h4><p>需要成为合作伙伴</p><h2 id="其他云提供商"><a href="#其他云提供商" class="headerlink" title="其他云提供商"></a>其他云提供商</h2><h3 id="机智云"><a href="#机智云" class="headerlink" title="机智云"></a><a href="http://docs.gizwits.com/zh-cn/overview/overview.html" target="_blank" rel="external">机智云</a></h3><p>未开放SDK</p><h3 id="氦氪云"><a href="#氦氪云" class="headerlink" title="氦氪云"></a><a href="http://docs.hekr.me/v4/index.html" target="_blank" rel="external">氦氪云</a></h3><p>需要申请合作账号，才能开发SDK</p><h3 id="智城云"><a href="#智城云" class="headerlink" title="智城云"></a><a href="http://dev.machtalk.net/intro/regist" target="_blank" rel="external">智城云</a></h3><h3 id="云智易"><a href="#云智易" class="headerlink" title="云智易"></a><a href="http://www.xlink.cn/guide.html" target="_blank" rel="external">云智易</a></h3><h3 id="涂鸦智能"><a href="#涂鸦智能" class="headerlink" title="涂鸦智能"></a><a href="http://www.tuya.com/" target="_blank" rel="external">涂鸦智能</a></h3><p>未开放SDK</p><h3 id="AbleCloud"><a href="#AbleCloud" class="headerlink" title="AbleCloud"></a><a href="https://www.ablecloud.cn/" target="_blank" rel="external">AbleCloud</a></h3><h3 id="Yeelink"><a href="#Yeelink" class="headerlink" title="Yeelink"></a><a href="http://www.yeelink.net/developer" target="_blank" rel="external">Yeelink</a></h3><h3 id="深智云"><a href="#深智云" class="headerlink" title="深智云"></a><a href="http://www.dtston.com/developer.php" target="_blank" rel="external">深智云</a></h3><h3 id="开发快"><a href="#开发快" class="headerlink" title="开发快"></a><a href="http://developer.kaifakuai.com/" target="_blank" rel="external">开发快</a></h3><h3 id="妙联"><a href="#妙联" class="headerlink" title="妙联"></a><a href="http://www.miotlink.com/index.php" target="_blank" rel="external">妙联</a></h3><p>未开放SDK</p><h3 id="控客"><a href="#控客" class="headerlink" title="控客"></a><a href="http://www.ikonke.com/index.php" target="_blank" rel="external">控客</a></h3><p>未开放SDK</p><h3 id="司南物联"><a href="#司南物联" class="headerlink" title="司南物联"></a><a href="http://www.scinan.com/" target="_blank" rel="external">司南物联</a></h3><p>未开放SDK</p><h3 id="艾拉物联"><a href="#艾拉物联" class="headerlink" title="艾拉物联"></a><a href="http://www.ayla.com.cn/" target="_blank" rel="external">艾拉物联</a></h3><p>未开放SDK</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;横向对比&quot;&gt;&lt;a href=&quot;#横向对比&quot; class=&quot;headerlink&quot; title=&quot;横向对比&quot;&gt;&lt;/a&gt;横向对比&lt;/h1&gt;&lt;h2 id=&quot;App&quot;&gt;&lt;a href=&quot;#App&quot; class=&quot;headerlink&quot; title=&quot;App&quot;&gt;&lt;/a&gt;App&lt;/h2&gt;&lt;h2 id=&quot;SDK&quot;&gt;&lt;a href=&quot;#SDK&quot; class=&quot;headerlink&quot; title=&quot;SDK&quot;&gt;&lt;/a&gt;SDK&lt;/h2&gt;&lt;h2 id=&quot;云平台&quot;&gt;&lt;a href=&quot;#云平台&quot; class=&quot;headerlink&quot; title=&quot;云平台&quot;&gt;&lt;/a&gt;云平台&lt;/h2&gt;&lt;h2 id=&quot;大数据&quot;&gt;&lt;a href=&quot;#大数据&quot; class=&quot;headerlink&quot; title=&quot;大数据&quot;&gt;&lt;/a&gt;大数据&lt;/h2&gt;&lt;h2 id=&quot;人工智能&quot;&gt;&lt;a href=&quot;#人工智能&quot; class=&quot;headerlink&quot; title=&quot;人工智能&quot;&gt;&lt;/a&gt;人工智能&lt;/h2&gt;&lt;h1 id=&quot;公司分类介绍&quot;&gt;&lt;a href=&quot;#公司分类介绍&quot; class=&quot;headerlink&quot; title=&quot;公司分类介绍&quot;&gt;&lt;/a&gt;公司分类介绍&lt;/h1&gt;&lt;h2 id=&quot;互联网巨头&quot;&gt;&lt;a href=&quot;#互联网巨头&quot; class=&quot;headerlink&quot; title=&quot;互联网巨头&quot;&gt;&lt;/a&gt;互联网巨头&lt;/h2&gt;&lt;h3 id=&quot;京东-微联&quot;&gt;&lt;a href=&quot;#京东-微联&quot; class=&quot;headerlink&quot; title=&quot;京东 微联&quot;&gt;&lt;/a&gt;京东 微联&lt;/h3&gt;&lt;h3 id=&quot;阿里-小智&quot;&gt;&lt;a href=&quot;#阿里-小智&quot; class=&quot;headerlink&quot; title=&quot;阿里 小智&quot;&gt;&lt;/a&gt;阿里 小智&lt;/h3&gt;&lt;h3 id=&quot;小米-米家&quot;&gt;&lt;a href=&quot;#小米-米家&quot; class=&quot;headerlink&quot; title=&quot;小米 米家&quot;&gt;&lt;/a&gt;小米 米家&lt;/h3&gt;&lt;h3 id=&quot;QQ-物联&quot;&gt;&lt;a href=&quot;#QQ-物联&quot; class=&quot;headerlink&quot; title=&quot;QQ 物联&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://iot.open.qq.com/wiki/index.html&quot;&gt;QQ 物联&lt;/a&gt;&lt;/h3&gt;
    
    </summary>
    
      <category term="IOT" scheme="https://djlinkiot.github.io/categories/IOT/"/>
    
      <category term="IOT Analysis" scheme="https://djlinkiot.github.io/categories/IOT/IOT-Analysis/"/>
    
    
      <category term="IOT" scheme="https://djlinkiot.github.io/tags/IOT/"/>
    
      <category term="IOT Analysis" scheme="https://djlinkiot.github.io/tags/IOT-Analysis/"/>
    
  </entry>
  
  <entry>
    <title>物联协议2.0 规划</title>
    <link href="https://djlinkiot.github.io/2016/12/14/iot-protocol-v2-design/"/>
    <id>https://djlinkiot.github.io/2016/12/14/iot-protocol-v2-design/</id>
    <published>2016-12-14T21:01:28.000Z</published>
    <updated>2016-12-22T09:16:24.478Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Protocol-1-x"><a href="#Protocol-1-x" class="headerlink" title="Protocol 1.x"></a>Protocol 1.x</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><a id="more"></a><h1 id="Protocol-2-0"><a href="#Protocol-2-0" class="headerlink" title="Protocol 2.0"></a>Protocol 2.0</h1>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Protocol-1-x&quot;&gt;&lt;a href=&quot;#Protocol-1-x&quot; class=&quot;headerlink&quot; title=&quot;Protocol 1.x&quot;&gt;&lt;/a&gt;Protocol 1.x&lt;/h1&gt;&lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;
    
    </summary>
    
      <category term="IOT" scheme="https://djlinkiot.github.io/categories/IOT/"/>
    
      <category term="IOT Protocol" scheme="https://djlinkiot.github.io/categories/IOT/IOT-Protocol/"/>
    
    
      <category term="IOT" scheme="https://djlinkiot.github.io/tags/IOT/"/>
    
      <category term="IOT Protocol" scheme="https://djlinkiot.github.io/tags/IOT-Protocol/"/>
    
      <category term="IOT Protocol 2.0" scheme="https://djlinkiot.github.io/tags/IOT-Protocol-2-0/"/>
    
  </entry>
  
  <entry>
    <title>物联云端 架构3.0 规划</title>
    <link href="https://djlinkiot.github.io/2016/12/13/iot-cloud-v3-design/"/>
    <id>https://djlinkiot.github.io/2016/12/13/iot-cloud-v3-design/</id>
    <published>2016-12-13T16:37:05.000Z</published>
    <updated>2016-12-22T09:16:24.478Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Cloud-3-0"><a href="#Cloud-3-0" class="headerlink" title="Cloud 3.0"></a>Cloud 3.0</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Cloud-3-0&quot;&gt;&lt;a href=&quot;#Cloud-3-0&quot; class=&quot;headerlink&quot; title=&quot;Cloud 3.0&quot;&gt;&lt;/a&gt;Cloud 3.0&lt;/h1&gt;&lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;
    
    </summary>
    
      <category term="IOT" scheme="https://djlinkiot.github.io/categories/IOT/"/>
    
      <category term="IOT Cloud" scheme="https://djlinkiot.github.io/categories/IOT/IOT-Cloud/"/>
    
    
      <category term="IOT" scheme="https://djlinkiot.github.io/tags/IOT/"/>
    
      <category term="IOT Cloud" scheme="https://djlinkiot.github.io/tags/IOT-Cloud/"/>
    
      <category term="IOT Cloud 3.0" scheme="https://djlinkiot.github.io/tags/IOT-Cloud-3-0/"/>
    
  </entry>
  
  <entry>
    <title>物联SDK3.0 规划</title>
    <link href="https://djlinkiot.github.io/2016/12/13/iot-sdk-v3-design/"/>
    <id>https://djlinkiot.github.io/2016/12/13/iot-sdk-v3-design/</id>
    <published>2016-12-13T16:32:10.000Z</published>
    <updated>2016-12-22T09:16:24.478Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SDK-3-0-规划"><a href="#SDK-3-0-规划" class="headerlink" title="SDK 3.0 规划"></a>SDK 3.0 规划</h1><h2 id="整体规划与设计目标"><a href="#整体规划与设计目标" class="headerlink" title="整体规划与设计目标"></a>整体规划与设计目标</h2><a id="more"></a><ul><li>SDK 平台与功能划分</li></ul><table><thead><tr><th>平台</th><th>SDK</th><th>说明</th></tr></thead><tbody><tr><td>Android/iOS</td><td>–</td><td>基于v2.x继续优化</td></tr><tr><td>Android/iOS</td><td>ReactNative SDK</td><td>给混合应用 ReactNative 提供物联通信、物联逻辑、以及一些原生控件的 RN 插件</td></tr><tr><td>Android/iOS</td><td>Hybrid API（基于Cordova）</td><td>基于v2.x，为 Vue、Ng 提供Cordova 插件</td></tr><tr><td>微信</td><td>H5 SDK</td><td>基于v2.x，提供 React、Vue、Ng 集成插件</td></tr><tr><td>微信</td><td>小程序 SDK</td><td>提供在小程序环境下操作物联设备的SDK，逻辑部分与H5 SDK共用</td></tr><tr><td>硬件</td><td>WiFi SDK</td><td>基于v2.x继续优化</td></tr><tr><td>硬件</td><td>蓝牙 SDK</td><td>对接 Djlink BLE 协议</td></tr><tr><td>硬件</td><td>GPRS SDK</td><td>对接 Djlink Cloud 协议</td></tr><tr><td>硬件</td><td>树莓派 SDK</td><td>基于树莓派 系统开发SDK</td></tr><tr><td>硬件</td><td>Android Things SDK</td><td>基于Android Things 系统开发SDK</td></tr></tbody></table><h2 id="Android-SDK-3-0"><a href="#Android-SDK-3-0" class="headerlink" title="Android SDK 3.0"></a>Android SDK 3.0</h2><h2 id="iOS-SDK-3-0"><a href="#iOS-SDK-3-0" class="headerlink" title="iOS SDK 3.0"></a>iOS SDK 3.0</h2><h2 id="H5-SDK-3-0"><a href="#H5-SDK-3-0" class="headerlink" title="H5 SDK 3.0"></a>H5 SDK 3.0</h2>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;SDK-3-0-规划&quot;&gt;&lt;a href=&quot;#SDK-3-0-规划&quot; class=&quot;headerlink&quot; title=&quot;SDK 3.0 规划&quot;&gt;&lt;/a&gt;SDK 3.0 规划&lt;/h1&gt;&lt;h2 id=&quot;整体规划与设计目标&quot;&gt;&lt;a href=&quot;#整体规划与设计目标&quot; class=&quot;headerlink&quot; title=&quot;整体规划与设计目标&quot;&gt;&lt;/a&gt;整体规划与设计目标&lt;/h2&gt;
    
    </summary>
    
      <category term="IOT" scheme="https://djlinkiot.github.io/categories/IOT/"/>
    
      <category term="IOT SDK" scheme="https://djlinkiot.github.io/categories/IOT/IOT-SDK/"/>
    
    
      <category term="IOT" scheme="https://djlinkiot.github.io/tags/IOT/"/>
    
      <category term="IOT SDK" scheme="https://djlinkiot.github.io/tags/IOT-SDK/"/>
    
      <category term="IOT SDK 3.0" scheme="https://djlinkiot.github.io/tags/IOT-SDK-3-0/"/>
    
  </entry>
  
  <entry>
    <title>物联App 架构3.0 规划</title>
    <link href="https://djlinkiot.github.io/2016/12/13/iot-app-v3-design/"/>
    <id>https://djlinkiot.github.io/2016/12/13/iot-app-v3-design/</id>
    <published>2016-12-13T16:32:01.000Z</published>
    <updated>2016-12-22T09:16:24.478Z</updated>
    
    <content type="html"><![CDATA[<h1 id="App-3-0"><a href="#App-3-0" class="headerlink" title="App 3.0"></a>App 3.0</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;App-3-0&quot;&gt;&lt;a href=&quot;#App-3-0&quot; class=&quot;headerlink&quot; title=&quot;App 3.0&quot;&gt;&lt;/a&gt;App 3.0&lt;/h1&gt;&lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;
    
    </summary>
    
      <category term="IOT" scheme="https://djlinkiot.github.io/categories/IOT/"/>
    
      <category term="IOT App" scheme="https://djlinkiot.github.io/categories/IOT/IOT-App/"/>
    
    
      <category term="IOT" scheme="https://djlinkiot.github.io/tags/IOT/"/>
    
      <category term="IOT App" scheme="https://djlinkiot.github.io/tags/IOT-App/"/>
    
      <category term="IOT App 3.0" scheme="https://djlinkiot.github.io/tags/IOT-App-3-0/"/>
    
  </entry>
  
  <entry>
    <title>物联SDK2.0 规划</title>
    <link href="https://djlinkiot.github.io/2016/12/13/iot-sdk-v2-design/"/>
    <id>https://djlinkiot.github.io/2016/12/13/iot-sdk-v2-design/</id>
    <published>2016-12-13T16:29:17.000Z</published>
    <updated>2016-12-22T09:16:24.478Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SDK-1-x-现状"><a href="#SDK-1-x-现状" class="headerlink" title="SDK 1.x 现状"></a>SDK 1.x 现状</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>目前 Djlink SDK，只是在内部使用，没有形成文档化，没有对外发布的能力。而且包括架构设计，API设计都有很多东西需要优化。下面对当下 Android、iOS、H5 等几大部分SDK做一个概述。</p><h2 id="Android-SDK-1-x"><a href="#Android-SDK-1-x" class="headerlink" title="Android SDK 1.x"></a>Android SDK 1.x</h2><ul><li><p>采用 Android 模块化依赖管理方案 <code>Gradle</code>，依赖于 <code>Maven</code> 仓库</p></li><li><p>项目代码托管在公司自己搭建的 <code>Gitlab</code> 服务器上（ <a href="https://git.djlink.cn/djlink.dev.iot.android/IOTSDKAndroidV1" target="_blank" rel="external">链接: IOTSDKAndroidV1</a> ），打完的 <code>.aar</code> 包托管到 <a href="http://maven.djlink.cn:8081/nexus/" target="_blank" rel="external">公司 Maven 服务器</a> 上。</p></li></ul><a id="more"></a><ul><li><p>SDK 包含内容：</p><ul><li>通用API —— 封装了一套完整的API，<code>SkySDK</code></li><li>通用UI —— 基本控件（<code>SweetDialog</code>、<code>ActionSheet</code>），网络异常弹框，<code>BaseActivity</code>，<code>BaseFragment</code></li><li>物联逻辑 —— 配网，发指令，大小循环过滤，MCU数据编解码（注解）</li><li>业务接口 —— 所有接口的封装</li><li>底层通信 —— 外网推送长连接 <code>MQTT</code>，内网 <code>Socket</code> 通信</li><li>底层支撑 —— 日志系统，工具类，线程池，持久化层</li></ul></li><li><p>存在的问题：</p><ul><li>耦合性太强，不应该包含 UI</li><li>HTTP 接口 耦合性略强，抽象成独立服务</li><li>MQTT 服务不稳定</li><li>SDK 接口设计不太合理</li></ul></li></ul><h2 id="iOS-SDK-1-x"><a href="#iOS-SDK-1-x" class="headerlink" title="iOS SDK 1.x"></a>iOS SDK 1.x</h2><ul><li><p>采用 iOS 模块化依赖管理方案 <code>CocoaPods</code>，依赖于 <code>Git</code> 仓库。</p></li><li><p>项目代码托管在 <code>Github</code>，开源形式（ <a href="https://github.com/lixiao7215981/SkywareUI" target="_blank" rel="external">链接: SkywareUI</a> ）。由于其中包含公司接口，极其危险，现已着手迁移到公司自己搭建的 <code>Gitlab</code> 服务器上。</p></li><li><p>SDK 包含内容：</p><ul><li>UI —— 除了设备详情页，个人中心，大部分页面及其相关业务逻辑</li><li>物联逻辑 —— 配网，长连接MQTT，发指令</li><li>接口 —— 所有接口的封装</li></ul></li><li><p>存在的问题：</p><ul><li>代码开源，应该尽快迁移到公司自己的 <code>Git</code> 服务器</li><li>没有打成包，直接依赖源码，不方便对外提供</li><li>耦合性太强，不应该包含UI</li><li>SDK 接口设计不合理</li></ul></li></ul><h2 id="Hybrid-API-（H5）"><a href="#Hybrid-API-（H5）" class="headerlink" title="Hybrid API （H5）"></a>Hybrid API （H5）</h2><ul><li>采用最基础的 <code>Hybrid</code> 方案，<code>Android</code> 和 <code>iOS</code> 分别通过 <code>WebView</code> 与 前端 <code>JavaScript</code> 进行交互</li><li><p>API 包含内容</p><ul><li>UI相关 —— js 渲染完成，滑动手势</li><li>推送 —— MQTT 状态上报</li><li>接口 —— 天气接口、设备信息接口</li><li>原生相关 —— 打电话</li></ul></li><li><p>存在的问题：</p><ul><li>接口设计过于随意，零散</li><li>缺乏 <code>JavaScript</code> 层面的基本封装</li></ul></li></ul><h2 id="微信-SDK"><a href="#微信-SDK" class="headerlink" title="微信 SDK"></a>微信 SDK</h2><ul><li>目前微信端尚未抽象出SDK</li></ul><h2 id="OpenAPI"><a href="#OpenAPI" class="headerlink" title="OpenAPI"></a>OpenAPI</h2><ul><li>服务器目前没有严格意义上的 <code>OpenApi</code>，接口只有对内接口，接口本身校验机制薄弱，极易被攻破。</li></ul><h2 id="硬件SDK-——-WiFi-蓝牙"><a href="#硬件SDK-——-WiFi-蓝牙" class="headerlink" title="硬件SDK —— WiFi / 蓝牙"></a>硬件SDK —— WiFi / 蓝牙</h2><ul><li>目前硬件端尚未抽象出SDK</li></ul><h1 id="SDK-2-0-规划"><a href="#SDK-2-0-规划" class="headerlink" title="SDK 2.0 规划"></a>SDK 2.0 规划</h1><h2 id="整体规划与设计目标"><a href="#整体规划与设计目标" class="headerlink" title="整体规划与设计目标"></a>整体规划与设计目标</h2><h3 id="设计目标"><a href="#设计目标" class="headerlink" title="设计目标"></a>设计目标</h3><ul><li>形成类似竞争对手的 SDK 产品，将开发能力转移给第三方。加速开发，降低开发成本。</li><li>封装核心逻辑 —— 物联大小循环、协议处理相关逻辑，屏蔽平台细节，保证平台安全性，降低开发难度。</li><li>业务App与SDK解耦，方便各自独立维护。SDK交给核心团队维护，保证质量。</li><li>一套业务代码，可兼容各种其他厂商的SDK（海尔 uSDK，美的 M-Smart，…）</li></ul><h3 id="核心优势"><a href="#核心优势" class="headerlink" title="核心优势"></a>核心优势</h3><ul><li>降低开发成本</li><li>加快开发速度</li><li>保证平台安全</li><li>SDK独立维护升级</li><li>兼容其他平台SDK</li></ul><h3 id="SDK-平台分布与功能划分"><a href="#SDK-平台分布与功能划分" class="headerlink" title="SDK 平台分布与功能划分"></a>SDK 平台分布与功能划分</h3><table><thead><tr><th>平台</th><th>SDK</th><th>说明</th></tr></thead><tbody><tr><td>Android/iOS</td><td>CoreSDK-Common</td><td>封装 抽象的设备数据、设备属性数据点、用户数据的模型，对上层抽象的Api与回调</td></tr><tr><td>Android/iOS</td><td>CoreSDK-Djlink</td><td>封装 Djlink Cloud 接口、Mqtt 推送、内网 Socket 通信、蓝牙通信、协议解析工具类</td></tr><tr><td>Android/iOS</td><td>CoreSDK-Haier</td><td>封装海尔uSDK（将来可拓展为美的, …）</td></tr><tr><td>Android/iOS</td><td>IOTSDK</td><td>基于CoreSDK，提供常用的物联逻辑，统一封装</td></tr><tr><td>Android/iOS</td><td>HybridSDK</td><td>给嵌入在原生 App 中的H5网页提供物联通信、物联逻辑、接口数据、操作原生系统的能力</td></tr><tr><td>Android/iOS/H5</td><td>BigDataSDK</td><td>提供大数据采集与统计的SDK</td></tr><tr><td>微信</td><td>H5 SDK</td><td>将 微信AirKiss、WebSocket、Ajax、以及一些物联逻辑 封装成 js SDK</td></tr><tr><td>硬件</td><td>WiFi SDK</td><td>对接 Djlink Cloud 协议（基于ESP8266）</td></tr></tbody></table><h3 id="SDK-与-相关协议-的整体架构图"><a href="#SDK-与-相关协议-的整体架构图" class="headerlink" title="SDK 与 相关协议 的整体架构图"></a>SDK 与 相关协议 的整体架构图</h3><img src="/2016/12/13/iot-sdk-v2-design/iot-sdk-v2-framework.svg" alt="SDK与相关协议整体架构图" title="SDK与相关协议整体架构图"><blockquote><p>其中：<br><code>B</code> 代表 <code>BlueTooth</code>，App 与 蓝牙模块 之间的 <code>蓝牙</code> 协议<br><code>D</code> 代表 <code>Device</code>，MCU 与 WiFi模块/蓝牙模块/GPRS模块 之间的 <code>串口</code> 协议<br><code>T</code> 代表 <code>Transmit</code>，云平台 与 WiFi模块/GPRS模块 之间的 <code>TCP/UDP</code> 传输层协议<br><code>L</code> 代表 <code>Local</code>，App 与 WiFi模块 之间的 <code>TCP/UDP</code> 传输层协议（局域网）<br><code>S</code> 代表 <code>Server</code>，App 与 云平台 之间的 <code>HTTP/MQTT</code> 协议</p><p>注：以上这五种协议都是双向协议，全双工</p></blockquote><h2 id="Android-SDK-2-0"><a href="#Android-SDK-2-0" class="headerlink" title="Android SDK 2.0"></a>Android SDK 2.0</h2><h3 id="设计概述"><a href="#设计概述" class="headerlink" title="设计概述"></a>设计概述</h3><h4 id="设计思想"><a href="#设计思想" class="headerlink" title="设计思想"></a>设计思想</h4><ul><li>将SDK分 <code>CoreSDK</code> 和 <code>IOTSDK</code> 的原因：<ul><li>将 涉及到物联通信协议细节的 <strong><em>CoreSDK</em></strong> 和 涉及物联上层逻辑的 <strong><em>IOTSDK</em></strong> 解耦，各自关注各自的核心逻辑</li><li><strong><em>CoreSDK</em></strong> 作为一层 <code>Wrapper</code>，可以将 其他家的SDK（比如海尔的 <code>uSDK</code>） 封装进来，对上层的 <strong><em>IOTSDK</em></strong> 提供统一的接口，这样可以做到一个App无缝切换对 底层物联系统的依赖</li><li>物联协议升级（ WiFi大小循环、蓝牙、HTTP接口、MQTT ） 或者 第三方SDK升级 （比如 uSDK），接口大体保持不变，<strong><em>IOTSDK</em></strong> 几乎可保持代码不变</li></ul></li><li><code>CoreSDK</code> 和 <code>IOTSDK</code> 之间通过 <code>CoreSDK-Common</code> 解耦：<ul><li>两者之间是俩个独立的 <code>module</code>，之间通过一层中间 module —— <strong><em>CoreSDK-Common</em></strong> 来解耦</li><li><strong><em>CoreSDK-Common</em></strong> 用来封装对上层暴露的 <strong><em>Common-Api</em></strong> 和 封装的基本数据模型 <strong><em>Common-DTO</em></strong></li><li>每个 <strong><em>CoreSDK-XXX</em></strong> 依赖 <strong><em>CoreSDK-Common</em></strong>，后者基本保持Api和数据结构的稳定。</li></ul></li><li><code>Hybrid SDK</code></li></ul><h4 id="整体架构图"><a href="#整体架构图" class="headerlink" title="整体架构图"></a>整体架构图</h4><img src="/2016/12/13/iot-sdk-v2-design/iot-android-sdk.svg" alt="Android SDK 整体架构图" title="Android SDK 整体架构图"><h3 id="CoreSDK"><a href="#CoreSDK" class="headerlink" title="CoreSDK"></a>CoreSDK</h3><h4 id="概述-1"><a href="#概述-1" class="headerlink" title="概述"></a>概述</h4><ul><li><strong>CoreSDK-Common</strong><ul><li>封装基本通信数据模型 <code>DeviceDTO</code>、 <code>UserDTO</code>、 <code>DevAttrDTO</code>、 <code>DevCmdDTO</code> 等</li><li>封装 <code>Core-Api</code> 和 <code>Core-DTO</code></li><li>提供 <code>RxJava</code>、<code>Eventbus</code> 和 <code>常规回调</code> 三种数据上报方式</li></ul></li><li><strong>CoreSDK-Djlink</strong><ul><li>协议上需要支持 <code>B</code> （蓝牙与App）<code>L</code> （WiFi与App）和 <code>S</code> （服务器与App）三个协议</li><li>三个协议需要相互解耦，可以各自根据协议版本迭代独自升级</li><li>实现 <code>CoreSDK-Common</code> 的 Api 和 Model</li><li>封装 <code>MQTT</code>信道 与 <code>Socket</code>信道 的包过滤机制</li><li>封装 配网逻辑 <code>Smartlink</code> 和 <code>SmartConfig</code></li></ul></li><li><strong>CoreSDK-Haier</strong><ul><li>封装 <code>uSDK</code> 的大小循环部分，获取设备列表</li><li>封装 <code>openAPI</code> 的部分，所有业务接口</li></ul></li></ul><h4 id="设计思路"><a href="#设计思路" class="headerlink" title="设计思路"></a>设计思路</h4><ul><li><h4 id="依赖结构"><a href="#依赖结构" class="headerlink" title="依赖结构"></a>依赖结构</h4></li></ul><img src="/2016/12/13/iot-sdk-v2-design/iot-android-core-sdk-hierarchy.svg" alt="Android CoreSDK 依赖结构" title="Android CoreSDK 依赖结构"><h4 id="概要设计"><a href="#概要设计" class="headerlink" title="概要设计"></a>概要设计</h4><h3 id="AbleSDK"><a href="#AbleSDK" class="headerlink" title="AbleSDK"></a>AbleSDK</h3><h4 id="概述-2"><a href="#概述-2" class="headerlink" title="概述"></a>概述</h4><ul><li>能力层SDK，封装一些和业务无关的数据接口</li><li>包含 接口层 + 数据解析</li></ul><h4 id="概要设计-1"><a href="#概要设计-1" class="headerlink" title="概要设计"></a>概要设计</h4><ul><li><strong>WeatherAPI</strong>：天气接口</li><li><strong>Pm25API</strong>：PM2.5接口</li><li><strong>ProvCityAPI</strong>：省市区数据</li><li><strong>FileAPI</strong>：文件存取接口</li></ul><h3 id="IOTSDK"><a href="#IOTSDK" class="headerlink" title="IOTSDK"></a>IOTSDK</h3><h4 id="概述-3"><a href="#概述-3" class="headerlink" title="概述"></a>概述</h4><h4 id="概要设计-2"><a href="#概要设计-2" class="headerlink" title="概要设计"></a>概要设计</h4><ul><li><strong>IOT-Service</strong>：将IOT服务封装成一个<code>Service</code></li><li><strong>IOT-PublicAPI</strong>：将IOT服务封装成对外的 <code>公共API</code>，并开放文档</li><li><strong>IOT-BasicLogic</strong>：将常用的物联逻辑封装，包括 <code>控制设备逻辑（超时）</code>，<code>设备状态流的分发</code>，<code>设备配网流程</code></li><li><strong>IOT-ExtLogic</strong>：扩展的物联逻辑封装，包括 <code>连续点击假值替换</code>，<code>设备状态机管理</code></li><li><strong>IOT-DebugUtils</strong>：提供联调工具，方便设备联调</li><li><strong>IOT-FakeDevice</strong>：<strong>假设备</strong> 逻辑，方便市场展示，用户试体验等场合</li></ul><h3 id="HybridSDK"><a href="#HybridSDK" class="headerlink" title="HybridSDK"></a>HybridSDK</h3><h4 id="设计思想-1"><a href="#设计思想-1" class="headerlink" title="设计思想"></a>设计思想</h4><ul><li><h4 id="架构图"><a href="#架构图" class="headerlink" title="架构图"></a>架构图</h4></li></ul><p>####</p><h2 id="iOS-SDK-2-0"><a href="#iOS-SDK-2-0" class="headerlink" title="iOS SDK 2.0"></a>iOS SDK 2.0</h2><h2 id="Hybrid-SDK-2-0"><a href="#Hybrid-SDK-2-0" class="headerlink" title="Hybrid SDK 2.0"></a>Hybrid SDK 2.0</h2><h2 id="BigData-SDK-1-0"><a href="#BigData-SDK-1-0" class="headerlink" title="BigData SDK 1.0"></a>BigData SDK 1.0</h2><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;SDK-1-x-现状&quot;&gt;&lt;a href=&quot;#SDK-1-x-现状&quot; class=&quot;headerlink&quot; title=&quot;SDK 1.x 现状&quot;&gt;&lt;/a&gt;SDK 1.x 现状&lt;/h1&gt;&lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;p&gt;目前 Djlink SDK，只是在内部使用，没有形成文档化，没有对外发布的能力。而且包括架构设计，API设计都有很多东西需要优化。下面对当下 Android、iOS、H5 等几大部分SDK做一个概述。&lt;/p&gt;&lt;h2 id=&quot;Android-SDK-1-x&quot;&gt;&lt;a href=&quot;#Android-SDK-1-x&quot; class=&quot;headerlink&quot; title=&quot;Android SDK 1.x&quot;&gt;&lt;/a&gt;Android SDK 1.x&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;采用 Android 模块化依赖管理方案 &lt;code&gt;Gradle&lt;/code&gt;，依赖于 &lt;code&gt;Maven&lt;/code&gt; 仓库&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;项目代码托管在公司自己搭建的 &lt;code&gt;Gitlab&lt;/code&gt; 服务器上（ &lt;a href=&quot;https://git.djlink.cn/djlink.dev.iot.android/IOTSDKAndroidV1&quot;&gt;链接: IOTSDKAndroidV1&lt;/a&gt; ），打完的 &lt;code&gt;.aar&lt;/code&gt; 包托管到 &lt;a href=&quot;http://maven.djlink.cn:8081/nexus/&quot;&gt;公司 Maven 服务器&lt;/a&gt; 上。&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;
    
    </summary>
    
      <category term="IOT" scheme="https://djlinkiot.github.io/categories/IOT/"/>
    
      <category term="IOT SDK" scheme="https://djlinkiot.github.io/categories/IOT/IOT-SDK/"/>
    
    
      <category term="IOT" scheme="https://djlinkiot.github.io/tags/IOT/"/>
    
      <category term="IOT SDK" scheme="https://djlinkiot.github.io/tags/IOT-SDK/"/>
    
      <category term="IOT SDK 2.0" scheme="https://djlinkiot.github.io/tags/IOT-SDK-2-0/"/>
    
  </entry>
  
  <entry>
    <title>Git 使用规范</title>
    <link href="https://djlinkiot.github.io/2016/12/07/git-rule-standard/"/>
    <id>https://djlinkiot.github.io/2016/12/07/git-rule-standard/</id>
    <published>2016-12-07T21:17:07.000Z</published>
    <updated>2016-12-22T09:16:24.478Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Git分支管理与提交规范"><a href="#Git分支管理与提交规范" class="headerlink" title="Git分支管理与提交规范"></a>Git分支管理与提交规范</h1><p>多人协作开发情况下，每个人都应该了解并理解 <strong>Git分支模型</strong></p><p>这里意见几篇质量极高的文章以供参阅，因此不再赘述。</p><p><a href="http://my.oschina.net/nyankosama/blog/270546?fromerr=0Byh13go" target="_blank" rel="external">git版本控制开发流程小结笔记（一）</a><br><a href="http://my.oschina.net/nyankosama/blog/270581" target="_blank" rel="external">git版本控制开发流程小结笔记（二）</a><br><a href="http://www.oschina.net/translate/a-successful-git-branching-model" target="_blank" rel="external">一个成功的 Git 分支模型</a></p><p>因为Git的操作指令非常灵活，所以这里只给出提交备注的建议：</p><a id="more"></a><h2 id="1-提交备注"><a href="#1-提交备注" class="headerlink" title="1. 提交备注"></a>1. 提交备注</h2><ul><li><p>如果使用类似 <code>$ git commit</code> 等语句，建议采用以下规范添加完整的提交备注</p><p>标题与内容之间保持一个空行，示例如下：</p><pre><code>Fixed #&lt;此bug在bug管理工具上的索引、路径或其他标识&gt;

内容部分添加简短描述，如改动原因，主要变动或者一些重要的建议事项。最后如果有需要可以添加对应的网址，如bug地址等。
</code></pre></li><li><p>如果使用 <code>$ git commit -m &quot;&quot;</code> 等语句，建议采用以下规范添加简短的提交备注</p><p>如果真的没有什么详细内容可以描述，使用简短的提交备注形式，是一种不错的选择，示例如下：</p><pre><code>git commit -m &apos;Fixed #[issue number]: [Short summary of the change].&apos;
</code></pre><p>下面是几个常用提交动词，以供参考：</p><ul><li>Added ( 新加入的需求 )</li><li>Removed ( 删除某段代码 )</li><li>Fixed ( 修复Bug，建议后面加上Bug索引或路径，如：Fixed #[issue number] )</li><li>Updated ( 完成的任务，或者由于第三方模块变化而做的变化）</li><li>Completed ( 完成的任务 )</li><li>Refactored ( 重构代码 )</li></ul></li></ul><h2 id="2-标题尽量不超过50个字符"><a href="#2-标题尽量不超过50个字符" class="headerlink" title="2. 标题尽量不超过50个字符"></a>2. 标题尽量不超过50个字符</h2><h2 id="3-标题的首字母大写（如果你习惯使用一个英文标题的话）"><a href="#3-标题的首字母大写（如果你习惯使用一个英文标题的话）" class="headerlink" title="3. 标题的首字母大写（如果你习惯使用一个英文标题的话）"></a>3. 标题的首字母大写（如果你习惯使用一个英文标题的话）</h2><pre><code>使用这种标题：
    Accelerate to 88 miles per hour
而不是：
    accelerate to 88 miles per hour
</code></pre><h2 id="4-标题不以“句号”作为结尾"><a href="#4-标题不以“句号”作为结尾" class="headerlink" title="4. 标题不以“句号”作为结尾"></a>4. 标题不以“句号”作为结尾</h2><pre><code>使用这种标题：
    Open the pod bay doors
而不是：
    Open the pod bay doors.
</code></pre><h2 id="5-内容描述尽量不要超过72个字符"><a href="#5-内容描述尽量不要超过72个字符" class="headerlink" title="5. 内容描述尽量不要超过72个字符"></a>5. 内容描述尽量不要超过72个字符</h2><h2 id="6-在内容中对此次提交的“Why”以及“How”来进行描述"><a href="#6-在内容中对此次提交的“Why”以及“How”来进行描述" class="headerlink" title="6. 在内容中对此次提交的“Why”以及“How”来进行描述"></a>6. 在内容中对此次提交的“Why”以及“How”来进行描述</h2><p>最后，我们一起来看一看，一个优雅的提交备注是什么样子的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">Simplify serialize.h&apos;s exception handling</div><div class="line"></div><div class="line">Remove the &apos;state&apos; and &apos;exceptmask&apos; from serialize.h&apos;s stream implementations, as well as related methods.</div><div class="line"></div><div class="line">As exceptmask always included &apos;failbit&apos;, and setstate was always called with bits = failbit, all it did was immediately raise an exception. Get rid of those variables, and replace the setstate with direct exception throwing (which also removes some dead code).</div><div class="line"></div><div class="line">As a result, good() is never reached after a failure (there are only 2 calls, one of which is in tests), and can just be replaced by !eof().</div><div class="line"></div><div class="line">fail(), clear(n) and exceptions() are just never called. Delete them.</div></pre></td></tr></table></figure><h1 id="Git-协同守则"><a href="#Git-协同守则" class="headerlink" title="Git 协同守则"></a>Git 协同守则</h1><ul><li><p>拉取 dev 分支到本地 Liveneeq 文件夹</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">mkdir Liveneeq</div><div class="line">cd Liveneeq</div><div class="line">git init</div><div class="line">git remote add -t dev -f origin git@git.thecampus.cc:onecampus/liveneeq-android.git</div><div class="line">git checkout -b dev origin/dev</div></pre></td></tr></table></figure></li><li><p>每个人建立带下划线的自己全名的分支，例如 _yangfan</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git checkout -b _yangfan</div></pre></td></tr></table></figure></li><li><p>在该分支上进行开发，定期进行 Commit（可使用 tmp 前缀来表示临时提交），确保代码在云端</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">git add .</div><div class="line">git commit -m &quot;tmp 3/18 ***&quot;</div><div class="line">git push origin _yangfan</div><div class="line"></div><div class="line">git add .</div><div class="line">git commit -m &quot;tmp 3/19 ***&quot;</div><div class="line">git push origin _yangfan</div></pre></td></tr></table></figure></li><li><p>完成阶段性功能或页面后，使用 rebase 或者 reset 重建 Commit 历史，确保所有 tmp commit 被合并删除</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">git rebase -i &lt;COMMIT_HASH&gt;</div><div class="line">...</div><div class="line">git rebase --continue</div></pre></td></tr></table></figure></li><li><p>需要提交到 dev 分支时，需要针对 dev 在个人分支上进行 Rebase 操作，并处理冲突</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">git fetch</div><div class="line">git rebase origin/dev</div><div class="line">...</div></pre></td></tr></table></figure></li><li><p>rebase 完成后 在本机进行构建和测试，测试通过后使用 -f 参数强制 Push 到远程分支</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git push -f origin _yangfan</div></pre></td></tr></table></figure></li><li><p>在 Gitlab 上提交 Merge Request(/Pull Request) 到 dev 分支，等待 Master 进行 Code Review</p></li></ul><h1 id="代码提交规范"><a href="#代码提交规范" class="headerlink" title="代码提交规范"></a>代码提交规范</h1><ul><li>工作目录要及时更新，不要和服务器有太大的差别</li><li>提交代码时，如果出现冲突，必须仔细分析解决，不可以强行提交</li><li>提交代码之前先在本地进行测试，确保项目能编译通过，且能够正常运行，不可盲目提交</li><li>必须保证服务器上的版本是正确的，项目有错误时，不要进行提交</li><li>提交之前先更新</li><li>提交时注意不要提交本地自动生成的文件，比如我们Android Studio项目中的 idea,build文件夹是不需要提交的。</li><li>不要提交自己不明白的代码</li><li>提前协调好项目组成员的工作计划，减少冲突</li><li>对提交的信息采用明晰的标注（写注释）</li><li>使用git以及github，相信stormzhang的从0开始学习 GitHub 系列会对你有很大的帮助。</li></ul><h1 id="Notice"><a href="#Notice" class="headerlink" title="Notice"></a>Notice</h1><ul><li><p>每次 Commit 要保证粒度足够细，包含的更改和描述一致，且可编译运行</p></li><li><p>提交 PR 前如果确保当前分支在 dev 分支 HEAD 处的话可以不进行 Rebase</p></li><li><p>dev 分支将处于 protected 状态，非不得已要执行 force push 的话，要提交通知所有开发成员</p></li></ul><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="https://source.android.com/source/git-resources.html" target="_blank" rel="external">Learning Git – Android</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Git分支管理与提交规范&quot;&gt;&lt;a href=&quot;#Git分支管理与提交规范&quot; class=&quot;headerlink&quot; title=&quot;Git分支管理与提交规范&quot;&gt;&lt;/a&gt;Git分支管理与提交规范&lt;/h1&gt;&lt;p&gt;多人协作开发情况下，每个人都应该了解并理解 &lt;strong&gt;Git分支模型&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;这里意见几篇质量极高的文章以供参阅，因此不再赘述。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://my.oschina.net/nyankosama/blog/270546?fromerr=0Byh13go&quot;&gt;git版本控制开发流程小结笔记（一）&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://my.oschina.net/nyankosama/blog/270581&quot;&gt;git版本控制开发流程小结笔记（二）&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.oschina.net/translate/a-successful-git-branching-model&quot;&gt;一个成功的 Git 分支模型&lt;/a&gt;&lt;/p&gt;&lt;p&gt;因为Git的操作指令非常灵活，所以这里只给出提交备注的建议：&lt;/p&gt;
    
    </summary>
    
      <category term="Workflow" scheme="https://djlinkiot.github.io/categories/Workflow/"/>
    
      <category term="Git" scheme="https://djlinkiot.github.io/categories/Workflow/Git/"/>
    
    
      <category term="Workflow" scheme="https://djlinkiot.github.io/tags/Workflow/"/>
    
      <category term="Git" scheme="https://djlinkiot.github.io/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>Android Library 上传 jCenter</title>
    <link href="https://djlinkiot.github.io/2016/12/07/android-library-jcenter-upload/"/>
    <id>https://djlinkiot.github.io/2016/12/07/android-library-jcenter-upload/</id>
    <published>2016-12-07T20:22:26.000Z</published>
    <updated>2016-12-22T09:16:24.474Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
    
    </summary>
    
      <category term="Android" scheme="https://djlinkiot.github.io/categories/Android/"/>
    
      <category term="Android Module" scheme="https://djlinkiot.github.io/categories/Android/Android-Module/"/>
    
    
      <category term="Android" scheme="https://djlinkiot.github.io/tags/Android/"/>
    
      <category term="Android Module" scheme="https://djlinkiot.github.io/tags/Android-Module/"/>
    
      <category term="JCenter" scheme="https://djlinkiot.github.io/tags/JCenter/"/>
    
      <category term="Maven" scheme="https://djlinkiot.github.io/tags/Maven/"/>
    
      <category term="JitPack" scheme="https://djlinkiot.github.io/tags/JitPack/"/>
    
  </entry>
  
  <entry>
    <title>Anrdoid 架构规范</title>
    <link href="https://djlinkiot.github.io/2016/12/06/android-rule-architecture/"/>
    <id>https://djlinkiot.github.io/2016/12/06/android-rule-architecture/</id>
    <published>2016-12-06T01:28:09.000Z</published>
    <updated>2016-12-22T09:16:24.474Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li>Android架构系列文章<ul><li><a href="http://www.jianshu.com/p/2ca7767df08c" target="_blank" rel="external">Android架构系列-基于MVP创建适合自己的架构</a></li><li><a href="http://www.jianshu.com/p/fcdded2f8444" target="_blank" rel="external">Android架构系列-如何优美的写Intent</a></li><li><a href="http://www.jianshu.com/p/c43b558c72b4" target="_blank" rel="external">Android架构系列-开发规范</a></li><li><a href="http://www.jianshu.com/p/ddbf69d1c9d1" target="_blank" rel="external">Android架构系列-封装自己的okhttp</a></li><li><a href="http://www.jianshu.com/p/33bdf6a0af23" target="_blank" rel="external">Android架构系列-MVP架构的实际应用</a></li></ul></li><li><a href="http://www.jianshu.com/notebooks/3767449/latest" target="_blank" rel="external">从零开始搭建 Android 框架系列</a><ul><li><a href="http://www.jianshu.com/p/99239b9c1630" target="_blank" rel="external">Android 开发架构规范</a></li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;h1 id=&quot;参考&quot;&gt;&lt;a href=&quot;#参考&quot; class=&quot;headerlink&quot; title=&quot;参考&quot;&gt;&lt;/a&gt;参考&lt;/h1&gt;&lt;ul&gt;&lt;li&gt;Android架构系列文章&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;http://www.jianshu
    
    </summary>
    
      <category term="Android" scheme="https://djlinkiot.github.io/categories/Android/"/>
    
      <category term="Framework Rule" scheme="https://djlinkiot.github.io/categories/Android/Framework-Rule/"/>
    
    
      <category term="Android" scheme="https://djlinkiot.github.io/tags/Android/"/>
    
      <category term="Framework Rule" scheme="https://djlinkiot.github.io/tags/Framework-Rule/"/>
    
  </entry>
  
  <entry>
    <title>物联云端 架构2.0 规划</title>
    <link href="https://djlinkiot.github.io/2016/12/06/iot-cloud-v2-design/"/>
    <id>https://djlinkiot.github.io/2016/12/06/iot-cloud-v2-design/</id>
    <published>2016-12-06T01:12:40.000Z</published>
    <updated>2016-12-22T09:16:24.478Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Cloud-1-x"><a href="#Cloud-1-x" class="headerlink" title="Cloud 1.x"></a>Cloud 1.x</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><a id="more"></a><h1 id="Cloud-2-0"><a href="#Cloud-2-0" class="headerlink" title="Cloud 2.0"></a>Cloud 2.0</h1>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Cloud-1-x&quot;&gt;&lt;a href=&quot;#Cloud-1-x&quot; class=&quot;headerlink&quot; title=&quot;Cloud 1.x&quot;&gt;&lt;/a&gt;Cloud 1.x&lt;/h1&gt;&lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;
    
    </summary>
    
      <category term="IOT" scheme="https://djlinkiot.github.io/categories/IOT/"/>
    
      <category term="IOT Cloud" scheme="https://djlinkiot.github.io/categories/IOT/IOT-Cloud/"/>
    
    
      <category term="IOT" scheme="https://djlinkiot.github.io/tags/IOT/"/>
    
      <category term="IOT Cloud" scheme="https://djlinkiot.github.io/tags/IOT-Cloud/"/>
    
      <category term="IOT Cloud 2.0" scheme="https://djlinkiot.github.io/tags/IOT-Cloud-2-0/"/>
    
  </entry>
  
  <entry>
    <title>物联App 架构2.0 规划</title>
    <link href="https://djlinkiot.github.io/2016/12/06/iot-app-v2-design/"/>
    <id>https://djlinkiot.github.io/2016/12/06/iot-app-v2-design/</id>
    <published>2016-12-06T01:12:25.000Z</published>
    <updated>2016-12-22T09:16:24.478Z</updated>
    
    <content type="html"><![CDATA[<h1 id="App-0-x"><a href="#App-0-x" class="headerlink" title="App 0.x"></a>App 0.x</h1><h1 id="App-1-x"><a href="#App-1-x" class="headerlink" title="App 1.x"></a>App 1.x</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><a id="more"></a><h1 id="App-2-0"><a href="#App-2-0" class="headerlink" title="App 2.0"></a>App 2.0</h1>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;App-0-x&quot;&gt;&lt;a href=&quot;#App-0-x&quot; class=&quot;headerlink&quot; title=&quot;App 0.x&quot;&gt;&lt;/a&gt;App 0.x&lt;/h1&gt;&lt;h1 id=&quot;App-1-x&quot;&gt;&lt;a href=&quot;#App-1-x&quot; class=&quot;headerlink&quot; title=&quot;App 1.x&quot;&gt;&lt;/a&gt;App 1.x&lt;/h1&gt;&lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;
    
    </summary>
    
      <category term="IOT" scheme="https://djlinkiot.github.io/categories/IOT/"/>
    
      <category term="IOT App" scheme="https://djlinkiot.github.io/categories/IOT/IOT-App/"/>
    
    
      <category term="IOT" scheme="https://djlinkiot.github.io/tags/IOT/"/>
    
      <category term="IOT App" scheme="https://djlinkiot.github.io/tags/IOT-App/"/>
    
      <category term="IOT App 2.0" scheme="https://djlinkiot.github.io/tags/IOT-App-2-0/"/>
    
  </entry>
  
  <entry>
    <title>Android Studio 插件、小技巧与注意事项</title>
    <link href="https://djlinkiot.github.io/2016/12/06/android-studio-plugins-tips/"/>
    <id>https://djlinkiot.github.io/2016/12/06/android-studio-plugins-tips/</id>
    <published>2016-12-06T01:10:06.000Z</published>
    <updated>2016-12-22T09:16:24.474Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
    
    </summary>
    
      <category term="Android" scheme="https://djlinkiot.github.io/categories/Android/"/>
    
      <category term="Android Studio" scheme="https://djlinkiot.github.io/categories/Android/Android-Studio/"/>
    
    
      <category term="Android" scheme="https://djlinkiot.github.io/tags/Android/"/>
    
      <category term="Android Studio" scheme="https://djlinkiot.github.io/tags/Android-Studio/"/>
    
      <category term="Android Studio Plugin" scheme="https://djlinkiot.github.io/tags/Android-Studio-Plugin/"/>
    
      <category term="Android Studio Tips" scheme="https://djlinkiot.github.io/tags/Android-Studio-Tips/"/>
    
  </entry>
  
  <entry>
    <title>Anrdoid 编码规范</title>
    <link href="https://djlinkiot.github.io/2016/12/05/android-rule-coding-style/"/>
    <id>https://djlinkiot.github.io/2016/12/05/android-rule-coding-style/</id>
    <published>2016-12-05T09:58:47.000Z</published>
    <updated>2016-12-22T09:16:24.474Z</updated>
    
    <content type="html"><![CDATA[<h1 id="命名规范"><a href="#命名规范" class="headerlink" title="命名规范"></a>命名规范</h1><h2 id="通用规则"><a href="#通用规则" class="headerlink" title="通用规则"></a>通用规则</h2><ul><li>命名原则：尽可能的用最少的字符而又能完整的表达标识符的含义。</li><li>英文缩写原则：<ol><li>较短的单词可通过去掉 <strong>”元音”</strong> 形成缩写</li><li>较长的单词可取单词的 <strong>头几个字母</strong> 形成缩写</li><li>此外还有一些 <strong>约定俗成</strong> 的英文单词缩写</li></ol></li><li>一些常见的英文单词缩写：</li></ul><a id="more"></a><table><thead><tr><th>名称</th><th>缩写</th><th>说明</th></tr></thead><tbody><tr><td>icon</td><td>ic</td><td>app的图标、界面中小图标</td></tr><tr><td>color</td><td>cl</td><td>颜色值</td></tr><tr><td>divider</td><td>di</td><td>分隔线，包括 Listview 中的 divider，普通布局中的线</td></tr><tr><td>selector</td><td>sl</td><td>view多种状态，包括 Listview 中的 selector，按钮的 selector</td></tr><tr><td>background</td><td>bg</td><td>背景、布局的背景</td></tr><tr><td>buffer</td><td>buf</td><td>IO缓冲区，临时缓存区</td></tr><tr><td>error</td><td>err</td><td>表示错误</td></tr><tr><td>delete</td><td>del</td><td>删除</td></tr><tr><td>control</td><td>ctrl</td><td>控制、控制器</td></tr><tr><td>escape</td><td>esc</td><td>转义、离开</td></tr><tr><td>document</td><td>doc</td><td>文档相关</td></tr><tr><td>infomation</td><td>info</td><td>代表信息、内容</td></tr><tr><td>message</td><td>msg</td><td>代表消息、通信、交互</td></tr><tr><td>image</td><td>img</td><td>代表图像</td></tr><tr><td>string</td><td>str</td><td>代表字符串</td></tr><tr><td>Internationalization</td><td>I18N</td><td>国际化</td></tr><tr><td>initial</td><td>init</td><td>用于初始化</td></tr><tr><td>increment</td><td>inc</td><td>数值的增加</td></tr><tr><td>length</td><td>len</td><td>长度</td></tr><tr><td>average</td><td>avg</td><td>平均值</td></tr><tr><td>position</td><td>pos</td><td>位置、遍历的指针</td></tr><tr><td>temp</td><td>tmp</td><td>临时、临时变量</td></tr><tr><td>password</td><td>pwd</td><td>密码</td></tr><tr><td>library</td><td>lib</td><td>库、代码库、第三方库</td></tr><tr><td>server</td><td>srv</td><td>服务器相关</td></tr><tr><td>window</td><td>wnd(win)</td><td>界面窗口</td></tr></tbody></table><h2 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h2><p>主要参考 <a href="/2016/12/05/java-rule-coding-style/" title="Java 编码规范">Java 编码规范</a>，下面是基于 <code>Android</code> 平台的一些补充。</p><h3 id="包名"><a href="#包名" class="headerlink" title="包名"></a>包名</h3><p>采用反域名命名规则，全部使用小写字母。一级包名为 <code>com</code> ，二级包名为 <code>组织</code>（可以是公司或个人），三级包名根据 <code>应用</code> 进行命名，四级包名为 <code>模块名</code> 或 <code>层级名</code><br>，后面的都是细分的 <code>次级模块名</code></p><table><thead><tr><th>包名</th><th>此包中包含</th></tr></thead><tbody><tr><td>com.xx.yy.ui</td><td>页面相关包</td></tr><tr><td>com.xx.yy.ui.activity</td><td>页面用到的Activity类</td></tr><tr><td>com.xx.yy.ui.base</td><td>页面中的基础共享类 ( <code>BaseActivity</code>、<code>BaseFragment</code>、<code>BaseAdapter</code>等 )</td></tr><tr><td>com.xx.yy.ui.adapter</td><td>页面用到的 <code>Adapter类</code> (适配器的类)</td></tr><tr><td>com.xx.yy.ui.view</td><td>自定义View类</td></tr><tr><td>com.xx.yy.utils</td><td>公共工具方法类</td></tr><tr><td>com.xx.yy.model</td><td><code>model</code> 数据模型相关包</td></tr><tr><td>com.xx.yy.model.bean</td><td><code>bean</code> 实体类</td></tr><tr><td>com.xx.yy.model.db</td><td>数据库操作类</td></tr><tr><td>com.xx.yy.app</td><td>Android组件，包括 <code>Application</code></td></tr><tr><td>com.xx.yy.app.service</td><td><code>Service</code> 服务</td></tr><tr><td>com.xx.yy.app.receiver</td><td><code>Receiver</code> 广播接收类</td></tr></tbody></table><h3 id="类名"><a href="#类名" class="headerlink" title="类名"></a>类名</h3><table><thead><tr><th>类</th><th>描述</th><th>例如</th></tr></thead><tbody><tr><td>Activity类</td><td><code>Activity</code> 为后缀</td><td>欢迎页面类 WelcomeActivity</td></tr><tr><td>Fragment类</td><td><code>Fragment</code> 为后缀</td><td>标签页面类 TabFragment</td></tr><tr><td>Adapter类</td><td><code>Adapter</code> 为后缀</td><td>新闻详情适配器 NewDetailAdapter</td></tr><tr><td>公共方法类</td><td><code>Utils</code> 或 <code>Manager</code> 为后缀</td><td>线程池管理类：ThreadPoolManager、日志工具类：LogUtils</td></tr><tr><td>数据库类</td><td><code>DBHelper</code> 为后缀</td><td>新闻数据库 NewDBHelper</td></tr><tr><td>Service类</td><td><code>Service</code> 为后缀</td><td>时间服务 TimeService</td></tr><tr><td>Receiver类</td><td><code>Receiver</code> 为后缀</td><td>时间通知 TimeReceiver</td></tr><tr><td>ContentProvider</td><td><code>Provider</code> 为后缀</td><td>AccountProvider</td></tr><tr><td>共享基础类</td><td><code>Base</code> 为前缀</td><td>BaseActivity, BaseFragment</td></tr></tbody></table><h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>initXX()</td><td>初始化相关方法,使用 <code>init</code> 为前缀标识，如初始化布局initView()</td></tr><tr><td>isXX() checkXX() hasXX()</td><td>方法返回值为 <code>boolean</code> 型的请使用 <code>is</code>、 <code>check</code> 或 <code>has</code> 为前缀标识</td></tr><tr><td>getXX()</td><td>返回某个值的方法，使用 <code>get</code> 为前缀标识</td></tr><tr><td>processXX()</td><td>对数据进行处理的方法，尽量使用 <code>process</code> 为前缀标识</td></tr><tr><td>loadXX()</td><td>通过异步加载数据的方法，尽量使用 <code>load</code> 为前缀标识</td></tr><tr><td>displayXX()</td><td>弹出提示框和提示信息，使用 <code>display</code> 为前缀标识</td></tr><tr><td>saveXX()</td><td>与保存数据相关的，使用 <code>save</code> 为前缀标识</td></tr><tr><td>resetXX()</td><td>对数据重组的，使用 <code>reset</code> 为前缀标识</td></tr><tr><td>clearXX() removeXXX()</td><td>清除数据相关的，使用 <code>clear</code> 或 <code>remove</code> 为前缀标识</td></tr><tr><td>drawXXX()</td><td>绘制数据或效果相关的，使用 <code>draw</code> 为前缀标识</td></tr><tr><td>doXX()</td><td>一些细分内部的方法，使用 <code>do</code> 为前缀标识</td></tr></tbody></table><h3 id="局部变量"><a href="#局部变量" class="headerlink" title="局部变量"></a>局部变量</h3><p>用统一的量词通过在结尾处放置一个量词，就可创建更加统一的变量，它们更容易理解，也更容易搜索。例如，请使用 <code>strCustomerFirst</code> 和 <code>strCustomerLast</code>，而不要使用 <code>strFirstCustomer</code> 和 <code>strLastCustomer</code>。</p><table><thead><tr><th>量词列表</th><th>量词后缀说明</th></tr></thead><tbody><tr><td>First</td><td>一组变量中的第一个</td></tr><tr><td>Last</td><td>一组变量中的最后一个</td></tr><tr><td>Next</td><td>一组变量中的下一个变量</td></tr><tr><td>Prev</td><td>一组变量中的上一个</td></tr><tr><td>Cur</td><td>一组变量中的当前变量</td></tr></tbody></table><h3 id="字符串常量"><a href="#字符串常量" class="headerlink" title="字符串常量"></a>字符串常量</h3><p>Android SDK中诸如 <code>SharedPreferences</code>，<code>Bundle</code> 和 <code>Intent</code> 等，都采用<strong>key-value</strong> 的方式进行赋值，当使用这些组件的时候，<strong>key</strong> 必须被 <code>static final</code> 所修饰，并且命名应该符合以下规范：</p><table><thead><tr><th>Element</th><th>Field Name Prefix</th></tr></thead><tbody><tr><td>SharedPreferences</td><td><code>PREF_</code></td></tr><tr><td>Bundle</td><td><code>BUNDLE_</code></td></tr><tr><td>Fragment Arguments</td><td><code>ARGUMENT_</code></td></tr><tr><td>Intent Extra</td><td><code>EXTRA_</code></td></tr><tr><td>Intent Action</td><td><code>ACTION_</code></td></tr></tbody></table><p>需要注意的是，当调用Fragment的 <code>getArguments()</code> 方法时，返回值同样是一个 <code>Bundle</code>，因为这也是一个常用函数，因此我们需要定义一个不同的前缀，示例如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">static</span> <span class="keyword">final</span> String PREF_EMAIL = <span class="string">"PREF_EMAIL"</span>;</div><div class="line"><span class="keyword">static</span> <span class="keyword">final</span> String BUNDLE_AGE = <span class="string">"BUNDLE_AGE"</span>;</div><div class="line"><span class="keyword">static</span> <span class="keyword">final</span> String ARGUMENT_USER_ID = <span class="string">"ARGUMENT_USER_ID"</span>;</div><div class="line"></div><div class="line"><span class="keyword">static</span> <span class="keyword">final</span> String EXTRA_SURNAME = <span class="string">"com.myapp.extras.EXTRA_SURNAME"</span>;</div><div class="line"><span class="keyword">static</span> <span class="keyword">final</span> String ACTION_OPEN_USER = <span class="string">"com.myapp.action.ACTION_OPEN_USER"</span>;</div></pre></td></tr></table></figure><h2 id="JNI"><a href="#JNI" class="headerlink" title="JNI"></a>JNI</h2><p>待续</p><h2 id="Resource-资源"><a href="#Resource-资源" class="headerlink" title="Resource 资源"></a>Resource 资源</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><ul><li><p>Android 系统资源结构如下：(参考 <a href="https://developer.android.google.cn/guide/topics/resources/providing-resources.html?hl=zh-cn" target="_blank" rel="external">Google官方介绍</a> )</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">res/</div><div class="line">├─ anim/      -&gt; 定义 渐变动画的 XML 文件（属性动画也可以保存在此目录中，但是为了区分这两种类型，属性动画首选 animator/ 目录）</div><div class="line">├─ animator/  -&gt; 定义 属性动画的 XML 文件</div><div class="line">├─ color/     -&gt; 用于定义 颜色状态列表的 XML 文件</div><div class="line">├─ drawable/  -&gt; 用于定义 位图文件(.png、.9.png、.jpg、.gif) 或 可编译为图像资源的 XML 文件</div><div class="line">├─ layout/    -&gt; 用于定义 界面布局的 XML 文件</div><div class="line">├─ menu/      -&gt; 用于定义 应用菜单（如选项菜单、上下文菜单或子菜单）的 XML 文件</div><div class="line">├─ mipmap/    -&gt; 适用于不同启动器图标密度的可绘制对象文件</div><div class="line">├─ raw/       -&gt; 要以 原始形式保存的任意文件</div><div class="line">├─ values/    -&gt; 包含字符串、整型数和颜色等简单值的 XML 文件</div><div class="line">└─ xml/       -&gt; 各种 XML 配置文件都必须保存在此处</div></pre></td></tr></table></figure><p><code>res/</code> 下的文件夹为 <strong>官方定义</strong> 的资源文件夹，名字不能随意更改</p></li><li><p><code>anim/</code> 下 XML资源 的结构：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">ROOT</div><div class="line">├─ <span class="tag">&lt;<span class="name">alpha</span>&gt;</span></div><div class="line">├─ <span class="tag">&lt;<span class="name">rotate</span>&gt;</span></div><div class="line">├─ <span class="tag">&lt;<span class="name">scale</span>&gt;</span></div><div class="line">├─ <span class="tag">&lt;<span class="name">translate</span>&gt;</span></div><div class="line">├─ <span class="tag">&lt;<span class="name">*Interpolator</span>&gt;</span></div><div class="line">├─ <span class="tag">&lt;<span class="name">*Animation</span>&gt;</span></div><div class="line">└─ <span class="tag">&lt;<span class="name">set</span>&gt;</span></div><div class="line">    ├─ <span class="tag">&lt;<span class="name">alpha</span>&gt;</span></div><div class="line">    ├─ <span class="tag">&lt;<span class="name">rotate</span>&gt;</span></div><div class="line">    ├─ <span class="tag">&lt;<span class="name">scale</span>&gt;</span></div><div class="line">    ├─ <span class="tag">&lt;<span class="name">translate</span>&gt;</span></div><div class="line">    └─ <span class="tag">&lt;<span class="name">set</span>&gt;</span></div></pre></td></tr></table></figure></li><li><p><code>animator/</code> 下 XML资源 的结构：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">ROOT</div><div class="line">├─ <span class="tag">&lt;<span class="name">animator</span>&gt;</span></div><div class="line">│   └─ <span class="tag">&lt;<span class="name">propertyValuesHolder</span>&gt;</span></div><div class="line">├─ <span class="tag">&lt;<span class="name">objectAnimator</span>&gt;</span></div><div class="line">│   └─ <span class="tag">&lt;<span class="name">propertyValuesHolder</span>&gt;</span></div><div class="line">├─ <span class="tag">&lt;<span class="name">selector</span>&gt;</span></div><div class="line">│   └─ <span class="tag">&lt;<span class="name">item</span> <span class="attr">android:animation</span>=<span class="string">""</span> <span class="attr">android:state_xxx</span>=<span class="string">"true/false"</span> /&gt;</span></div><div class="line">└─ <span class="tag">&lt;<span class="name">set</span>&gt;</span></div><div class="line">    ├─ <span class="tag">&lt;<span class="name">animator</span>&gt;</span></div><div class="line">    ├─ <span class="tag">&lt;<span class="name">objectAnimator</span>&gt;</span></div><div class="line">    ├─ <span class="tag">&lt;<span class="name">propertyValuesHolder</span>&gt;</span></div><div class="line">    └─ <span class="tag">&lt;<span class="name">set</span>&gt;</span></div></pre></td></tr></table></figure></li><li><p><code>color/</code> 下 XML资源 的结构：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">ROOT</div><div class="line">└─ <span class="tag">&lt;<span class="name">selector</span>&gt;</span></div><div class="line">    └─ <span class="tag">&lt;<span class="name">item</span> <span class="attr">android:color</span>=<span class="string">""</span> <span class="attr">android:state_xxx</span>=<span class="string">"true/false"</span> /&gt;</span></div></pre></td></tr></table></figure></li><li><p><code>drawable/</code> 下 XML资源 的结构：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">ROOT</div><div class="line">├─ <span class="tag">&lt;<span class="name">animated-rotate</span>&gt;</span></div><div class="line">│   └─ ROOT</div><div class="line">├─ <span class="tag">&lt;<span class="name">animated-selector</span>&gt;</span></div><div class="line">│   ├─ <span class="tag">&lt;<span class="name">transition</span>&gt;</span></div><div class="line">│   │   └─ <span class="tag">&lt;<span class="name">animation-list</span>&gt;</span></div><div class="line">│   └─ <span class="tag">&lt;<span class="name">item</span> <span class="attr">android:drawable</span>=<span class="string">""</span> <span class="attr">android:state_xxx</span>=<span class="string">"true/false"</span> /&gt;</span></div><div class="line">├─ <span class="tag">&lt;<span class="name">animated-vector</span>&gt;</span></div><div class="line">│   └─ <span class="tag">&lt;<span class="name">target</span> /&gt;</span></div><div class="line">├─ <span class="tag">&lt;<span class="name">animation-list</span>&gt;</span></div><div class="line">│   └─ <span class="tag">&lt;<span class="name">item</span> <span class="attr">android:drawable</span>=<span class="string">""</span> <span class="attr">android:duration</span>=<span class="string">""</span> /&gt;</span></div><div class="line">├─ <span class="tag">&lt;<span class="name">bitmap</span>&gt;</span> <span class="tag">&lt;<span class="name">color</span>&gt;</span> <span class="tag">&lt;<span class="name">nine-patch</span>&gt;</span></div><div class="line">├─ <span class="tag">&lt;<span class="name">clip</span>&gt;</span> <span class="tag">&lt;<span class="name">inset</span>&gt;</span> <span class="tag">&lt;<span class="name">rotate</span>&gt;</span> <span class="tag">&lt;<span class="name">scale</span>&gt;</span></div><div class="line">│   └─ ROOT</div><div class="line">├─ <span class="tag">&lt;<span class="name">layer-list</span>&gt;</span> <span class="tag">&lt;<span class="name">ripple</span>&gt;</span> <span class="tag">&lt;<span class="name">transition</span>&gt;</span></div><div class="line">│   └─ <span class="tag">&lt;<span class="name">item</span> <span class="attr">android:drawable</span>=<span class="string">""</span> [<span class="attr">width</span>/<span class="attr">height</span>][<span class="attr">direction</span>][<span class="attr">gravity</span>] /&gt;</span></div><div class="line">├─ <span class="tag">&lt;<span class="name">level-list</span>&gt;</span></div><div class="line">│   └─ <span class="tag">&lt;<span class="name">item</span> <span class="attr">android:drawable</span>=<span class="string">""</span> <span class="attr">android:maxLevel</span>=<span class="string">""</span> <span class="attr">android:minLevel</span>=<span class="string">""</span>/&gt;</span></div><div class="line">├─ <span class="tag">&lt;<span class="name">selector</span>&gt;</span></div><div class="line">│   └─ <span class="tag">&lt;<span class="name">item</span> <span class="attr">android:drawable</span>=<span class="string">""</span> <span class="attr">android:state_xxx</span>=<span class="string">"true/false"</span> /&gt;</span></div><div class="line">├─ <span class="tag">&lt;<span class="name">shape</span>&gt;</span></div><div class="line">│   ├─ <span class="tag">&lt;<span class="name">corners</span> /&gt;</span></div><div class="line">│   ├─ <span class="tag">&lt;<span class="name">gradient</span> /&gt;</span></div><div class="line">│   ├─ <span class="tag">&lt;<span class="name">padding</span> /&gt;</span></div><div class="line">│   ├─ <span class="tag">&lt;<span class="name">size</span> /&gt;</span></div><div class="line">│   ├─ <span class="tag">&lt;<span class="name">solid</span> /&gt;</span></div><div class="line">│   └─ <span class="tag">&lt;<span class="name">stroke</span> /&gt;</span></div><div class="line">└─ <span class="tag">&lt;<span class="name">vector</span>&gt;</span></div><div class="line">    ├─ <span class="tag">&lt;<span class="name">clip-path</span> /&gt;</span></div><div class="line">    ├─ <span class="tag">&lt;<span class="name">path</span> /&gt;</span></div><div class="line">    └─ <span class="tag">&lt;<span class="name">group</span>&gt;</span></div><div class="line">        ├─ <span class="tag">&lt;<span class="name">clip-path</span> /&gt;</span></div><div class="line">        ├─ <span class="tag">&lt;<span class="name">path</span> /&gt;</span></div><div class="line">        └─ <span class="tag">&lt;<span class="name">group</span>&gt;</span></div></pre></td></tr></table></figure></li><li><p><code>menu/</code> 下 XML资源 的结构：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">ROOT</div><div class="line">└─ <span class="tag">&lt;<span class="name">menu</span>&gt;</span></div><div class="line">    ├─ <span class="tag">&lt;<span class="name">group</span>&gt;</span>       -&gt; menu组</div><div class="line">    │   └─ <span class="tag">&lt;<span class="name">item</span> /&gt;</span></div><div class="line">    └─ <span class="tag">&lt;<span class="name">item</span> /&gt;</span>      -&gt; menu项</div></pre></td></tr></table></figure></li><li><p><code>values/</code> 下 XML资源 的结构：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">ROOT</div><div class="line">└─ <span class="tag">&lt;<span class="name">resources</span>&gt;</span></div><div class="line">    ├─ <span class="tag">&lt;<span class="name">array</span>&gt;</span>              -&gt; 任意类型的数组（TypedArray）</div><div class="line">    ├─ <span class="tag">&lt;<span class="name">boolean</span>&gt;</span>            -&gt; 布尔值</div><div class="line">    ├─ <span class="tag">&lt;<span class="name">color</span>&gt;</span>              -&gt; 十六进制颜色值</div><div class="line">    ├─ <span class="tag">&lt;<span class="name">declare-styleable</span>&gt;</span>  -&gt; 声明自定义属性</div><div class="line">    ├─ <span class="tag">&lt;<span class="name">dimension</span>&gt;</span>          -&gt; 尺寸值</div><div class="line">    ├─ <span class="tag">&lt;<span class="name">fraction</span>&gt;</span>           -&gt; 相对比例值</div><div class="line">    ├─ <span class="tag">&lt;<span class="name">item</span> <span class="attr">type</span>=<span class="string">"id"</span>/&gt;</span>    -&gt; 预定义ID</div><div class="line">    ├─ <span class="tag">&lt;<span class="name">integer</span>&gt;</span>            -&gt; 整数值</div><div class="line">    ├─ <span class="tag">&lt;<span class="name">integer-array</span>&gt;</span>      -&gt; 整数数组</div><div class="line">    ├─ <span class="tag">&lt;<span class="name">plurals</span>&gt;</span>            -&gt; 复数字符串</div><div class="line">    ├─ <span class="tag">&lt;<span class="name">string</span>&gt;</span>             -&gt; 字符串</div><div class="line">    ├─ <span class="tag">&lt;<span class="name">string-array</span>&gt;</span>       -&gt; 字符数组</div><div class="line">    └─ <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined">              -&gt; 样式</span></div></pre></td></tr></table></figure></li><li><p>命名规则：<br>资源文件、元素应该采用 <strong>小写字母_下划线</strong>（匈牙利命名法）的组合形式命名。</p></li><li>命名空间隔离：<ul><li>资源文件、元素应该使用 <strong>范围</strong> 作为前缀，范围一般采用 <strong>模块_界面</strong></li><li>如果所开发的为 <strong>通用组件</strong>，为避免冲突，将资源目录下的文件名增加前缀，进行命名空间的隔离</li></ul></li></ul><h3 id="资源文件"><a href="#资源文件" class="headerlink" title="资源文件"></a>资源文件</h3><h4 id="Anim-Animator-动画文件"><a href="#Anim-Animator-动画文件" class="headerlink" title="Anim/Animator 动画文件"></a>Anim/Animator 动画文件</h4><ul><li>文件名：<code>动画类型_动画方向.xml</code></li></ul><table><thead><tr><th>State</th><th>Suffix</th></tr></thead><tbody><tr><td>fade_in</td><td>淡入</td></tr><tr><td>fade_out</td><td>淡出</td></tr><tr><td>push_down_in</td><td>从下方推入</td></tr><tr><td>push_down_out</td><td>从下方推出</td></tr><tr><td>push_left</td><td>推向左方</td></tr><tr><td>slide_in_from_top</td><td>从头部滑动进入</td></tr><tr><td>zoom_enter</td><td>变形进入</td></tr><tr><td>slide_in</td><td>滑动进入</td></tr><tr><td>shrink_to_middle</td><td>中间缩小</td></tr></tbody></table><ul><li>每个项目最好导入一些常用的 <code>预定义动画</code></li><li>如果要自己 <strong>定制的复杂</strong> 动画，推荐命名采用 <code>范围_动画类型</code>。<br>例如：<code>refresh_progress.xml</code>、<code>market_cart_add.xml</code>、<code>market_cart_remove.xml</code></li></ul><h4 id="Drawable-图片文件"><a href="#Drawable-图片文件" class="headerlink" title="Drawable 图片文件"></a>Drawable 图片文件</h4><ul><li>文件名：<code>[模块_]图片类型_范围_状态.[png/9.png/jpg/gif/xml]</code></li><li>图片类型：</li></ul><table><thead><tr><th>Image Type</th><th>类型</th><th>Prefix</th><th>Example</th></tr></thead><tbody><tr><td>Background</td><td>背景</td><td><code>bg_</code></td><td>bg_splash.png</td></tr><tr><td>Button</td><td>按钮</td><td><code>btn_</code></td><td>btn_send_pressed.png</td></tr><tr><td>Divider</td><td>分隔</td><td><code>div_</code></td><td>div_horizontal.png</td></tr><tr><td>Icon</td><td>图标</td><td><code>ic_</code></td><td>ic_star.png</td></tr><tr><td>Default</td><td>默认</td><td><code>def_</code></td><td>def_search_cell.png</td></tr></tbody></table><ul><li>常规 <code>icon</code>（图标）文件命名方式：</li></ul><table><thead><tr><th>Icon Type</th><th>Prefix</th><th>Example</th></tr></thead><tbody><tr><td>Icons</td><td><code>ic_</code></td><td>ic_star.png</td></tr><tr><td>Launcher icons</td><td><code>ic_launcher</code></td><td>ic_launcher_calendar.png</td></tr><tr><td>Menu icons &amp; Action Bar icons</td><td><code>ic_menu</code></td><td>ic_menu_archive.png</td></tr><tr><td>Tool bar icons</td><td><code>ic_tool_bar</code></td><td>ic_tool_bar_back.png</td></tr><tr><td>Status bar icons</td><td><code>ic_stat_bar</code></td><td>ic_stat_bar_msg.png</td></tr><tr><td>Tab icons</td><td><code>ic_tab</code></td><td>ic_tab_recent.png</td></tr><tr><td>Dialog icons</td><td><code>ic_dlg</code></td><td>ic_dlg_info.png</td></tr><tr><td>Notification icons</td><td><code>ic_notif</code></td><td>ic_notif_clock.png</td></tr></tbody></table><ul><li>状态（后缀）：</li></ul><table><thead><tr><th>State</th><th>状态</th><th>Suffix</th><th>Example</th></tr></thead><tbody><tr><td>Normal</td><td>默认</td><td><code>_normal</code></td><td>btn_order_normal.png</td></tr><tr><td>Pressed</td><td>按下</td><td><code>_pressed</code></td><td>btn_order_pressed.png</td></tr><tr><td>Focused</td><td>焦点</td><td><code>_focused</code></td><td>btn_order_focused.png</td></tr><tr><td>Disabled</td><td>不可用</td><td><code>_disabled</code></td><td>btn_order_disabled.png</td></tr><tr><td>Selected</td><td>选中</td><td><code>_selected</code></td><td>btn_order_selected.png</td></tr><tr><td>Selector</td><td>多种状态组合</td><td><code>_selector</code></td><td>btn_order_selector.png</td></tr></tbody></table><ul><li>需要注意的是，Selector 的一些状态是可以叠加的，所以可以产生 <code>btn_order_disabled_focused.9.png</code> 这类命名。</li><li>永远使用 <a href="https://github.com/inmite/android-selector-chapek" target="_blank" rel="external">android-selector-chapek</a> 这个插件来生成相应的 Selector Drawable XML 文件，而不应该手工创建。</li></ul><h4 id="Color-颜色文件"><a href="#Color-颜色文件" class="headerlink" title="Color 颜色文件"></a>Color 颜色文件</h4><ul><li>文件名：<code>[模块_]颜色类型_范围_状态.xml</code></li><li>颜色类型：<ul><li>背景颜色，添加 <code>bg</code> 前缀</li><li>文本颜色，添加 <code>txt</code> 前缀</li><li>分割线颜色，添加 <code>div</code> 前缀</li></ul></li><li>状态（后缀）：同 <code>drawable</code> 状态后缀</li></ul><h4 id="Layout-布局文件"><a href="#Layout-布局文件" class="headerlink" title="Layout 布局文件"></a>Layout 布局文件</h4><ul><li>文件名：<code>[模块_]布局类型_范围_功能.xml</code></li><li>布局类型：</li></ul><table><thead><tr><th>Layout Type</th><th>类型</th><th>Prefix</th><th>Example</th></tr></thead><tbody><tr><td>Activity</td><td>UI 基础类 Activity</td><td><code>act_</code></td><td>act_main_list.xml</td></tr><tr><td>Fragment</td><td>UI 基础类 Fragment</td><td><code>frg_</code></td><td>frg_main_detail.xml</td></tr><tr><td>Dialog</td><td>对话框 Dialog</td><td><code>dlg_</code></td><td>dlg_login_loading.xml</td></tr><tr><td>PopupWindow</td><td>弹窗 PopupWindow</td><td><code>ppw_</code></td><td>ppw_user_info.xml</td></tr><tr><td>Item</td><td>List/Grid/RecyclerView 列表项</td><td><code>item_</code></td><td>item_shop_product.xml</td></tr><tr><td>Include</td><td>layout 包含项</td><td><code>inc_</code></td><td>inc_search_head.xml</td></tr><tr><td>Header/Footer</td><td>ListView的头尾布局</td><td><code>header_</code> <code>footer_</code></td><td>header_list_products.xml</td></tr></tbody></table><h4 id="Style、Theme-文件"><a href="#Style、Theme-文件" class="headerlink" title="Style、Theme 文件"></a>Style、Theme 文件</h4><ul><li><p>应该谨慎使用<code>style</code>与<code>theme</code>，避免重复冗余的文件出现。可以有多个<code>styles.xml</code> 文件，如：<code>styles.xml</code>，<code>style_home.xml</code>，<code>style_item_details.xml</code>，<code>styles_forms.xml</code>等。</p></li><li><p><strong><code>res/values</code> 目录下的文件可以任意命名，但前提是该文件能够明确表达职责所属，因为起作用的并不是文件本身，而是内部的标签属性。</strong></p></li></ul><h4 id="Attr-文件"><a href="#Attr-文件" class="headerlink" title="Attr 文件"></a>Attr 文件</h4><ul><li>自定义属性</li></ul><h3 id="资源元素"><a href="#资源元素" class="headerlink" title="资源元素"></a>资源元素</h3><h4 id="id-布局中ID"><a href="#id-布局中ID" class="headerlink" title="id 布局中ID"></a>id 布局中ID</h4><ul><li>原生控件</li></ul><p>布局 ViewGroup</p><table><thead><tr><th>布局</th><th>缩写</th><th>含义</th></tr></thead><tbody><tr><td>ViewGroup</td><td>vg</td><td>抽象ViewGroup</td></tr><tr><td>FrameLayout</td><td>fl</td><td>帧布局</td></tr><tr><td>TLayout</td><td>fl</td><td>帧布局</td></tr><tr><td>LinearLayout</td><td>ll</td><td>线性布局</td></tr><tr><td>RelativeLayout</td><td>rl</td><td>相对布局</td></tr></tbody></table><p>控件 View</p><table><thead><tr><th>控件</th><th>缩写</th><th>含义</th><th>控件</th><th>缩写</th><th>含义</th></tr></thead><tbody><tr><td>TextView</td><td>tv</td><td>文本</td><td>SurfaceView</td><td>surface</td><td>异步视图</td></tr><tr><td>Button</td><td>btn</td><td>按钮</td><td>VideoView</td><td>video</td><td>视频视图</td></tr><tr><td>ImageButton</td><td>ib</td><td>图片按钮</td><td>WebView</td><td>web</td><td>网页视图</td></tr><tr><td>ImageView</td><td>iv</td><td>图片</td><td>SearchView</td><td>search</td><td>搜索框</td></tr><tr><td>EditText</td><td>edt</td><td>编辑框</td><td>DatePicker</td><td>datepk</td><td>日期选择器</td></tr><tr><td>CheckBox</td><td>cb</td><td>复选</td><td>TimePicker</td><td>timepk</td><td>时间选择器</td></tr><tr><td>RadioGroup</td><td>rg</td><td>单选按钮组</td><td>DigtalClock</td><td>dcl</td><td>数字时钟</td></tr><tr><td>RadioButton</td><td>rb</td><td>单选按钮</td><td>AnalogClock</td><td>acl</td><td>模拟时钟</td></tr><tr><td>ScrollView</td><td>sv</td><td>滚动页</td><td>CalendarView</td><td>cld</td><td>日历</td></tr><tr><td>ListView</td><td>lv</td><td>列表页</td><td>Chronometer</td><td>cmt</td><td>秒表</td></tr><tr><td>GridView</td><td>gv</td><td>网格页</td><td>MediaController</td><td>mdCtrl</td><td>多媒体控制</td></tr><tr><td>ExpandableListView</td><td>elv</td><td>可扩展列表页</td><td>ZoomControls</td><td>zmCtrl</td><td>放大缩小框</td></tr><tr><td>ToggleButton</td><td>tgb</td><td>切换按钮</td><td>TextSwitch</td><td>txtSwt</td><td>文字切换器</td></tr><tr><td>SeekBar</td><td>seek</td><td>双向进度条</td><td>ImageSwitch</td><td>imgSwt</td><td>图片切换器</td></tr><tr><td>ProgressBar</td><td>pgb</td><td>进度条</td><td>RatingBar</td><td>ratb</td><td>评分条</td></tr><tr><td>TableRow</td><td>tr</td><td>标签列</td><td>MapView</td><td>map</td><td>地图视图</td></tr><tr><td>TabHost</td><td>tab</td><td>标签页</td><td>SlidingDrawer</td><td>滑动抽屉</td></tr><tr><td>Spinner</td><td>spn</td><td>下拉框</td></tr></tbody></table><ul><li>官方补充控件</li></ul><p>布局 ViewGroup</p><table><thead><tr><th>控件</th><th>缩写</th><th>包</th><th>含义</th></tr></thead><tbody><tr><td>GridLayout</td><td>gl</td><td>support-v7</td><td>网格布局</td></tr><tr><td>TabLayout</td><td>tl</td><td>support-v7</td><td>Tab布局</td></tr><tr><td>ConstraintLayout</td><td>cl</td><td>constraint</td><td>约束布局</td></tr><tr><td>PercentFrameLayout</td><td>pfl</td><td>percent</td><td>比例帧布局</td></tr><tr><td>PercentRelativeLayout</td><td>prl</td><td>percent</td><td>比例相对布局</td></tr></tbody></table><p>组件 View</p><table><thead><tr><th>控件</th><th>缩写</th><th>包</th><th>含义</th></tr></thead><tbody><tr><td>ViewPager</td><td>vp</td><td>support-v4</td><td>左右滑动页</td></tr><tr><td>RecyclerView</td><td>rv</td><td>support-v7</td><td>可复用的列表页</td></tr></tbody></table><h4 id="color-色值"><a href="#color-色值" class="headerlink" title="color 色值"></a>color 色值</h4><p><code>colors.xml</code> 文件就像个“调色板”，只映射颜色的ARGB值，不应该存在其他类型的数值，更不要使用它为不同的按钮来定义ARGB值。</p><p><strong>不建议</strong> 使用以下命名规则：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"button_foreground"</span>&gt;</span>#FFFFFF<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"button_background"</span>&gt;</span>#2A91BD<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"comment_background_inactive"</span>&gt;</span>#5F5F5F<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"comment_background_active"</span>&gt;</span>#939393<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"comment_foreground"</span>&gt;</span>#FFFFFF<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"comment_foreground_important"</span>&gt;</span>#FF9D2F<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line">  ...</div><div class="line">  <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"comment_shadow"</span>&gt;</span>#323232<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div></pre></td></tr></table></figure><p>使用这种定义方式，我们需要非常的谨慎，一不小心就会重复定义ARGB值，而且当改变基本色时，会造成很多冗余重复的操作。</p><p>相反地，我们应该根据颜色或者风格对ARGB赋值：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="comment">&lt;!-- grayscale --&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"white"</span>     &gt;</span>#FFFFFF<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"gray_light"</span>&gt;</span>#DBDBDB<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"gray"</span>      &gt;</span>#939393<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"gray_dark"</span> &gt;</span>#5F5F5F<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"black"</span>     &gt;</span>#323232<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="comment">&lt;!-- basic colors --&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"green"</span>     &gt;</span>#27D34D<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"blue"</span>      &gt;</span>#2A91BD<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"orange"</span>    &gt;</span>#FF9D2F<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"red"</span>       &gt;</span>#FF432F<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">resources</span>&gt;</span></div></pre></td></tr></table></figure><p>对 <strong>同一色调，不同色域</strong> 进行定义时，像 <code>brand_primary</code>、<code>brand_secondary</code>、 <code>brand_negative</code> 这样的命名也是不错的选择。</p><p>这样规范的颜色很容易修改或重构，App一共使用了多少种不同的颜色变会得非常清晰。</p><h4 id="dimen-尺寸"><a href="#dimen-尺寸" class="headerlink" title="dimen 尺寸"></a>dimen 尺寸</h4><p>我们应该像对待 <code>colors.xml</code> 一样对待 <code>dimens.xml</code> 文件，与定义颜色调色板无异，也应该定义一个规范字体大小的 “字号板”。</p><p>一个很好的建议：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="comment">&lt;!-- font sizes --&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">dimen</span> <span class="attr">name</span>=<span class="string">"font_larger"</span>&gt;</span>22sp<span class="tag">&lt;/<span class="name">dimen</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">dimen</span> <span class="attr">name</span>=<span class="string">"font_large"</span>&gt;</span>18sp<span class="tag">&lt;/<span class="name">dimen</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">dimen</span> <span class="attr">name</span>=<span class="string">"font_normal"</span>&gt;</span>15sp<span class="tag">&lt;/<span class="name">dimen</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">dimen</span> <span class="attr">name</span>=<span class="string">"font_small"</span>&gt;</span>12sp<span class="tag">&lt;/<span class="name">dimen</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="comment">&lt;!-- typical spacing between two views --&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">dimen</span> <span class="attr">name</span>=<span class="string">"spacing_huge"</span>&gt;</span>40dp<span class="tag">&lt;/<span class="name">dimen</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">dimen</span> <span class="attr">name</span>=<span class="string">"spacing_large"</span>&gt;</span>24dp<span class="tag">&lt;/<span class="name">dimen</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">dimen</span> <span class="attr">name</span>=<span class="string">"spacing_normal"</span>&gt;</span>14dp<span class="tag">&lt;/<span class="name">dimen</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">dimen</span> <span class="attr">name</span>=<span class="string">"spacing_small"</span>&gt;</span>10dp<span class="tag">&lt;/<span class="name">dimen</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">dimen</span> <span class="attr">name</span>=<span class="string">"spacing_tiny"</span>&gt;</span>4dp<span class="tag">&lt;/<span class="name">dimen</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="comment">&lt;!-- typical sizes of views --&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">dimen</span> <span class="attr">name</span>=<span class="string">"button_height_tall"</span>&gt;</span>60dp<span class="tag">&lt;/<span class="name">dimen</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">dimen</span> <span class="attr">name</span>=<span class="string">"button_height_normal"</span>&gt;</span>40dp<span class="tag">&lt;/<span class="name">dimen</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">dimen</span> <span class="attr">name</span>=<span class="string">"button_height_short"</span>&gt;</span>32dp<span class="tag">&lt;/<span class="name">dimen</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">resources</span>&gt;</span></div></pre></td></tr></table></figure><p>同样的，在定义 <code>margin</code> 和 <code>padding</code> 时，可以使用 <code>spacing_****</code> 作为前缀对其命名，而不是像对待 <code>String</code> 字符串那样直接写值。</p><p>这样写的好处是，使组织结构和修改风格甚至布局变得非常容易。</p><h4 id="style-样式"><a href="#style-样式" class="headerlink" title="style 样式"></a>style 样式</h4><ul><li><p>Style 与 Theme 的命名统一使用 <strong>驼峰命名法</strong>（首字母大写）</p></li><li><p>几乎每个项目都需要适当的使用 Style 文件，因为对于一个视图来说有一个重复的外观是很常见的。在应用中对于大多数文本内容，最起码你应该有一个<code>通用的 Style 文件</code>，例如：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">"ContentText"</span>&gt;</span><span class="xml"></span></div><div class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:textSize"</span>&gt;</span>@dimen/font_normal<span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:textColor"</span>&gt;</span>@color/basic_black<span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div></pre></td></tr></table></figure><p>应用到 TextView 中:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">TextView</span></span></div><div class="line">    <span class="attr">style</span>=<span class="string">"@style/ContentText"</span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">    <span class="attr">android:text</span>=<span class="string">"@string/price"</span></div><div class="line">    /&gt;</div></pre></td></tr></table></figure></li></ul><h4 id="string-文字"><a href="#string-文字" class="headerlink" title="string 文字"></a>string 文字</h4><ul><li>命名：<code>类型_[范围_]功能</code></li></ul><p>以下为几种常用的命名：</p><table><thead><tr><th>控件</th><th>缩写</th></tr></thead><tbody><tr><td>页面标题</td><td>title_页面</td></tr><tr><td>按钮文字</td><td>btn_按钮事件</td></tr><tr><td>标签文字</td><td>label_标签文字</td></tr><tr><td>选项卡文字</td><td>tab_选项卡文字</td></tr><tr><td>消息框文字</td><td>toast_消息</td></tr><tr><td>编辑框的提示文字</td><td>hint_提示信息</td></tr><tr><td>图片的描述文字</td><td>desc_图片文字</td></tr><tr><td>对话框文字</td><td>dialog_文字</td></tr><tr><td>menu的item文字</td><td>action_文字</td></tr></tbody></table><ul><li><p>String命名的前缀应该能够清楚地表达它的功能职责，如，<code>registration_email_hint</code>，<code>registration_name_hint</code></p></li><li><p>如果一个Sting不属于任何模块，这也就意味着它是通用的，应该遵循以下规范：</p></li></ul><table><thead><tr><th>Prefix</th><th>Description</th></tr></thead><tbody><tr><td><code>error_</code></td><td>错误提示</td></tr><tr><td><code>msg_</code></td><td>一般信息提示</td></tr><tr><td><code>title_</code></td><td>标题提示，如，Dialog标题</td></tr><tr><td><code>action_</code></td><td>动作提示，如，“保存”，“取消”，“创建”</td></tr></tbody></table><h1 id="最佳实践"><a href="#最佳实践" class="headerlink" title="最佳实践"></a>最佳实践</h1><h2 id="编码相关"><a href="#编码相关" class="headerlink" title="编码相关"></a>编码相关</h2><h3 id="常规"><a href="#常规" class="headerlink" title="常规"></a>常规</h3><h4 id="方法函数中的参数排序规范"><a href="#方法函数中的参数排序规范" class="headerlink" title="方法函数中的参数排序规范"></a>方法函数中的参数排序规范</h4><p>在Android日常开发中，很多情况下都需要使用 <code>Context</code>，所以经常被作为参数传入方法中，这里给出的建议是，如果函数签名中存在 <code>Context</code>，则作为第一个参数，如果存在 <code>Callback</code> 则作为最后一个参数，示例如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">loadUserAsync</span><span class="params">(Context context, <span class="keyword">int</span> userId, UserCallback callback)</span></span>;</div></pre></td></tr></table></figure><h3 id="Activity-Fragment-相关"><a href="#Activity-Fragment-相关" class="headerlink" title="Activity Fragment 相关"></a>Activity Fragment 相关</h3><h4 id="BaseActivity-BaseFragment"><a href="#BaseActivity-BaseFragment" class="headerlink" title="BaseActivity BaseFragment"></a>BaseActivity BaseFragment</h4><ul><li>每个 <code>Activity</code>，<code>Fragment</code> 都要对应继承 <code>BaseActivity</code>，<code>BaseFragment</code>（放在目录 <code>com.xx.yy.ui.base</code> 下）</li><li><code>BaseActivity</code> 统一继承 <code>support-v7</code> 中的 <code>AppCompatActivity</code>。</li><li><code>BaseFragment</code> 统一继承 <code>support-v4</code> 中的 <code>Fragment</code></li><li>如果项目中引用 <code>RxJava</code>，建议继承 <a href="https://github.com/trello/RxLifecycle" target="_blank" rel="external">RxLifecycle</a> 中的 <code>RxAppCompatActivity</code> 和 <code>RxFragment</code></li><li>Activity <code>Theme</code> 统一继承 <code>Theme.AppCompat[.Light].NoActionBar</code></li></ul><h4 id="生命周期排序"><a href="#生命周期排序" class="headerlink" title="生命周期排序"></a>生命周期排序</h4><p>Activity或者Fragment，重写生命周期函数时，应该按照组件的生命周期进行排序，如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">()</span> </span>&#123;&#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResume</span><span class="params">()</span> </span>&#123;&#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onPause</span><span class="params">()</span> </span>&#123;&#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h4 id="Activity-和-Fragment-打开方式"><a href="#Activity-和-Fragment-打开方式" class="headerlink" title="Activity 和 Fragment 打开方式"></a>Activity 和 Fragment 打开方式</h4><p>当通过 <code>Intent</code> 或者 <code>Bundle</code> 向 <code>Activity</code> 与 <code>Fragment</code> 传值时，应该遵循上面提到的 <code>key-value</code> 规范，公开一个被 <code>public static</code> 修饰的方法，方法的参数应该包含所有打开这个 <code>Activity</code> 或者 <code>Fragment</code> 的信息，示例如下：</p><ul><li>通过 <code>.startActivity()</code> 函数，开启指定 <strong>Activity</strong>。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">startActivity</span><span class="params">(AppCompatActivity startingActivity, User user)</span> </span>&#123;</div><div class="line">    Intent intent = <span class="keyword">new</span> Intent(startingActivity, ThisActivity.class);</div><div class="line">    intent.putParcelableExtra(EXTRA_USER, user);</div><div class="line">    startingActivity.startActivity(intent);</div><div class="line">  &#125;</div></pre></td></tr></table></figure><ul><li>通过 <code>.newInstance()</code> 函数，加载指定 <code>Fragment</code>。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> UserFragment <span class="title">newInstance</span><span class="params">(User user)</span> </span>&#123;</div><div class="line">  UserFragment fragment = <span class="keyword">new</span> UserFragment;</div><div class="line">  Bundle args = <span class="keyword">new</span> Bundle();</div><div class="line">  args.putParcelable(ARGUMENT_USER, user);</div><div class="line">  fragment.setArguments(args)</div><div class="line">  <span class="keyword">return</span> fragment;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>需要注意一下两点：</p><ol><li>以上这些方法应该放在类的开头，至少应该放在 <code>onCreate()</code> 之前。</li><li>如 <code>EXTRA_USER</code>，<code>ARGUMENT_USER</code> 等常量 <code>key</code>，应该放在本类中被<code>private</code> 所修饰，不应该暴露给其它外部类。</li></ol><h3 id="Log"><a href="#Log" class="headerlink" title="Log"></a>Log</h3><h4 id="Log-输出规范"><a href="#Log-输出规范" class="headerlink" title="Log 输出规范"></a>Log 输出规范</h4><p>使用 Log 类打印一些重要的信息对开发者而言是很重要的事情，切记不要使用 Toast 来做信息打印。</p><p><code>VERBOSE</code> 和 <code>DEBUG</code> 类型的 Log 不应该出现在 <code>Release</code> 版本中，<code>INFORMATION</code>、<code>WARNING</code> 和 <code>ERROR</code> 类型的 Log 可以留下来，因为这些信息的输出能够帮助我们快速地定位问题所在，当然前提是，需要隐藏重要的信息输出，如：用户手机号，邮箱等。</p><p>只在 Debug 环境中输出日志的小技巧：</p><blockquote><p>if (BuildConfig.DEBUG) Log.d(TAG, “The value of x is “ + x)</p></blockquote><h3 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h3><ul><li>除非确实有必要，否则不要盲目的引入数据库支持。这一点笔者也是赞同的，很多时候简单的缓存可以用 <code>SharedReference</code> 就可以了。不过反过来，如果你真的有一定的需要持久化的数据，不要犹豫，立马引入数据库的支持</li><li>如果引入了DB支持，那考虑使用 <code>ORM框架</code> 的支持，避免重复造轮子</li><li>关于 <code>Realm</code> ，这是一个很炫的东西，但是笔者自己老实说在Android和iOS平台引入之后，发现还是会存在一些问题Abderrazak Laanaya对Realm是持积极态度而Stepan Goncharov是保守态度。笔者自己的感觉是Realm确实很酷，但是一定要做好其引发未知Crash的心理准备</li></ul><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><ul><li>使用 <code>AccountManager</code> 来建议登录名与Email地址等</li></ul><h3 id="权限相关"><a href="#权限相关" class="headerlink" title="权限相关"></a>权限相关</h3><h2 id="Resource"><a href="#Resource" class="headerlink" title="Resource"></a>Resource</h2><h3 id="XML属性排序"><a href="#XML属性排序" class="headerlink" title="XML属性排序"></a>XML属性排序</h3><p>对于如何排版一个布局文件，请尽量遵循以下规范：</p><ul><li>每个属性独占一行，缩进四个空格</li><li><code>android:id</code> 作为第一个属性存在</li><li>如果存在 <code>style</code> 属性，则紧随 <code>id</code> 之后</li><li>如果不存在 <code>style</code> 属性，则 <code>android:layout_****</code> 紧随 <code>id</code> 之后</li><li>当布局中的一个元素不再包含子元素时，另起一行，使用自闭合标签 <code>/&gt;</code>，方便调整和添加新的属性</li></ul><p>示例如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">    <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:orientation</span>=<span class="string">"vertical"</span></div><div class="line">    &gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/name"</span></div><div class="line">        <span class="attr">style</span>=<span class="string">"@style/FancyText"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:layout_alignParentRight</span>=<span class="string">"true"</span></div><div class="line">        <span class="attr">android:text</span>=<span class="string">"@string/name"</span></div><div class="line">        /&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">include</span> <span class="attr">layout</span>=<span class="string">"@layout/reusable_part"</span> /&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div></pre></td></tr></table></figure><h3 id="Drawable"><a href="#Drawable" class="headerlink" title="Drawable"></a>Drawable</h3><ul><li>可拉伸，尤其带圆角的图片，都要用 <code>.9.png</code> 处理</li><li>图片尽量分拆成多个可重用的图片</li><li>多使用 <code>layer-list</code> 和 <code>selector</code></li></ul><h3 id="Dimen"><a href="#Dimen" class="headerlink" title="Dimen"></a>Dimen</h3><ul><li>文字大小的单位统一用 <code>sp</code>，元素大小的单位统一用 <code>dp</code></li></ul><h3 id="Anim"><a href="#Anim" class="headerlink" title="Anim"></a>Anim</h3><ul><li>使用 <code>animation-list</code> 制作动画效果</li></ul><h3 id="Color"><a href="#Color" class="headerlink" title="Color"></a>Color</h3><ul><li>颜色值统一在 <code>colors.xml</code> 中定义，然后在代码和布局文件中引用。</li><li>不要在代码和布局文件中引用系统的颜色，除了透明。</li></ul><h3 id="String"><a href="#String" class="headerlink" title="String"></a>String</h3><ul><li>应用中的字符串统一在 <code>strings.xml</code> 中定义，然后在代码和布局文件中引用</li><li><code>strings.xml</code> 中使用 <code>%1$s</code> 实现字符串的通配</li></ul><h3 id="Style"><a href="#Style" class="headerlink" title="Style"></a>Style</h3><ul><li>使用 <code>styles</code>，复用样式定义，来减少布局 XML 中的重复属性</li><li><p>值得一提的是，<code>android:layout_****</code> 属性应该在XML中定义，同时其它属性 <code>android:****</code> 应放在 <code>style</code> 中。核心准则是保证<code>Layout属性</code> ( position, margin, size等 )和 <code>content属性</code> 在布局文件中，同时将所有的外观细节属性（color, padding, font）放在style文件中。</p></li><li><p>另外，在上面提到的准则中，有以下几点需要注意：</p><ul><li><code>android:id</code> 明显应该在layout文件中</li><li>Layout文件中的 <code>android:orientation</code> 属性对于一个 <code>LinearLayout</code> 布局来说，更具有意义</li><li>由于使用 <code>android:text</code> 定义内容，所以这个属性应该放在Layout文件中</li><li>有时候将 <code>android:layout_width</code> 和 <code>android:layout_height</code> 属性放到一个 <code>style.xml</code> 中作为一个通用的风格更有意义，但是默认情况下把这些属性放到Layout文件中比放到 <code>style.xml</code> 文件中更加直观。</li></ul></li></ul><h3 id="Layout"><a href="#Layout" class="headerlink" title="Layout"></a>Layout</h3><ul><li>Layout结构优化方面，应尽量避免深层次的布局嵌套，这不仅会引发性能瓶颈，还会带来项目维护上的麻烦。在书写布局之前应该对ViewTree充分的分析，善用 <a href="http://stackoverflow.com/questions/8834898/what-is-the-purpose-of-androids-merge-tag-in-xml-layouts" target="_blank" rel="external"><code>&lt;merge&gt;</code>标签</a> 减少层级嵌套，或者使用 <a href="http://developer.android.com/intl/zh-cn/tools/help/hierarchy-viewer.html" target="_blank" rel="external">Hierarchy Viewer</a> 等UI优化工具对Layout进行分析与优化。可参考 <a href="http://developer.android.com/intl/zh-cn/tools/debugging/debugging-ui.html" target="_blank" rel="external">Optimizing Your UI</a> 与 <a href="http://developer.android.com/intl/zh-cn/training/improving-layouts/optimizing-layout.html" target="_blank" rel="external">Optimizing Layout Hierarchies</a>。</li></ul><h3 id="Designtime-Attributes（tools-标签）"><a href="#Designtime-Attributes（tools-标签）" class="headerlink" title="Designtime Attributes（tools 标签）"></a>Designtime Attributes（tools 标签）</h3><ul><li><p>布局预览应使用 <code>tools:xxx</code> 相关属性，避免 <code>android:text</code> 等硬编码的出现，具体可参考 <a href="http://tools.android.com/tips/layout-designtime-attributes" target="_blank" rel="external">Designtime Attributes</a></p><p>示例如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">TextView</span></span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">    <span class="attr">tools:text</span>=<span class="string">"Home Link"</span></div><div class="line">    /&gt;</div></pre></td></tr></table></figure></li><li><p>关于<code>tools:xxx</code> 相关属性的 <a href="https://developer.android.com/studio/write/tool-attributes.html" target="_blank" rel="external">官方介绍</a></p></li></ul><h2 id="开发、构建与测试"><a href="#开发、构建与测试" class="headerlink" title="开发、构建与测试"></a>开发、构建与测试</h2><h3 id="Build"><a href="#Build" class="headerlink" title="Build"></a>Build</h3><ul><li>现在的应用程序很容易突破 <code>65K</code> 的方法数量的限制，<code>Multidexing</code> 可以帮你解决这个问题</li><li>应该按照 <code>Feature</code> 打包，而不应该按照 <code>Layers</code> 打包</li><li>开发的时候设置 <code>minSdkVersion=21</code>，这样可以加速编译时间，特别是在设置了 <code>Multidexing</code> 的时候</li></ul><h3 id="Debug"><a href="#Debug" class="headerlink" title="Debug"></a>Debug</h3><ul><li>使用 Facebook 的 <a href="http://facebook.github.io/stetho/" target="_blank" rel="external">Stetho</a> 来方便调试应用</li></ul><h3 id="Gradle"><a href="#Gradle" class="headerlink" title="Gradle"></a>Gradle</h3><ul><li>将密码以及其他关键数据放置到 <code>gradle.properties</code> 中</li><li><p>使用Maven依赖代替jar包导入</p><p>如果在项目中明确使用jar文件，那么它们可能成为永久的版本，如<code>2.1.1</code>。而且很容易陷入频繁更新jar包的繁琐工作中，Maven很好的解决了这个问题，这也是 Gradle构建中推荐的方法。你可以指定版本的一个范围，如<code>2.1.+</code>,然后Maven会自动升级到制定的最新版本，例如：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">dependencies &#123;</div><div class="line">      <span class="comment">/*ReactiveX Library*/</span></div><div class="line">      compile <span class="string">'io.reactivex:rxjava:1.1.3'</span></div><div class="line">      compile <span class="string">'io.reactivex:rxandroid:1.1.0'</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>签名配置</p><p>发布release版本的时候，应该做好 <strong>SigningConfigs</strong> 的保密性：</p><p>不要这样做，这种做法非常的不安全：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">signingConfigs &#123;</div><div class="line">  release &#123;</div><div class="line">    storeFile file(<span class="string">"myapp.keystore"</span>)</div><div class="line">    storePassword <span class="string">"storePassword"</span></div><div class="line">    keyAlias <span class="string">"storeKey"</span></div><div class="line">    keyPassword <span class="string">"keyPassword"</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>而是，建立一个不加入版本控制系统的<code>gradle.properties</code>文件，或者在本地的<code>local.properties</code>中记录。</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">KEYSTORE_PASSWORD=storePassword</div><div class="line">KEY_PASSWORD=keyPassword</div></pre></td></tr></table></figure><p>那个文件会被gradle自动引入，因此可以在<code>buld.gradle</code>文件中使用，例如：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">signingConfigs &#123;</div><div class="line">  release &#123;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">      storeFile file(<span class="string">"myapp.keystore"</span>)</div><div class="line">      storePassword KEYSTORE_PASSWORD</div><div class="line">      keyAlias <span class="string">"storeKey"</span></div><div class="line">      keyPassword KEY_PASSWORD</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">catch</span> (ex) &#123;</div><div class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> InvalidUserDataException(<span class="string">"You should define KEYSTORE_PASSWORD and KEY_PASSWORD in gradle.properties."</span>)</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li></ul><h3 id="Check"><a href="#Check" class="headerlink" title="Check"></a>Check</h3><ul><li>在CI工具里添加些 <a href="http://www.sonarqube.org/" target="_blank" rel="external">静态的代码分析工具</a></li></ul><h3 id="Log-日志"><a href="#Log-日志" class="headerlink" title="Log 日志"></a>Log 日志</h3><ul><li>Log(系统名称模块名称接口名称，详细描述)</li><li>使用如下的表达式来过滤日志：<blockquote><p>^(?!(NotificationManager|Timeline|SensorManager|Configs|libc-netbsd|art|stetho|Choreographer|CliptrayUtils|BubblePopupHelper|ViewRootImpl|libEGL|System.out|PhoneWindow))</p></blockquote></li></ul><h2 id="组件化"><a href="#组件化" class="headerlink" title="组件化"></a>组件化</h2><ul><li><p>将应用分为多个较小灵活地模块中，这样可以尽量保证可维护性较好、耦合度较低的CodeBase，也可以选择将小的模块发布到公开或者私有的仓库中，然后在主项目中引入。</p></li><li><p>引入 <code>Dagger2</code> 减少模块之间的耦合性。Dagger2 是一个依赖注入框架，使用代码自动生成创建依赖关系需要的代码。减少很多模板化的代码，更易于测试，降低耦合，创建可复用可互换的模块。参考之前的文章 <a href="http://www.jianshu.com/p/01d3c014b0b1" target="_blank" rel="external">Google官方MVP + Dagger2架构详解</a></p></li></ul><h3 id="第三方库"><a href="#第三方库" class="headerlink" title="第三方库"></a>第三方库</h3><ul><li>使用任何的第三方库之前都要三思而行，从笔者自己的经验里，<code>抽象漏洞定理</code> 是一个颠仆不破的定理啊。虽然很多库宣扬的都是非常Nice，Demo也很诱人，但是你压根不知道它到底会带来怎样的 <code>Side Effect</code>。笔者是建议如果真的打算应用某个库到正式的大型项目中，一定要好好考量下它的社区和活跃度。以后流的泪，都是当时脑子进的水。</li><li>引用第三方库要慎重，避免应用大容量的第三方库，导致客户端包非常大。尽量使用那些较小的，往往只是完成单个功能的库，将来比较好替换</li><li>可以添加多一层 <code>Lib</code> 层，用来对大多数第三方库进行一层包裹 <code>Wrap</code>，方便日后更换或拓展 （<a href="http://www.jianshu.com/p/e26130a93289" target="_blank" rel="external">参考 ImageLoader 的封装</a>）</li><li>不要使用 Google 的 <code>Guava</code></li></ul><h2 id="性能优化"><a href="#性能优化" class="headerlink" title="性能优化"></a>性能优化</h2><h3 id="内存优化"><a href="#内存优化" class="headerlink" title="内存优化"></a>内存优化</h3><ul><li>尽量避免 <code>static</code> 成员变量引用资源耗费过多的实例,比如 <code>Context</code></li><li>线程也是造成内存泄露的一个重要的源头。线程产生内存泄露的主要原因在于线程生命周期的不可控。</li><li>使用 <code>WeakReference</code> 代替强引用，弱引用可以让您保持对对象的引用，同时允许 GC 在必要时释放对象，回收内存。对于那些创建便宜但耗费大量内存的对象，即希望保持该对象，又要在应用程序需要时使用，同时希望 GC 必要时回收时，可以考虑使用弱引用。</li><li>保证 <code>Cursor</code> 占用的内存被及时的释放掉，而不是等待 GC 来处理。并且 Android 明显是倾向于编程者手动的将 <code>Cursor</code> 手动 <code>close</code> 掉</li><li>在应用程序中要注意避免 <code>Memory Leaks</code>，不过 <code>onLowMemory()</code> 是会在整个系统的内存较低的情况下被触发，因此不能用于避免 OOM</li></ul><h3 id="图片优化"><a href="#图片优化" class="headerlink" title="图片优化"></a>图片优化</h3><ul><li>超级大胖子 <code>Bitmap</code> 及时的销毁 ( Activity的onDestroy时，将bitmap回收 ) 设置一定的 <code>采样率</code>，巧妙的运用软引用 drawable对应resid的资源，bitmap对应其他资源。</li></ul><h3 id="网络优化"><a href="#网络优化" class="headerlink" title="网络优化"></a>网络优化</h3><ul><li>HTTP 用 <code>gzip</code> 压缩，设置连接超时时间和响应超时时间</li><li>HTTP 请求按照业务需求，分为是否可以缓存和不可缓存，那么在无网络的环境中，仍然通过缓存的 HTTP <code>response</code> 浏览部分数据，实现离线阅读。</li><li>不要尝试着重复造轮子，可以使用 <code>Volley</code> 或者 <code>OkHTTP</code>，可以考虑使用 <code>Retrofit</code> 作为上层封装</li><li>记得监控当前连接类型，在 <code>WiFi</code> 下进行较大量的数据更新</li></ul><h3 id="异步优化"><a href="#异步优化" class="headerlink" title="异步优化"></a>异步优化</h3><ul><li>使用 <code>线程池</code>，分为核心线程池和普通线程池，下载图片等耗时任务放置在普通线程池，避免耗时任务阻塞线程池后，导致所有异步任务都必须等待</li><li>使用 <code>RxJava</code> 来代替 <code>AsyncTasks</code>，不过对于 <code>RetroLambda</code> 的使用还是持保留意见</li><li>对于 <code>EventBus</code> 的使用持谨慎态度，一不小心就可能把你的程序变得有些杂乱，可以考虑使用 <code>RxJava + LocalBroadcastManager</code> 作为替代</li><li>不要把太多东西塞入到 <code>Application线程</code> 中</li><li>使用 <code>JobScheduler</code> 来处理长期周期化运行的无状态任务</li></ul><h3 id="电量优化"><a href="#电量优化" class="headerlink" title="电量优化"></a>电量优化</h3><ul><li>系统的30%的电量消耗用在了图片、动画等，而70%用于分析、广告、地图以及GPS</li></ul><h3 id="序列化"><a href="#序列化" class="headerlink" title="序列化"></a>序列化</h3><ul><li>使用 <code>Parcel</code> 在 Android 中引入 <code>AutoValue</code>。</li><li>尽量少用 <code>Serializable</code>：<code>Serializable</code> 虽然方便使用，但是效率低下。使用 <code>Parcel</code> 或者 <code>FlatBuffers</code>（一个高效地跨平台序列化框架）</li></ul><h2 id="UI优化"><a href="#UI优化" class="headerlink" title="UI优化"></a>UI优化</h2><ul><li>使用 <code>Lint</code> 来辅助进行布局与层次优化，这样有助于发现冗余的布局</li><li><code>软键盘</code> 的弹出控制，不要让其覆盖输入框</li><li><code>Launch Screen</code> 是用户看到的第一个画面，要谨慎，不过也不能在没必要的时候强行加入一个Launch Screen</li><li>使用 <a href="https://developer.android.com/topic/libraries/data-binding/index.html" target="_blank" rel="external">DataBinding</a> 来减少UI代码的数目</li></ul><h3 id="适配优化"><a href="#适配优化" class="headerlink" title="适配优化"></a>适配优化</h3><ul><li>自适应屏幕，使用 <code>dp</code> 替代 <code>px</code></li><li>使用 <code>android:layout_weight</code> 或者 <code>TableLayout</code>、<code>GridLayout</code>制作等分布局</li></ul><h3 id="布局优化"><a href="#布局优化" class="headerlink" title="布局优化"></a>布局优化</h3><ul><li><code>layout</code> 组件化，尽量使用 <code>merge</code> 及 <code>include</code> 复用</li><li>复杂布局使用 <code>RelativeLayout</code></li><li>不要使用层次过深的 <code>ViewGroups</code> 继承</li><li>使用 <a href="http://tools.android.com/tech-docs/layout-editor" target="_blank" rel="external">ConstraintsLayout</a> 来扁平化视图层次</li></ul><h3 id="ListView-性能优化"><a href="#ListView-性能优化" class="headerlink" title="ListView 性能优化"></a>ListView 性能优化</h3><ul><li>复用 <code>convertView</code>：在 <code>getItemView</code> 中，判断 convertView 是否为空，如果不为空，可复用。如果 convertView 中的 view 需要添加 listerner，代码一定要在 <code>if(convertView == null){}</code> 之外。</li><li>异步加载图片 item 中如果包含有 <code>webimage</code> ，那么最好异步加载</li><li>快速滑动时不显示图片，当快速滑动列表时（<code>SCROLL_STATE_FLING</code>），item 中的图片或获取需要消耗资源的 view，可以不显示出来；而处于其他两种状态（<code>SCROLL_STATE_IDLE</code> 和<code>SCROLL_STATE_TOUCH_SCROLL</code>），则将那些view显示出来</li></ul><h3 id="TextView-排版"><a href="#TextView-排版" class="headerlink" title="TextView 排版"></a>TextView 排版</h3><ul><li>英文文档排版：<code>textview</code> 自动换行时要保持单词的完整性，解决方案是计算字符串长度，然后手动设定每一行显示多少个字母并加上‘n‘</li><li>数字、字母和汉字混排占位问题：将数字和字母全角化。由于现在大多数情况下我们的输入都是半角，所以 字母和数字的占位无法确定，但是一旦全角化之后，数字、字母的占位就和一个汉字的占位相同了，这样就可以避免由于占位导致的排版问题。</li></ul><h3 id="自定义View"><a href="#自定义View" class="headerlink" title="自定义View"></a>自定义View</h3><ul><li>应用开发中自定义View的时候，交互部分，千万不要写成线程不断刷新界面显示，而是根据 <code>TouchListener</code> 事件主动触发界面的更新</li></ul><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><h2 id="开发规范"><a href="#开发规范" class="headerlink" title="开发规范"></a>开发规范</h2><ul><li><a href="https://github.com/ribot/android-guidelines" target="_blank" rel="external">ribot/android-guidelines</a></li><li><a href="https://github.com/bufferapp/android-guidelines/blob/master/project_style_guidelines.md" target="_blank" rel="external">Android Project Guidelines</a></li><li><a href="https://github.com/RxSmart/Link-Android-Guideline" target="_blank" rel="external">RxSmart/Link-Android-Guideline</a></li><li><a href="http://www.jianshu.com/p/c43b558c72b4" target="_blank" rel="external">Android架构系列-开发规范</a></li><li><a href="http://keeganlee.me/post/android/20150709" target="_blank" rel="external">Android技术积累: 开发规范</a></li><li><a href="http://www.jianshu.com/p/fbf9ea4b9d76#rd" target="_blank" rel="external">Android进阶之路——安卓编程规范</a></li><li><a href="http://www.jianshu.com/p/0a984f999592" target="_blank" rel="external">Android 编码规范（比较全）</a></li><li><a href="http://www.jianshu.com/p/99239b9c1630" target="_blank" rel="external">Android开发架构规范</a></li><li><a href="https://zhuanlan.zhihu.com/p/21258353?refer=kotandroid" target="_blank" rel="external">数库科技 Android 开发准则</a></li><li><a href="http://www.jianshu.com/p/9b8aeca9b281" target="_blank" rel="external">[干货] Android编程开发规范</a></li><li><a href="http://blog.csdn.net/vipzjyno1/article/details/23542617" target="_blank" rel="external">Android 命名规范 （提高代码可以读性）</a></li></ul><h2 id="最佳实践-1"><a href="#最佳实践-1" class="headerlink" title="最佳实践"></a>最佳实践</h2><ul><li><a href="https://github.com/futurice/android-best-practices" target="_blank" rel="external">futurice/android-best-practices</a></li><li><a href="https://segmentfault.com/a/1190000005752066" target="_blank" rel="external">2016里一些Android最佳实践列表——Opinionated</a></li><li><a href="https://github.com/GeniusVJR/Good-Android-development-habits" target="_blank" rel="external">好的Android开发习惯</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;命名规范&quot;&gt;&lt;a href=&quot;#命名规范&quot; class=&quot;headerlink&quot; title=&quot;命名规范&quot;&gt;&lt;/a&gt;命名规范&lt;/h1&gt;&lt;h2 id=&quot;通用规则&quot;&gt;&lt;a href=&quot;#通用规则&quot; class=&quot;headerlink&quot; title=&quot;通用规则&quot;&gt;&lt;/a&gt;通用规则&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;命名原则：尽可能的用最少的字符而又能完整的表达标识符的含义。&lt;/li&gt;&lt;li&gt;英文缩写原则：&lt;ol&gt;&lt;li&gt;较短的单词可通过去掉 &lt;strong&gt;”元音”&lt;/strong&gt; 形成缩写&lt;/li&gt;&lt;li&gt;较长的单词可取单词的 &lt;strong&gt;头几个字母&lt;/strong&gt; 形成缩写&lt;/li&gt;&lt;li&gt;此外还有一些 &lt;strong&gt;约定俗成&lt;/strong&gt; 的英文单词缩写&lt;/li&gt;&lt;/ol&gt;&lt;/li&gt;&lt;li&gt;一些常见的英文单词缩写：&lt;/li&gt;&lt;/ul&gt;
    
    </summary>
    
      <category term="Android" scheme="https://djlinkiot.github.io/categories/Android/"/>
    
      <category term="Coding Rule" scheme="https://djlinkiot.github.io/categories/Android/Coding-Rule/"/>
    
    
      <category term="Android" scheme="https://djlinkiot.github.io/tags/Android/"/>
    
      <category term="Coding Rule" scheme="https://djlinkiot.github.io/tags/Coding-Rule/"/>
    
  </entry>
  
  <entry>
    <title>Java 编码规范</title>
    <link href="https://djlinkiot.github.io/2016/12/05/java-rule-coding-style/"/>
    <id>https://djlinkiot.github.io/2016/12/05/java-rule-coding-style/</id>
    <published>2016-12-05T09:58:31.000Z</published>
    <updated>2016-12-22T09:16:24.478Z</updated>
    
    <content type="html"><![CDATA[<h1 id="格式规范"><a href="#格式规范" class="headerlink" title="格式规范"></a>格式规范</h1><h2 id="文档排版规范"><a href="#文档排版规范" class="headerlink" title="文档排版规范"></a>文档排版规范</h2><ul><li>文档层面的结构包括：<code>括号风格</code>, <code>缩进</code>, <code>列限制</code>, <code>换行</code>, <code>空格</code>, <code>空行</code></li></ul><h2 id="具体结构规范"><a href="#具体结构规范" class="headerlink" title="具体结构规范"></a>具体结构规范</h2><ul><li>具体结构包括：<code>枚举</code>, <code>变量</code>, <code>数组</code>, <code>switch</code>, <code>注解</code>, <code>注释</code>, <code>修饰符</code></li></ul><h2 id="CodeStyle-配置"><a href="#CodeStyle-配置" class="headerlink" title="CodeStyle 配置"></a>CodeStyle 配置</h2><ul><li>统一用 <a href="https://djlinkiot.github.io/2016/11/26/android-studio-code-style-check-style/">Android Studio CodeStyle 配置</a> 来规范所有格式</li></ul><a id="more"></a><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><ul><li>使用快捷键进行代码格式自动化：<ul><li>Windows：<code>CTRL + ALT + L</code></li><li>Mac：<code>OPTION + COMMAND + L</code></li></ul></li><li>范围型的常量用枚举类定义，而不要直接用整型或字符，这样可以减少范围值的有效性检查</li></ul><h1 id="命名规范"><a href="#命名规范" class="headerlink" title="命名规范"></a>命名规范</h1><h2 id="包名"><a href="#包名" class="headerlink" title="包名"></a>包名</h2><ul><li>包名全部小写</li><li>公司（或个人）项目的域名倒序，“.”分隔，单个包名建议不超过12个字母。<br>例如，google的gson项目，包名为 <code>com.google.gson</code></li><li>连续的单词只是简单地连接起来，不使用下划线</li><li>在部门内部应该规划好包名的范围，防止产生冲突。部门内部产品使用部门的名称加上模块名称。产品线的产品使用产品的名称加上模块的名称。<ul><li>格式：<blockquote><p>com.公司名.产品名.模块名称<br>com.公司名.部门名称.项目名称</p></blockquote></li><li>实例：<blockquote><p>com.djlink.iot.sdk //djlink iot部门 SDK项目<br>com.djlink.cloud.order //djlink 云平台产品 预约模块</p></blockquote></li></ul></li></ul><h2 id="类名"><a href="#类名" class="headerlink" title="类名"></a>类名</h2><ul><li>首字母大写的驼峰式（ <code>UpperCamelCase</code> ）风格命名</li><li>类名通常是名词或名词短语，意义完整的英文描述</li></ul><h3 id="测试类"><a href="#测试类" class="headerlink" title="测试类"></a>测试类</h3><ul><li>以它要测试的类的名称开始，以 <code>Test</code> 结束。</li><li>示例：<blockquote><p><code>HashTest</code> 或 <code>HashIntegrationTest</code></p></blockquote></li></ul><h3 id="管理类"><a href="#管理类" class="headerlink" title="管理类"></a>管理类</h3><ul><li>文件管理、设备管理、用户管理这种具有管理某一类事物的功能的类</li><li>建议规则：语义名词 + <code>Manager</code></li><li>示例：<blockquote><p>文件管理：<code>FileManager</code>，设备管理：<code>DeviceManager</code>，用户管理：<code>UserManager</code></p></blockquote></li></ul><h3 id="工具类"><a href="#工具类" class="headerlink" title="工具类"></a>工具类</h3><ul><li>处理一些特定场景问题的类</li><li>建议规则：场景名词/动词 + <code>Util</code></li><li>示例：<blockquote><p>下载工具类：<code>DownloadUtil</code>，日期工具类：<code>DateUtil</code>，字符串处理工具类：<code>StringUtil</code></p></blockquote></li></ul><h2 id="接口名"><a href="#接口名" class="headerlink" title="接口名"></a>接口名</h2><ul><li>首字母大写的驼峰式（ <code>UpperCamelCase</code> ）风格命名</li><li>接口名称有时可能是形容词或形容词短语<blockquote><p>例如 <code>Runnable</code>， <code>Cloneable</code></p></blockquote></li><li>如果语义不是很清晰，尽量用 <code>I</code> 开头，避免产生歧义</li></ul><h3 id="回调接口"><a href="#回调接口" class="headerlink" title="回调接口"></a>回调接口</h3><ul><li>其命名规则：<code>On + 名称 + Callback</code></li></ul><h3 id="监听接口（观察者模式）"><a href="#监听接口（观察者模式）" class="headerlink" title="监听接口（观察者模式）"></a>监听接口（观察者模式）</h3><ul><li>其命名规则：<code>On + 名称 + Listener</code> 或者 <code>名称 + Observer</code></li></ul><h2 id="方法名"><a href="#方法名" class="headerlink" title="方法名"></a>方法名</h2><ul><li>首字母小写的驼峰式（ <code>lowerCamelCase</code> ）风格命名</li><li>方法名通常是动词或动词短语</li><li>下划线可能出现在JUnit测试方法名称中用以分隔名称的逻辑组件。一个典型的模式是：<code>test&lt;MethodUnderTest&gt;_&lt;state&gt;</code>，例如 <code>testPop_emptyStack</code>。并不存在唯一正确的方式来命名测试方法。</li><li>示例：<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">calculateRate</span><span class="params">()</span></span>;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addNewOrder</span><span class="params">()</span></span>;</div></pre></td></tr></table></figure></li></ul><h3 id="Getter-和-Setter-方法"><a href="#Getter-和-Setter-方法" class="headerlink" title="Getter 和 Setter 方法"></a>Getter 和 Setter 方法</h3><ul><li>存取私有属性的方法，统一采用 getter 和 setter</li><li>格式：<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">get + 非布尔属性名()</div><div class="line">is + 布尔属性名()</div><div class="line">set + 属性名()</div></pre></td></tr></table></figure></li></ul><h2 id="常量名"><a href="#常量名" class="headerlink" title="常量名"></a>常量名</h2><ul><li>常量名命名模式为 <code>CONSTANT_CASE</code>，全部字母大写，用下划线分隔单词。</li><li>使用 <code>final static</code> 修饰</li><li>示例：<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">int</span> MAX_VALUE = <span class="number">1000</span>;</div><div class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> String DEFAULT_START_DATE= <span class="string">"2001-12-08"</span>;</div></pre></td></tr></table></figure></li></ul><h2 id="成员变量"><a href="#成员变量" class="headerlink" title="成员变量"></a>成员变量</h2><ul><li><strong>非静态非public成员变量</strong> 都以 <code>字母m</code> 开头的驼峰式（ <code>lowerCamelCase</code> ）风格命名</li><li><strong>静态成员变量</strong> 都以 <code>字母s</code> 开头的驼峰式（ <code>lowerCamelCase</code> ）风格命名</li><li><strong>其他变量</strong> 都以 小写字母 开头的驼峰式（ <code>lowerCamelCase</code> ）风格命名</li><li>引用 <strong>非静态成员变量</strong> 时，使用 <code>this</code> 引用。引用 <strong>静态成员变量</strong> 时，使用 <code>类名</code> 引用</li><li>示例：<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyClass</span> </span>&#123;</div><div class="line">  </div><div class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> SOME_CONSTANT = <span class="number">42</span>; <span class="comment">//public constant</span></div><div class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> sPublicField;  <span class="comment">//public static</span></div><div class="line">  <span class="keyword">public</span> <span class="keyword">int</span> publicField;   <span class="comment">//public</span></div><div class="line">  <span class="keyword">private</span> <span class="keyword">static</span> MyClass sSingleton;  <span class="comment">//private static</span></div><div class="line">  <span class="keyword">int</span> mPackagePrivateField;      <span class="comment">//package</span></div><div class="line">  <span class="keyword">protected</span> <span class="keyword">int</span> mProtectedField; <span class="comment">//protect</span></div><div class="line">  <span class="keyword">private</span> <span class="keyword">int</span> mPrivateField;     <span class="comment">//protect</span></div><div class="line"> </div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPrivateField</span> <span class="params">(<span class="keyword">int</span> privateField)</span> </span>&#123;</div><div class="line">    <span class="keyword">this</span>.mPrivateField = privateField;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPublicField</span> <span class="params">(<span class="keyword">int</span> publicField)</span> </span>&#123;</div><div class="line">      MyClass.sPublicField = publicField;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li></ul><h2 id="局部变量-参数名"><a href="#局部变量-参数名" class="headerlink" title="局部变量 / 参数名"></a>局部变量 / 参数名</h2><ul><li>首字母小写的驼峰式（ <code>lowerCamelCase</code> ）风格命名</li><li>比起其它类型的名称， <code>参数名</code> 同 <code>局部变量名</code> 可以有更为宽松的缩写</li><li>虽然缩写更宽松，但还是要避免用 <code>单字符</code> 进行命名，除了临时变量和循环变量</li><li>即使局部变量是 <code>final</code> 和不可改变的，也不应该把它示为常量，自然也不能用常量的规则去命名它。</li></ul><h2 id="泛型变量名"><a href="#泛型变量名" class="headerlink" title="泛型变量名"></a>泛型变量名</h2><ul><li>范型变量可用以下两种风格之一进行命名：<ul><li>单个的大写字母，后面可以跟一个数字 (如：<code>E</code>, <code>T</code>, <code>X</code>, <code>T2</code>)</li><li>以类命名方式，后面加个大写的 <code>T</code> (如：<code>RequestT</code>, <code>FooBarT</code>)</li></ul></li></ul><h2 id="建议"><a href="#建议" class="headerlink" title="建议"></a>建议</h2><ul><li>常用组件类命名以组件名加上组件类型名结尾<blockquote><p>Application 类型的，命名以 App 结尾 —— MainApp<br>Frame 类型的，命名以 Frame 结尾 —— TopFrame<br>Panel 类型的，建议命名以 Panel 结尾 —— CreateCircuitPanel<br>Bean 类型的，命名以 Bean 结尾 —— DataAccessBean<br>EJB 类型，命名以 EJB 结尾 —— DBProxyEJB<br>Applet 类型，命名以 Applet 结尾 —— PictureShowApplet</p></blockquote></li></ul><ul><li><p>函数名/变量名缩写</p><p>如果函数名超过 <code>15个字母</code>，可采用以去掉元音字母的方法或者以行业内约定俗成的缩写方式缩写函数名</p><blockquote><p>示例：getCustomerInformation() 改为 getCustomerInfo()</p></blockquote></li><li><p>准确确定成员函数的访问限定符（public、protect、private）</p><p>非必须使用 <code>public</code> 的，请使用 <code>protect</code>。非必须使用<code>protected</code>，请使用 <code>private</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">setUserName</span><span class="params">()</span></span>;</div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">calculateRate</span><span class="params">()</span></span>;</div></pre></td></tr></table></figure></li><li><p>含有集合意义的属性命名，尽量包含其复数的意义</p><blockquote><p>customers, orderItems</p></blockquote></li></ul><h2 id="关于驼峰式命名法（CamelCase）"><a href="#关于驼峰式命名法（CamelCase）" class="headerlink" title="关于驼峰式命名法（CamelCase）"></a>关于驼峰式命名法（CamelCase）</h2><p><a href="https://zh.wikipedia.org/wiki/%E9%A7%9D%E5%B3%B0%E5%BC%8F%E5%A4%A7%E5%B0%8F%E5%AF%AB" target="_blank" rel="external">驼峰式命名法</a> 分大驼峰式命名法 (<code>UpperCamelCase</code>) 和小驼峰式命名法 (<code>lowerCamelCase</code>)。</p><p>有时，我们有不只一种合理的方式将一个英语词组转换成驼峰形式，如缩略语或不寻常的结构(例如 <code>”IPv6”</code>或 <code>”iOS”</code>)。Google指定了以下的转换方案。</p><p>名字从 <code>散文形式(prose form)</code> 开始:</p><ol><li>把短语转换为 <code>纯ASCII码</code>，并且移除任何单引号。例如：”Müller’s algorithm”将变成”Muellers algorithm”。</li><li>把这个结果切分成单词，在空格或其它标点符号(通常是连字符)处分割开。<ul><li>推荐：如果某个单词已经有了常用的驼峰表示形式，按它的组成将它分割开(如”AdWords”将分割成”ad words”)。 需要注意的是”iOS”并不是一个真正的驼峰表示形式，因此该推荐对它并不适用。</li></ul></li><li>现在将所有字母都小写(包括缩写)，然后将单词的第一个字母大写：<ul><li>每个单词的第一个字母都大写，来得到大驼峰式命名。</li><li>除了第一个单词，每个单词的第一个字母都大写，来得到小驼峰式命名。</li></ul></li><li>最后将所有的单词连接起来得到一个标识符。</li></ol><p>示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">Prose form                Correct               Incorrect</div><div class="line">------------------------------------------------------------------</div><div class="line"><span class="string">"XML HTTP request"</span>        XmlHttpRequest        XMLHTTPRequest</div><div class="line"><span class="string">"new customer ID"</span>         newCustomerId         newCustomerID</div><div class="line"><span class="string">"inner stopwatch"</span>         innerStopwatch        innerStopWatch</div><div class="line"><span class="string">"supports IPv6 on iOS?"</span>   supportsIpv6OnIos     supportsIPv6OnIOS</div><div class="line"><span class="string">"YouTube importer"</span>        YouTubeImporter</div><div class="line">                          YoutubeImporter* (不推荐)</div></pre></td></tr></table></figure><blockquote><p>Note：在英语中，某些带有连字符的单词形式不唯一。例如：<code>”nonempty”</code> 和 <code>”non-empty”</code> 都是正确的，因此方法名 <code>checkNonempty</code> 和<code>checkNonEmpty</code> 也都是正确的。</p></blockquote><h1 id="注释规范"><a href="#注释规范" class="headerlink" title="注释规范"></a>注释规范</h1><h2 id="规则"><a href="#规则" class="headerlink" title="规则"></a>规则</h2><ul><li>注释量：一般情况，源程序有效注释量必须在<code>20%</code>左右</li><li>注释原则：有助于对程序理解，语言必须准确、易懂、简洁</li></ul><h2 id="包的注释"><a href="#包的注释" class="headerlink" title="包的注释"></a>包的注释</h2><ul><li>写入一个名为 <code>package.html</code> 的说明网页放入当前路径，方便 <code>JavaDoc</code> 收集</li><li>注释内容：简述本包作用（整个项目中的位置）、详细描述本包的内容、产品模块名称和版本、公司版权</li><li><p>格式：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>一句话描述</div><div class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>详细描述</div><div class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>产品模块名称和版本</div><div class="line">        <span class="tag">&lt;<span class="name">br</span>&gt;</span>公司版权信息</div><div class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure></li><li><p>示例：com/djlink/iot/sdk/cmd/package.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>SDK中发送指令功能类，上层业务使用本包与设备发指令</div><div class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>采用xxx设计思路</div><div class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>MMSC v1.2.1</div><div class="line">        <span class="tag">&lt;<span class="name">br</span>&gt;</span>(C) 版权所有 200x-200y 北京鼎甲微联科技有限公司</div><div class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure></li></ul><h2 id="文件注释"><a href="#文件注释" class="headerlink" title="文件注释"></a>文件注释</h2><ul><li>注释位置：写入文件头部，包名之前的位置</li><li><p>注意以 <code>/*</code> 开始避免变 <code>JavaDoc</code> 收集</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line"> *  注释内容</div><div class="line"> */</div><div class="line"></div><div class="line"><span class="keyword">package</span> com.djlink.iot.sdk.cmd;</div></pre></td></tr></table></figure></li><li><p>文件注释内容：描述信息、创建日期、创建人、修改日期、修改人、版权说明 (可选)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line"> *  版权：Copyright xxx. All Rights Reserved.</div><div class="line"> *  描述：&lt;描述该文件功能&gt;</div><div class="line"> *  创建人：&lt;修改人名 邮箱&gt;</div><div class="line"> *  创建时间：yyyy-MM-dd</div><div class="line"> *  修改人：&lt;修改人名 邮箱&gt;</div><div class="line"> *  修改时间：yyyy-MM-dd</div><div class="line"> *  修改内容：&lt;修改内容&gt;</div><div class="line"> */</div></pre></td></tr></table></figure><p>每次修改后在文件头部写明修改信息。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line"> *  版权：Copyright xxx. All Rights Reserved.</div><div class="line"> *  描述：&lt;描述该文件功能&gt;</div><div class="line"> *  创建人：&lt;修改人名 邮箱&gt;</div><div class="line"> *  创建时间：yyyy-MM-dd</div><div class="line"> *  修改人：&lt;修改人名x 邮箱&gt;</div><div class="line"> *  修改时间：yyyy-MM-dd</div><div class="line"> *  修改内容：&lt;修改内容x&gt;</div><div class="line"> *  修改人：&lt;修改人名y 邮箱&gt;</div><div class="line"> *  修改时间：yyyy-MM-dd</div><div class="line"> *  修改内容：&lt;修改内容y&gt;</div><div class="line"> */</div></pre></td></tr></table></figure></li></ul><h2 id="类和接口的注释"><a href="#类和接口的注释" class="headerlink" title="类和接口的注释"></a>类和接口的注释</h2><ul><li><p>注释位置：该注释放在 <code>package</code> 关键字之后，<code>class</code> 或者 <code>interface</code> 关键字之前。方便 <code>JavaDoc</code> 收集。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.djlink.iot.sdk.cmd;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> *  注释内容</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CommandManager</span></span></div></pre></td></tr></table></figure></li><li><p>注释内容：类的注释主要是一句话功能简述、功能详细描述。</p><blockquote><p>说明：可根据需要列出: 版本号、生成日期、作者、内容、功能、与其它类的关系等。如果一个类存在BUG，请如实说明这些BUG。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * （一句话功能简述）</div><div class="line"> * （功能详细描述）</div><div class="line"> *  <span class="doctag">@author</span> [作者]</div><div class="line"> *  <span class="doctag">@version</span> [版本号，YYYY-MM-DD]</div><div class="line"> *  <span class="doctag">@see</span> [相关类/方法]</div><div class="line"> *  <span class="doctag">@since</span> [产品/模块版本]</div><div class="line"> *  <span class="doctag">@deprecated</span></div><div class="line"> */</div></pre></td></tr></table></figure><p>说明：可根据需要列出: 版本号、生成日期、作者、内容、功能、与其它类的关系等。如果一个类存在BUG，请如实说明这些BUG。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> *  版权：Copyright xxx. All Rights Reserved.</div><div class="line"> *  描述：&lt;描述该文件功能&gt;</div><div class="line"> *  创建人：&lt;修改人名 邮箱&gt;</div><div class="line"> *  创建时间：yyyy-MM-dd</div><div class="line"> *  修改人：&lt;修改人名 邮箱&gt;</div><div class="line"> *  修改时间：yyyy-MM-dd</div><div class="line"> *  修改内容：&lt;修改内容&gt;</div><div class="line"> */</div></pre></td></tr></table></figure></blockquote></li></ul><h2 id="成员变量和方法的注释"><a href="#成员变量和方法的注释" class="headerlink" title="成员变量和方法的注释"></a>成员变量和方法的注释</h2><ul><li><p>注释位置：写在类属性、公有和保护方法上面。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> *  注释内容</div><div class="line"> */</div><div class="line"><span class="keyword">private</span> String logType;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> *  注释内容</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">()</span></span>;</div></pre></td></tr></table></figure></li><li><p>成员变量注释内容：成员变量的意义、目的、功能，可能被用到的地方。</p></li><li><p>成员方法（public &amp; protected）注释内容：<br>列出方法的一句话功能简述、功能详细描述、输入参数、输出参数、返回值、违例等。</p><ul><li>格式：<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * （一句话功能简述）</div><div class="line"> * （功能详细描述）</div><div class="line"> *  <span class="doctag">@param</span> [参数1] [参数1说明]</div><div class="line"> *  <span class="doctag">@param</span> [参数2] [参数2说明]</div><div class="line"> *  <span class="doctag">@return</span> [返回类型说明]</div><div class="line"> *  <span class="doctag">@exception</span>/throws [违例类型][违例说明]</div><div class="line"> *  <span class="doctag">@see</span> [类、类#方法、类#成员]</div><div class="line"> *  <span class="doctag">@deprecated</span></div><div class="line"> */</div></pre></td></tr></table></figure></li></ul><blockquote><p>说明：@since 表示从哪个版本开始就有这个方法；<br>@exception 或 throws 列出可能仍出的异常；<br>@deprecated 表示不建议使用该方法</p></blockquote><ul><li>示例：<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> *  根据日志类型和时间读取日志。</div><div class="line"> *</div><div class="line"> *  分配对应日志类型的 LogReader，指定类型、查询时间段、条件和反复器缓冲数，读取日志记录。</div><div class="line"> *  查询条件为 null 或 0 表示无限制，反复器缓冲数为 0 读不到日志</div><div class="line"> *  查询时间为左包含原则，即 [startTime, endTime]</div><div class="line"> *</div><div class="line"> *  <span class="doctag">@param</span> logTypeName 日志类型名（在配置文件中定义）</div><div class="line"> *  <span class="doctag">@param</span> startTime 查询日志的开始时间</div><div class="line"> *  <span class="doctag">@param</span> endTime 查询日志的结束时间</div><div class="line"> *  <span class="doctag">@param</span> logLevel 查询日志的级别</div><div class="line"> *  <span class="doctag">@param</span> userName 查询该用户的日志</div><div class="line"> *  <span class="doctag">@param</span> bufferNum 日志反复器缓冲记录数</div><div class="line"> *  <span class="doctag">@return</span> 结果集，日志反复器</div><div class="line"> *  <span class="doctag">@since</span> CommonLog1.0</div><div class="line"> */</div></pre></td></tr></table></figure></li></ul></li><li><p>对于方法内部用 <code>throw 语句</code> 抛出的异常，必须在方法的注释中标明。<br>对于所调用的其他方法所抛出的异常，选择主要的在注释中说明。<br>对于<code>非 RuntimeException</code>，即throws子句声明会抛出异常，<strong>必须</strong> 在方法的注释中标明。</p><blockquote><p>说明：异常注释用 <code>@exception</code> 或 <code>@throws</code> 表示，在 <code>JavaDoc</code> 中两者等价，但推荐用 <code>@exception</code> 标注 <code>Runtime</code> 异常。<code>@throws</code>标注 <code>非Runtime</code> 异常。异常的注释必须说明该异常的含义及什么条件下抛出该异常。</p></blockquote></li></ul><h2 id="代码中的注释"><a href="#代码中的注释" class="headerlink" title="代码中的注释"></a>代码中的注释</h2><ul><li>注释应与其描述的代码相近，对代码的注释应放在其上方或右方（对单条语句的注释）相邻位置，不可放在下面，如放于上方则需与其上面的代码用空行隔开。</li><li><p>注释与所描述内容进行同样的缩排</p><blockquote><p>说明：可使程序排版整齐，并方便注释的阅读与理解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">example</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="comment">//注释</span></div><div class="line">  CodeBlock One</div><div class="line"></div><div class="line">    <span class="comment">//注释</span></div><div class="line">  CodeBlock One</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>应该为如下布局：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">example</span><span class="params">()</span> </span>&#123;</div><div class="line">  <span class="comment">//注释</span></div><div class="line">  CodeBlock One</div><div class="line"></div><div class="line">  <span class="comment">//注释</span></div><div class="line">  CodeBlock One</div><div class="line">&#125;</div></pre></td></tr></table></figure></blockquote></li><li><p>注释与其上面的代码用空行隔开</p><blockquote><p>示例：如下例子，显得代码过于紧凑</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//注释</span></div><div class="line">code one</div><div class="line"><span class="comment">//注释</span></div><div class="line">code two</div></pre></td></tr></table></figure><p>应如下书写</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//注释</span></div><div class="line">code one</div><div class="line"></div><div class="line"><span class="comment">//注释</span></div><div class="line">code two</div></pre></td></tr></table></figure></blockquote></li><li><p>对 <code>变量的定义</code> 和 <code>分支语句</code>（条件分支、循环语句等）必须编写注释</p><blockquote><p>说明：这些语句往往是程序实现某一特定功能的关键，对于维护人员来说，良好的注释帮助更好的理解程序，有时甚至优于看设计文档</p></blockquote></li><li><p>若覆盖基类的方法，则可以不写方法注释，但必须用@Override标出，例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;&#125;</div></pre></td></tr></table></figure></li><li><p><code>switch … case</code> 的每个条件，如果没有用明确语义的 <code>enum</code> 或者 <code>string</code>，需要添加简短说明，例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">switch</span> (type) &#123;</div><div class="line"><span class="keyword">case</span> <span class="number">1</span>:<span class="comment">// Android apps</span></div><div class="line">      <span class="keyword">break</span>;</div><div class="line"><span class="keyword">case</span> <span class="number">2</span>:<span class="comment">// Android games</span></div><div class="line">      <span class="keyword">break</span>;</div><div class="line"><span class="keyword">case</span> <span class="number">3</span>:<span class="comment">// iOS apps</span></div><div class="line">      <span class="keyword">break</span>;</div><div class="line"><span class="keyword">default</span>:<span class="comment">// Not a valid package</span></div><div class="line">      <span class="keyword">break</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>对于 <code>switch</code> 语句下的 <code>case</code> 语句，如果因为特殊情况需要处理完一个 <code>case</code> 后进入下一个 <code>case</code> 处理，必须在该 <code>case</code> 语句处理完，下一个 <code>case</code> 语句前加上明确的注释。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">switch</span> (type) &#123;</div><div class="line"><span class="keyword">case</span> <span class="number">1</span>:   <span class="comment">// Android apps</span></div><div class="line">    <span class="comment">// 再进入下一个case处理</span></div><div class="line"><span class="keyword">case</span> <span class="number">2</span>:   <span class="comment">// iOS apps</span></div><div class="line">      <span class="keyword">break</span>;</div><div class="line"><span class="keyword">default</span>:</div><div class="line">      <span class="keyword">break</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li></ul><ul><li><p>边写代码边注释，修改代码同时修改相应的注释，以保证注释与代码的一致性。不再有用的注释要删除。</p></li><li><p>注释的内容要清楚、明了，含义准确，防止注释二义性</p><blockquote><p>错误的注释不但无益，反而有害</p></blockquote></li><li><p>避免在注释中使用缩写，特别是不常用的缩写</p><blockquote><p>在使用缩写时或之前，应对缩写进行必要的说明</p></blockquote></li><li><p>对于未完成的方法，使用TODO加以标记，例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">byte</span>[] buf, File file)</span> </span>&#123;</div><div class="line">  <span class="comment">// <span class="doctag">TODO:</span> Write buf to file</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>若代码存在严重问题或仅用于调试，使用 <code>FIXME</code> 加以标记（注：存在 <code>FIXME</code> 标记的代码不能作为正式版发布）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">login</span><span class="params">(String name, String pwd)</span> </span>&#123;</div><div class="line">      <span class="comment">//<span class="doctag">FIXME:</span> Remove this line before publishing</span></div><div class="line">      System.out.println(<span class="string">"name="</span> + name + <span class="string">", password="</span> + pwd);</div><div class="line">      <span class="keyword">if</span> (users.containsKey(name) &amp;&amp; users.get(name).equals(pwd))</div><div class="line">      <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">      <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">  &#125;</div></pre></td></tr></table></figure></li></ul><h2 id="建议-1"><a href="#建议-1" class="headerlink" title="建议"></a>建议</h2><ul><li>快速生成注释的快捷键：( IntelliJ / Eclipse )<blockquote><p>Mac: <code>⌥ + ⌘ + J</code><br>Windows/Linux: <code>Ctrl + Alt + J</code></p></blockquote></li><li>避免在一行代码或表达式的中间插入注释<blockquote><p>除非必要，不应在代码或表达中间插入注释，否则容易使代码可理解性变差。</p></blockquote></li><li>通过对函数或过程、变量、结构等正确的命名以及合理地组织代码的结构，使代码成为自注释的<blockquote><p>清晰准确的函数、变量等的命名，可增加代码可读性，并减少不必要的注释。</p></blockquote></li><li><p>在代码的功能、意图层次上进行注释，提供有用、额外的信息。</p><blockquote><p>注释的目的是解释代码的目的、功能和采用的方法，提供代码以外的信息，帮助读者理解代码，防止没必要的重复注释信息。</p></blockquote></li><li><p>在程序块的结束行右方加注释标记，以表明某程序块的结束。</p><blockquote><p>当代码段较长，特别是多重嵌套时，这样做可以是代码更清晰，更便于阅读。</p><ul><li>示例：参见如下例子<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (...) &#123;</div><div class="line">  <span class="function">code1</span></div><div class="line"></div><div class="line">  <span class="title">while</span><span class="params">(index &lt; MAX_INDEX)</span> &#123;</div><div class="line">    code2</div><div class="line">  &#125; <span class="comment">//end of while (index &lt; MAX_INDEX)  // 指明该条 while 语句结束</span></div><div class="line">&#125; <span class="comment">//end of if (...)    // 指明是哪条 if 语句结束</span></div></pre></td></tr></table></figure></li></ul></blockquote></li><li><p>注释应该考虑程序易读及外观排版的因素，使用的语言若是中、英兼有的，建议多使用中文，除非能用非常流利准确的英语表达。</p><blockquote><p>注释语言不统一，影响程序易读性和外观排版，处于维护的考虑，建议使用中文</p></blockquote></li><li><p>方法内的单行注释使用 <code>//</code></p><blockquote><p>调试程序的时候可以方便的使用 <code>/* ... */</code> 注释掉一长段程序</p></blockquote></li><li><p>注释尽量使用中文注释和中文标点。方法和类描述的第一句话尽量使用简洁明了的话概况以下功能，然后加以句号。接下来的部分可以详细描述。</p><blockquote><p>JavaDoc 工具收集简介的时候使用选取第一句话</p></blockquote></li><li><p>顺序实现流程的说明使用 <code>1、2、3、4</code> 在每个实现步骤部分的代码前面进行注释。</p><blockquote><p>示例：如下是对设置属性的流程注释</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//1. 判断输入参数是否有效</span></div><div class="line">...</div><div class="line"><span class="comment">//2. 设置本地变量</span></div><div class="line">...</div></pre></td></tr></table></figure></blockquote></li><li><p>一些复杂的 <code>代码</code> 和 <code>算法</code> 需要说明</p><blockquote><p>示例：对闰年算法的说明</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//1. 如果能被4整除，是闰年</span></div><div class="line"><span class="comment">//2. 如果能被100整除，不是闰年</span></div><div class="line"><span class="comment">//3. 如果能被400整除，是闰年</span></div></pre></td></tr></table></figure></blockquote></li></ul><h1 id="编码规范"><a href="#编码规范" class="headerlink" title="编码规范"></a>编码规范</h1><h2 id="规则-1"><a href="#规则-1" class="headerlink" title="规则"></a>规则</h2><ul><li><p>方法功能明确 —— 精确（而不是近似）地实现方法设计。一个函数仅完成一件功能，即使简单功能也应该编写方法实现。</p><blockquote><p>虽然为仅用一两行就可完成的功能去编方法好像没有必要，但用方法可使功能明确化，增加程序的可读性，亦可方便维护、测试。</p></blockquote></li><li><p>类功能明确 —— 精确（而非近似）地实现类的设计。一个类仅实现一组相近的功能。</p><blockquote><p>划分类的时候，应该尽量把逻辑处理、数据和显示分离，实现类功能的单一性。</p></blockquote></li><li><p>参数合法性检查 —— 规定对接口方法参数的合法性检查应由方法的调用者负责还是由接口方法本身负责，缺省是 <code>由方法调用者负责</code>。</p><blockquote><p>对于模块间接口方法的参数的合法性检查这一问题，往往有两个极端现象，即：要么是调用者和被调用者对参数均不作合法性检查，结果就遗漏了合法性检查这一必要的处理过程，造成问题隐患。要么就是调用者和被调用者均对参数进行合法性检查，这种情况虽然不会造成问题，但产生了冗余代码，降低了效率。</p></blockquote></li><li><p>类成员排序规范</p><p>关于这个并没有硬性要求，不过好的排序方式，能够提高可读性和易学性。这里给出一些排序建议：</p></li></ul><blockquote><ol><li>常量</li><li>字段</li><li>构造函数</li><li>被重写的函数（不区分修饰符类型）</li><li>被 private 修饰的函数</li><li>被 public 修饰的函数</li><li>被定义的内部类或者接口</li></ol></blockquote><ul><li><p>所有的数据类必须重载 <code>toString()</code> 方法，返回该类有意义的内容。方便调试与日志打印。</p><blockquote><p>父类如果实现了比较合理的 <code>toString()</code>，子类可以继承不必再重写。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> TopoNode &#123;</div><div class="line">  <span class="keyword">private</span> String nodeName;</div><div class="line">  </div><div class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="string">"NodeName: "</span> + nodeName;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></blockquote></li><li><p>注解使用规范</p><ul><li><code>@Override</code>： 子类实现或者重写父类方法时，必须使用<code>@Override</code>对函数进行标注。</li><li><code>@SuppressWarnings</code>： 注解<code>@SuppressWarnings</code>应该用在消除那些明确不可能发生的警告上，示例如下：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//明确的类型安全（type-safe）转换</span></div><div class="line"><span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;R&gt; <span class="function">FeedbackUseCase&lt;R&gt; <span class="title">createdUseCase</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> (FeedbackUseCase&lt;R&gt;) <span class="keyword">new</span> FeedbackUseCase();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//请先确保能够非常正确地使用Handler</span></div><div class="line"><span class="meta">@SuppressWarnings</span>(<span class="string">"handlerLeak"</span>)</div><div class="line"><span class="keyword">private</span> Handler mHandler = <span class="keyword">new</span> Handler() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.handleMessage(msg);</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure><p>更多关于注解的使用技巧与规范请参考<a href="http://source.android.com/source/code-style.html#use-standard-java-annotations" target="_blank" rel="external">这里</a>。</p></li></ul><ul><li><p>数组声明的时候使用 <code>int[] index</code>，而不要使用 <code>int index[]</code></p><blockquote><p>使用 <code>int index[]</code> 格式使程序的可读性较差</p><p>如下程序可读性差：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getIndex</span><span class="params">()</span> [] </span>&#123;</div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>如下程序可读性好：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">int</span>[] getIndex() &#123;</div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure></blockquote></li><li><p>注意运算符的优先级，并用括号明确表达式的操作顺序，避免使用默认优先级。</p><blockquote><p>防止阅读程序时产生误解，防止因默认的优先级与设计思想不符而导致程序出错。</p></blockquote></li><li><p>避免使用不易理解的数字，用有意义的标识来替代。涉及物理状态或者含有物理意义的常量，不应直接使用数字，必须用有意义的静态变量来代替。</p><blockquote><p>示例：如下的程序可读性差</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (state == <span class="number">0</span>) &#123;</div><div class="line">    state = <span class="number">1</span>;</div><div class="line">    <span class="comment">//... </span></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>应改为如下形式:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">int</span> TRUNK_IDLE = <span class="number">0</span>;</div><div class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">int</span> TRUNK_BUSY = <span class="number">1</span>;</div><div class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">int</span> TRUNK_UNKNOWN = -<span class="number">1</span>;</div><div class="line"></div><div class="line"><span class="keyword">if</span> (state == TRUNK_IDLE) &#123;</div><div class="line">    state = TRUNK_BUSY;</div><div class="line">    <span class="comment">//... </span></div><div class="line">&#125;</div></pre></td></tr></table></figure></blockquote></li></ul><ul><li><p>数据库操作、IO操作等需要使用结束 <code>close()</code> 的对象必须在 <code>try - catch - finally</code> 的 <code>finally</code> 中调用 <code>close()</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">    <span class="comment">//... ...</span></div><div class="line">&#125; <span class="keyword">catch</span> (IOException ioe) &#123;</div><div class="line">    <span class="comment">//... ...</span></div><div class="line">&#125; <span class="keyword">finally</span> &#123;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        out.close();</div><div class="line">    &#125; <span class="keyword">catch</span> (IOException ioe) &#123;</div><div class="line">        <span class="comment">//... ...</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>异常捕获后，如果不对该异常进行处理，则应该记录日志或者 <code>ex.printStackTrace()</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">    <span class="comment">//... ...</span></div><div class="line">&#125; <span class="keyword">catch</span> (IOException ioe) &#123;</div><div class="line">    ioe.printStackTrace();</div><div class="line">&#125;</div></pre></td></tr></table></figure></li></ul><ul><li><p>自己抛出的异常必须要填写详细的描述信息，便于问题定位。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">throw</span> <span class="keyword">new</span> IOException(<span class="string">"Writing data error! Data: "</span> + data.toString());</div></pre></td></tr></table></figure></li><li><p>运行期异常使用 <code>RuntimeException</code> 的子类来表示，不用在可能抛出异常的方法声明上加 <code>throws</code> 子句。非运行期异常是从 <code>Exception</code> 继承而来，必须在方法声明上加 <code>throws</code> 子句。</p></li><li><p>在程序中使用异常处理还是使用错误返回码处理，根据是否有利于程序结构来确定，并且异常和错误码不应混合使用，<strong>推荐使用异常</strong>。</p><blockquote><p>一个系统或者模块应该统一规划异常类型和返回码的含义。</p><p>但是不能用异常来做一般流程的方式，<strong>不要过多地使用异常</strong>，异常的处理效率比条件分支低，而且异常的跳转流程难以预测。</p></blockquote></li></ul><h2 id="建议-2"><a href="#建议-2" class="headerlink" title="建议"></a>建议</h2><ul><li><p><code>@Override</code> 能用则用。只要是合法的，就把 <code>@Override</code> 注解给用上。</p></li><li><p>记录异常不要保存 exception.getMessgae()，而要记录 exception.toString()</p><blockquote><p>NullPointException 抛出异常时常常描述为空，这样往往看不出是出了什么错。</p></blockquote></li><li><p>一个方法不应抛出太多类型的异常</p><blockquote><p>如果程序中需要分类处理，则将异常根据分类组织成继承关系。如果确实有很多异常类型首先考虑用异常描述来区别，<code>throws/exception</code> 子句标明的异常最好不要超过三个</p></blockquote></li><li><p>异常捕获尽量不要直接 <code>catch(Exception ex)</code>，应该把异常细分处理。</p></li><li><p>如果多段代码重复做同一件事情，那么在方法的划分上可能存在问题</p><blockquote><p>若此段代码各语句之间有实质性关联并且是完成同一件功能的，那么可考虑把此段代码构造成一个新的方法。</p></blockquote></li><li><p>集合中的数据如果不适用了应该及时释放，尤其是可重复使用的集合。</p><blockquote><p>由于集合保存了对象的句柄，虚拟机的垃圾收集器就不会回收。</p></blockquote></li><li><p>源程序中关系较为紧密的代码应尽可能相邻</p><blockquote><p>便于程序阅读和查找。</p></blockquote></li><li><p>不要使用难懂的技巧性很高的语句，除非很有必要时</p><blockquote><p>高技巧语句不等于高效率的程序，实际上程序的效率关键在于算法。</p></blockquote></li></ul><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="http://www.hawstein.com/posts/google-java-style.html" target="_blank" rel="external">Google Java编程风格指南</a></li><li><a href="http://wenku.baidu.com/link?url=VdW3Q-oxZZGwr_CQzyZnjdNyNlez5IbAAIPpu8448rM8_FyDWKECTjlKrj5cuX3DANoCRQC2Ge8opkHXafBIy4v8fyll4GQDKLMbsGORwAq" target="_blank" rel="external">华为java编程规范</a></li><li><a href="https://source.android.com/source/code-style.html" target="_blank" rel="external">Android-Open-Source-Project Code Style</a><br>（<a href="http://blog.sina.com.cn/s/blog_48d491300100zwzg.html#use-todo-comments" target="_blank" rel="external">中文版</a>）</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;格式规范&quot;&gt;&lt;a href=&quot;#格式规范&quot; class=&quot;headerlink&quot; title=&quot;格式规范&quot;&gt;&lt;/a&gt;格式规范&lt;/h1&gt;&lt;h2 id=&quot;文档排版规范&quot;&gt;&lt;a href=&quot;#文档排版规范&quot; class=&quot;headerlink&quot; title=&quot;文档排版规范&quot;&gt;&lt;/a&gt;文档排版规范&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;文档层面的结构包括：&lt;code&gt;括号风格&lt;/code&gt;, &lt;code&gt;缩进&lt;/code&gt;, &lt;code&gt;列限制&lt;/code&gt;, &lt;code&gt;换行&lt;/code&gt;, &lt;code&gt;空格&lt;/code&gt;, &lt;code&gt;空行&lt;/code&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 id=&quot;具体结构规范&quot;&gt;&lt;a href=&quot;#具体结构规范&quot; class=&quot;headerlink&quot; title=&quot;具体结构规范&quot;&gt;&lt;/a&gt;具体结构规范&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;具体结构包括：&lt;code&gt;枚举&lt;/code&gt;, &lt;code&gt;变量&lt;/code&gt;, &lt;code&gt;数组&lt;/code&gt;, &lt;code&gt;switch&lt;/code&gt;, &lt;code&gt;注解&lt;/code&gt;, &lt;code&gt;注释&lt;/code&gt;, &lt;code&gt;修饰符&lt;/code&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 id=&quot;CodeStyle-配置&quot;&gt;&lt;a href=&quot;#CodeStyle-配置&quot; class=&quot;headerlink&quot; title=&quot;CodeStyle 配置&quot;&gt;&lt;/a&gt;CodeStyle 配置&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;统一用 &lt;a href=&quot;https://djlinkiot.github.io/2016/11/26/android-studio-code-style-check-style/&quot;&gt;Android Studio CodeStyle 配置&lt;/a&gt; 来规范所有格式&lt;/li&gt;&lt;/ul&gt;
    
    </summary>
    
      <category term="Java" scheme="https://djlinkiot.github.io/categories/Java/"/>
    
      <category term="Coding Rule" scheme="https://djlinkiot.github.io/categories/Java/Coding-Rule/"/>
    
    
      <category term="Coding Rule" scheme="https://djlinkiot.github.io/tags/Coding-Rule/"/>
    
      <category term="Java" scheme="https://djlinkiot.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Docker 安装 &amp; 配置教程 (Windows + Linux + Mac)</title>
    <link href="https://djlinkiot.github.io/2016/12/02/docker-install-multi-system/"/>
    <id>https://djlinkiot.github.io/2016/12/02/docker-install-multi-system/</id>
    <published>2016-12-02T19:48:34.000Z</published>
    <updated>2016-12-22T09:16:24.474Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Windows-环境下安装-Docker"><a href="#Windows-环境下安装-Docker" class="headerlink" title="Windows 环境下安装 Docker"></a>Windows 环境下安装 Docker</h1><p>如果是在 <code>Linux</code> 系统安装 Docker，则比较简单，因为 Docker 就是基于 Linux 内核来进行容器化与资源隔离的，可以直接通过命令安装使用。</p><p>对于 <code>Windows</code> 来说，稍有些麻烦，但目前 Docker 也提供了支持，且在不断完善。安装之前首先需要看一下你的 <code>Windows版本</code>，分两种情况，一种是 <code>Windows 10 64位专业版</code>，一种是其他版本（比如很多人仍然推崇的 <code>Win7</code>）。</p><a id="more"></a><p><code>Windows 10 64位专业版</code> 可以直接支持安装 <code>Docker原生版</code>，性能最好，体验最佳。</p><p><code>其他版本（比如 Win7）</code> 只能使用 Docker 官方提供的一种过度技术 <code>Docker ToolBox</code>，这种技术不得不依赖Oracle的 <code>Virtualbox</code> 以在你的系统里创建一个虚拟机用以模拟Linux运行环境，好在封装的比较好，基本可以忽略这个虚拟机的存在，只需专心使用Docker即可。</p><h2 id="在Windows-10-64位专业版的安装-（建议）"><a href="#在Windows-10-64位专业版的安装-（建议）" class="headerlink" title="在Windows 10 64位专业版的安装 （建议）"></a>在Windows 10 64位专业版的安装 （建议）</h2><h3 id="CPU虚拟化与Hyper-v"><a href="#CPU虚拟化与Hyper-v" class="headerlink" title="CPU虚拟化与Hyper-v"></a>CPU虚拟化与Hyper-v</h3><p>安装Docker前，需要确定两个基础环境：</p><ul><li>CPU支持虚拟化（一般都支持，如果在操作系统中没看到，则可以手动到BIOS里打开，如果实在不支持，换台新的电脑吧），具体可以通过任务管理器查看，如图</li></ul><img src="/2016/12/02/docker-install-multi-system/docker-win10-cpu-virtual.png" alt="docker-win10-cpu-virtual" title="docker-win10-cpu-virtual"><p>你的操作系统需要开启Hyper-V，如图</p><img src="/2016/12/02/docker-install-multi-system/docker-win10-hyperv.png" alt="docker-win10-hyperv" title="docker-win10-hyperv"><h3 id="安装包"><a href="#安装包" class="headerlink" title="安装包"></a>安装包</h3><p>然后到官方网站下载安装包直接安装即可</p><h2 id="非Windows-10-64位专业版（无法使用原生Docker）的安装"><a href="#非Windows-10-64位专业版（无法使用原生Docker）的安装" class="headerlink" title="非Windows 10 64位专业版（无法使用原生Docker）的安装"></a>非Windows 10 64位专业版（无法使用原生Docker）的安装</h2><h1 id="Docker配置"><a href="#Docker配置" class="headerlink" title="Docker配置"></a>Docker配置</h1><h1 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h1><ul><li><a href="http://www.jianshu.com/p/490884917c4d" target="_blank" rel="external">Docker环境在windows系统下的安装与配置</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Windows-环境下安装-Docker&quot;&gt;&lt;a href=&quot;#Windows-环境下安装-Docker&quot; class=&quot;headerlink&quot; title=&quot;Windows 环境下安装 Docker&quot;&gt;&lt;/a&gt;Windows 环境下安装 Docker&lt;/h1&gt;&lt;p&gt;如果是在 &lt;code&gt;Linux&lt;/code&gt; 系统安装 Docker，则比较简单，因为 Docker 就是基于 Linux 内核来进行容器化与资源隔离的，可以直接通过命令安装使用。&lt;/p&gt;&lt;p&gt;对于 &lt;code&gt;Windows&lt;/code&gt; 来说，稍有些麻烦，但目前 Docker 也提供了支持，且在不断完善。安装之前首先需要看一下你的 &lt;code&gt;Windows版本&lt;/code&gt;，分两种情况，一种是 &lt;code&gt;Windows 10 64位专业版&lt;/code&gt;，一种是其他版本（比如很多人仍然推崇的 &lt;code&gt;Win7&lt;/code&gt;）。&lt;/p&gt;
    
    </summary>
    
      <category term="Ops" scheme="https://djlinkiot.github.io/categories/Ops/"/>
    
      <category term="Docker" scheme="https://djlinkiot.github.io/categories/Ops/Docker/"/>
    
    
      <category term="Docker" scheme="https://djlinkiot.github.io/tags/Docker/"/>
    
      <category term="Ops" scheme="https://djlinkiot.github.io/tags/Ops/"/>
    
      <category term="DevOps" scheme="https://djlinkiot.github.io/tags/DevOps/"/>
    
  </entry>
  
  <entry>
    <title>Android 开发人员不得不收集的代码</title>
    <link href="https://djlinkiot.github.io/2016/11/30/android-tips-code-utils/"/>
    <id>https://djlinkiot.github.io/2016/11/30/android-tips-code-utils/</id>
    <published>2016-11-30T15:06:56.000Z</published>
    <updated>2016-12-22T09:16:24.474Z</updated>
    
    <content type="html"><![CDATA[<p>(<a href="https://github.com/Blankj/AndroidUtilCode/blob/master/update_log.md" target="_blank" rel="external">持续更新中</a>)</p><p>为方便查找，已进行大致归类，其目录如下所示：</p><blockquote><ul><li><strong>Activity相关→<a href="https://github.com/Blankj/AndroidUtilCode/blob/master/utilcode/src/main/java/com/blankj/utilcode/utils/ActivityUtils.java" target="_blank" rel="external">ActivityUtils.java</a>→<a href="https://github.com/Blankj/AndroidUtilCode/blob/master/app/src/main/java/com/blankj/androidutilcode/activities/ActivityActivity.java" target="_blank" rel="external">Demo</a></strong></li></ul></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">isActivityExists    : 判断是否存在Activity</div><div class="line">launchActivity      : 打开Activity</div><div class="line">getLauncherActivity : 获取入口activity</div></pre></td></tr></table></figure><a id="more"></a><blockquote><ul><li><p><strong>App相关→<a href="https://github.com/Blankj/AndroidUtilCode/blob/master/utilcode/src/main/java/com/blankj/utilcode/utils/AppUtils.java" target="_blank" rel="external">AppUtils.java</a>→<a href="https://github.com/Blankj/AndroidUtilCode/blob/master/app/src/main/java/com/blankj/androidutilcode/activities/AppActivity.java" target="_blank" rel="external">Demo</a></strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">isInstallApp          : 判断App是否安装</div><div class="line">installApp            : 安装App（支持6.0）</div><div class="line">installAppSilent      : 静默安装App</div><div class="line">uninstallApp          : 卸载App</div><div class="line">uninstallAppSilent    : 静默卸载App</div><div class="line">isAppRoot             : 判断App是否有root权限</div><div class="line">launchApp             : 打开App</div><div class="line">closeApp              : 关闭App</div><div class="line">getAppPackageName     : 获取App包名</div><div class="line">getAppDetailsSettings : 获取App具体设置</div><div class="line">getAppName            : 获取App名称</div><div class="line">getAppIcon            : 获取App图标</div><div class="line">getAppPath            : 获取App路径</div><div class="line">getAppVersionName     : 获取App版本号</div><div class="line">getAppVersionCode     : 获取App版本码</div><div class="line">isSystemApp           : 判断App是否是系统应用</div><div class="line">isAppDebug            : 判断App是否是Debug版本</div><div class="line">getAppSignature       : 获取App签名</div><div class="line">getAppSignatureSHA1   : 获取应用签名的的SHA1值</div><div class="line">isAppForeground       : 判断App是否处于前台</div><div class="line">getForegroundApp      : 获取前台应用包名</div><div class="line">getAppInfo            : 获取App信息</div><div class="line">getAppsInfo           : 获取所有已安装App信息</div><div class="line">cleanAppData          : 清除App所有数据</div></pre></td></tr></table></figure></li><li><p><strong>栏相关→<a href="https://github.com/Blankj/AndroidUtilCode/blob/master/utilcode/src/main/java/com/blankj/utilcode/utils/BarUtils.java" target="_blank" rel="external">BarUtils.java</a></strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">setTransparentStatusBar : 设置透明状态栏（api大于19方可使用）</div><div class="line">hideStatusBar           : 隐藏状态栏</div><div class="line">getStatusBarHeight      : 获取状态栏高度</div><div class="line">isStatusBarExists       : 判断状态栏是否存在</div><div class="line">getActionBarHeight      : 获取ActionBar高度</div><div class="line">showNotificationBar     : 显示通知栏</div><div class="line">hideNotificationBar     : 隐藏通知栏</div></pre></td></tr></table></figure></li><li><p><strong>清除相关→<a href="https://github.com/Blankj/AndroidUtilCode/blob/master/utilcode/src/main/java/com/blankj/utilcode/utils/CleanUtils.java" target="_blank" rel="external">CleanUtils.java</a>→<a href="https://github.com/Blankj/AndroidUtilCode/blob/master/app/src/main/java/com/blankj/androidutilcode/activities/CleanActivity.java" target="_blank" rel="external">Demo</a></strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">cleanInternalCache    : 清除内部缓存</div><div class="line">cleanInternalFiles    : 清除内部文件</div><div class="line">cleanInternalDbs      : 清除内部数据库</div><div class="line">cleanInternalDbByName : 根据名称清除数据库</div><div class="line">cleanInternalSP       : 清除内部SP</div><div class="line">cleanExternalCache    : 清除外部缓存</div><div class="line">cleanCustomCache      : 清除自定义目录下的文件</div></pre></td></tr></table></figure></li><li><p><strong>剪贴板相关→<a href="https://github.com/Blankj/AndroidUtilCode/blob/master/utilcode/src/main/java/com/blankj/utilcode/utils/ClipboardUtils.java" target="_blank" rel="external">ClipboardUtils.java</a></strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">copyText   : 复制文本到剪贴板</div><div class="line">getText    : 获取剪贴板的文本</div><div class="line">copyUri    : 复制uri到剪贴板</div><div class="line">getUri     : 获取剪贴板的uri</div><div class="line">copyIntent : 复制意图到剪贴板</div><div class="line">getIntent  : 获取剪贴板的意图</div></pre></td></tr></table></figure></li><li><p><strong>关闭相关→<a href="https://github.com/Blankj/AndroidUtilCode/blob/master/utilcode/src/main/java/com/blankj/utilcode/utils/CloseUtils.java" target="_blank" rel="external">CloseUtils.java</a></strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">closeIO        : 关闭IO</div><div class="line">closeIOQuietly : 安静关闭IO</div></pre></td></tr></table></figure></li><li><p><strong>常量相关→<a href="https://github.com/Blankj/AndroidUtilCode/blob/master/utilcode/src/main/java/com/blankj/utilcode/utils/ConstUtils.java" target="_blank" rel="external">ConstUtils.java</a></strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">MemoryConst : 存储相关常量</div><div class="line">TimeConst   : 时间相关常量</div><div class="line">RegexConst  : 正则相关常量</div></pre></td></tr></table></figure></li><li><p><strong>转换相关→<a href="https://github.com/Blankj/AndroidUtilCode/blob/master/utilcode/src/main/java/com/blankj/utilcode/utils/ConvertUtils.java" target="_blank" rel="external">ConvertUtils.java</a>→<a href="https://github.com/Blankj/AndroidUtilCode/blob/master/utilcode/src/test/java/com/blankj/utilcode/utils/ConvertUtilsTest.java" target="_blank" rel="external">Test</a></strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">bytes2HexString, hexString2Bytes         : byteArr与hexString互转</div><div class="line">chars2Bytes, bytes2Chars                 : charArr与byteArr互转</div><div class="line">byte2Size, size2Byte                     : 字节数与unit为单位的size互转</div><div class="line">byte2FitSize                             : 字节数转合适大小</div><div class="line">bytes2Bits, bits2Bytes                   : bytes与bits互转</div><div class="line">input2OutputStream, output2InputStream   : inputStream与outputStream互转</div><div class="line">inputStream2Bytes, bytes2InputStream     : inputStream与byteArr互转</div><div class="line">outputStream2Bytes, bytes2OutputStream   : outputStream与byteArr互转</div><div class="line">inputStream2String, string2InputStream   : inputStream与string按编码互转</div><div class="line">outputStream2String, string2OutputStream : outputStream与string按编码互转</div><div class="line">bitmap2Bytes, bytes2Bitmap               : bitmap与byteArr互转</div><div class="line">drawable2Bitmap, bitmap2Drawable         : drawable与bitmap互转</div><div class="line">drawable2Bytes, bytes2Drawable           : drawable与byteArr互转</div><div class="line">view2Bitmap                              : view转Bitmap</div><div class="line">dp2px, px2dp                             : dp与px互转</div><div class="line">sp2px, px2sp                             : sp与px互转</div></pre></td></tr></table></figure></li><li><p><strong>崩溃相关→<a href="https://github.com/Blankj/AndroidUtilCode/blob/master/utilcode/src/main/java/com/blankj/utilcode/utils/CrashUtils.java" target="_blank" rel="external">CrashUtils.java</a></strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">getInstance : 获取单例</div><div class="line">init        : 初始化</div></pre></td></tr></table></figure></li><li><p><strong>设备相关→<a href="https://github.com/Blankj/AndroidUtilCode/blob/master/utilcode/src/main/java/com/blankj/utilcode/utils/DeviceUtils.java" target="_blank" rel="external">DeviceUtils.java</a>→<a href="https://github.com/Blankj/AndroidUtilCode/blob/master/app/src/main/java/com/blankj/androidutilcode/activities/DeviceActivity.java" target="_blank" rel="external">Demo</a></strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">isDeviceRoot      : 判断设备是否root</div><div class="line">getSDKVersion     : 获取设备系统版本号</div><div class="line">getAndroidID      : 获取设备AndroidID</div><div class="line">getMacAddress     : 获取设备MAC地址</div><div class="line">getManufacturer   : 获取设备厂商</div><div class="line">getModel          : 获取设备型号</div><div class="line">shutdown          : 关机</div><div class="line">reboot            : 重启</div><div class="line">reboot2Recovery   : 重启到recovery</div><div class="line">reboot2Bootloader : 重启到bootloader</div></pre></td></tr></table></figure></li><li><p><strong>判空相关→<a href="https://github.com/Blankj/AndroidUtilCode/blob/master/utilcode/src/main/java/com/blankj/utilcode/utils/EmptyUtils.java" target="_blank" rel="external">EmptyUtils.java</a>→<a href="https://github.com/Blankj/AndroidUtilCode/blob/master/utilcode/src/test/java/com/blankj/utilcode/utils/EmptyUtilsTest.java" target="_blank" rel="external">Test</a></strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">isEmpty    : 判断对象是否为空</div><div class="line">isNotEmpty : 判断对象是否非空</div></pre></td></tr></table></figure></li><li><p><strong>编码解码相关→<a href="https://github.com/Blankj/AndroidUtilCode/blob/master/utilcode/src/main/java/com/blankj/utilcode/utils/EncodeUtils.java" target="_blank" rel="external">EncodeUtils.java</a>→<a href="https://github.com/Blankj/AndroidUtilCode/blob/master/utilcode/src/test/java/com/blankj/utilcode/utils/EncodeUtilsTest.java" target="_blank" rel="external">Test</a></strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">urlEncode                         : URL编码</div><div class="line">urlDecode                         : URL解码</div><div class="line">base64Encode, base64Encode2String : Base64编码</div><div class="line">base64Decode                      : Base64解码</div><div class="line">base64UrlSafeEncode               : Base64URL安全编码</div><div class="line">htmlEncode                        : Html编码</div><div class="line">htmlDecode                        : Html解码</div></pre></td></tr></table></figure></li><li><p><strong>加密解密相关→<a href="https://github.com/Blankj/AndroidUtilCode/blob/master/utilcode/src/main/java/com/blankj/utilcode/utils/EncryptUtils.java" target="_blank" rel="external">EncryptUtils.java</a>→<a href="https://github.com/Blankj/AndroidUtilCode/blob/master/utilcode/src/test/java/com/blankj/utilcode/utils/EncryptUtilsTest.java" target="_blank" rel="external">Test</a></strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">encryptMD2, encryptMD2ToString                         : MD2加密</div><div class="line">encryptMD5, encryptMD5ToString                         : MD5加密</div><div class="line">encryptMD5File, encryptMD5File2String                  : MD5加密文件</div><div class="line">encryptSHA1, encryptSHA1ToString                       : SHA1加密</div><div class="line">encryptSHA224, encryptSHA224ToString                   : SHA224加密</div><div class="line">encryptSHA256, encryptSHA256ToString                   : SHA256加密</div><div class="line">encryptSHA384, encryptSHA384ToString                   : SHA384加密</div><div class="line">encryptSHA512, encryptSHA512ToString                   : SHA512加密</div><div class="line">encryptHmacMD5, encryptHmacMD5ToString                 : HmacMD5加密</div><div class="line">encryptHmacSHA1, encryptHmacSHA1ToString               : HmacSHA1加密</div><div class="line">encryptHmacSHA224, encryptHmacSHA224ToString           : HmacSHA224加密</div><div class="line">encryptHmacSHA256, encryptHmacSHA256ToString           : HmacSHA256加密</div><div class="line">encryptHmacSHA384, encryptHmacSHA384ToString           : HmacSHA384加密</div><div class="line">encryptHmacSHA512, encryptHmacSHA512ToString           : HmacSHA512加密</div><div class="line">encryptDES, encryptDES2HexString, encryptDES2Base64    : DES加密</div><div class="line">decryptDES, decryptHexStringDES, decryptBase64DES      : DES解密</div><div class="line">encrypt3DES, encrypt3DES2HexString, encrypt3DES2Base64 : 3DES加密</div><div class="line">decrypt3DES, decryptHexString3DES, decryptBase64_3DES  : 3DES解密</div><div class="line">encryptAES, encryptAES2HexString, encryptAES2Base64    : AES加密</div><div class="line">decryptAES, decryptHexStringAES, decryptBase64AES      : AES解密</div></pre></td></tr></table></figure></li><li><p><strong>文件相关→<a href="https://github.com/Blankj/AndroidUtilCode/blob/master/utilcode/src/main/java/com/blankj/utilcode/utils/FileUtils.java" target="_blank" rel="external">FileUtils.java</a>→<a href="https://github.com/Blankj/AndroidUtilCode/blob/master/utilcode/src/test/java/com/blankj/utilcode/utils/FileUtilsTest.java" target="_blank" rel="external">Test</a></strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line">getFileByPath                  : 根据文件路径获取文件</div><div class="line">isFileExists                   : 判断文件是否存在</div><div class="line">rename                         : 重命名文件</div><div class="line">isDir                          : 判断是否是目录</div><div class="line">isFile                         : 判断是否是文件</div><div class="line">createOrExistsDir              : 判断目录是否存在，不存在则判断是否创建成功</div><div class="line">createOrExistsFile             : 判断文件是否存在，不存在则判断是否创建成功</div><div class="line">createFileByDeleteOldFile      : 判断文件是否存在，存在则在创建之前删除</div><div class="line">copyDir                        : 复制目录</div><div class="line">copyFile                       : 复制文件</div><div class="line">moveDir                        : 移动目录</div><div class="line">moveFile                       : 移动文件</div><div class="line">deleteDir                      : 删除目录</div><div class="line">deleteFile                     : 删除文件</div><div class="line">listFilesInDir                 : 获取目录下所有文件</div><div class="line">listFilesInDir                 : 获取目录下所有文件包括子目录</div><div class="line">listFilesInDirWithFilter       : 获取目录下所有后缀名为suffix的文件</div><div class="line">listFilesInDirWithFilter       : 获取目录下所有后缀名为suffix的文件包括子目录</div><div class="line">listFilesInDirWithFilter       : 获取目录下所有符合filter的文件</div><div class="line">listFilesInDirWithFilter       : 获取目录下所有符合filter的文件包括子目录</div><div class="line">searchFileInDir                : 获取目录下指定文件名的文件包括子目录</div><div class="line">writeFileFromIS                : 将输入流写入文件</div><div class="line">writeFileFromString            : 将字符串写入文件</div><div class="line">getFileCharsetSimple           : 简单获取文件编码格式</div><div class="line">getFileLines                   : 获取文件行数</div><div class="line">readFile2List                  : 指定编码按行读取文件到List</div><div class="line">readFile2SB                    : 指定编码按行读取文件到StringBuilder中</div><div class="line">getDirSize                     : 获取目录大小</div><div class="line">getFileSize                    : 获取文件大小</div><div class="line">getDirLength                   : 获取目录长度</div><div class="line">getFileLength                  : 获取文件长度</div><div class="line">getFileMD5, getFileMD5ToString : 获取文件的MD5校验码</div><div class="line">getDirName                     : 根据全路径获取最长目录</div><div class="line">getFileName                    : 根据全路径获取文件名</div><div class="line">getFileNameNoExtension         : 根据全路径获取文件名不带拓展名</div><div class="line">getFileExtension               : 根据全路径获取文件拓展名</div></pre></td></tr></table></figure></li><li><p><strong>Handler相关→<a href="https://github.com/Blankj/AndroidUtilCode/blob/master/utilcode/src/main/java/com/blankj/utilcode/utils/HandlerUtils.java" target="_blank" rel="external">HandlerUtils.java</a>→<a href="https://github.com/Blankj/AndroidUtilCode/blob/master/app/src/main/java/com/blankj/androidutilcode/activities/HandlerActivity.java" target="_blank" rel="external">Demo</a></strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">HandlerHolder : 使用必读</div></pre></td></tr></table></figure></li><li><p><strong>图片相关→<a href="https://github.com/Blankj/AndroidUtilCode/blob/master/utilcode/src/main/java/com/blankj/utilcode/utils/ImageUtils.java" target="_blank" rel="external">ImageUtils.java</a>→<a href="https://github.com/Blankj/AndroidUtilCode/blob/master/app/src/main/java/com/blankj/androidutilcode/activities/ImageActivity.java" target="_blank" rel="external">Demo</a></strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">bitmap2Bytes, bytes2Bitmap       : bitmap与byteArr互转</div><div class="line">drawable2Bitmap, bitmap2Drawable : drawable与bitmap互转</div><div class="line">drawable2Bytes, bytes2Drawable   : drawable与byteArr互转</div><div class="line">getBitmap                        : 获取bitmap</div><div class="line">scale                            : 缩放图片</div><div class="line">clip                             : 裁剪图片</div><div class="line">skew                             : 倾斜图片</div><div class="line">rotate                           : 旋转图片</div><div class="line">getRotateDegree                  : 获取图片旋转角度</div><div class="line">toRound                          : 转为圆形图片</div><div class="line">toRoundCorner                    : 转为圆角图片</div><div class="line">fastBlur                         : 快速模糊</div><div class="line">renderScriptBlur                 : renderScript模糊图片</div><div class="line">stackBlur                        : stack模糊图片</div><div class="line">addFrame                         : 添加颜色边框</div><div class="line">addReflection                    : 添加倒影</div><div class="line">addTextWatermark                 : 添加文字水印</div><div class="line">addImageWatermark                : 添加图片水印</div><div class="line">toAlpha                          : 转为alpha位图</div><div class="line">toGray                           : 转为灰度图片</div><div class="line">save                             : 保存图片</div><div class="line">isImage                          : 根据文件名判断文件是否为图片</div><div class="line">getImageType                     : 获取图片类型</div><div class="line">compressByScale                  : 按缩放压缩</div><div class="line">compressByQuality                : 按质量压缩</div><div class="line">compressBySampleSize             : 按采样大小压缩</div></pre></td></tr></table></figure></li><li><p><strong>意图相关→<a href="https://github.com/Blankj/AndroidUtilCode/blob/master/utilcode/src/main/java/com/blankj/utilcode/utils/IntentUtils.java" target="_blank" rel="external">IntentUtils.java</a></strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">getInstallAppIntent         : 获取安装App（支持6.0）的意图</div><div class="line">getUninstallAppIntent       : 获取卸载App的意图</div><div class="line">getLaunchAppIntent          : 获取打开App的意图</div><div class="line">getAppDetailsSettingsIntent : 获取App具体设置的意图</div><div class="line">getShareTextIntent          : 获取分享文本的意图</div><div class="line">getShareImageIntent         : 获取分享图片的意图</div><div class="line">getComponentIntent          : 获取其他应用组件的意图</div><div class="line">getShutdownIntent           : 获取关机的意图</div><div class="line">getCaptureIntent            : 获取拍照的意图</div></pre></td></tr></table></figure></li><li><p><strong>键盘相关→<a href="https://github.com/Blankj/AndroidUtilCode/blob/master/utilcode/src/main/java/com/blankj/utilcode/utils/KeyboardUtils.java" target="_blank" rel="external">KeyboardUtils.java</a>→<a href="https://github.com/Blankj/AndroidUtilCode/blob/master/app/src/main/java/com/blankj/androidutilcode/activities/KeyboardActivity.java" target="_blank" rel="external">Demo</a></strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">hideSoftInput                : 动态隐藏软键盘</div><div class="line">clickBlankArea2HideSoftInput : 点击屏幕空白区域隐藏软键盘</div><div class="line">showSoftInput                : 动态显示软键盘</div><div class="line">toggleSoftInput              : 切换键盘显示与否状态</div></pre></td></tr></table></figure></li><li><p><strong>定位相关→<a href="https://github.com/Blankj/AndroidUtilCode/blob/master/utilcode/src/main/java/com/blankj/utilcode/utils/LocationUtils.java" target="_blank" rel="external">LocationUtils.java</a>→<a href="https://github.com/Blankj/AndroidUtilCode/blob/master/app/src/main/java/com/blankj/androidutilcode/activities/LocationActivity.java" target="_blank" rel="external">Demo</a></strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">isGpsEnabled      : 判断Gps是否可用</div><div class="line">isLocationEnabled : 判断定位是否可用</div><div class="line">openGpsSettings   : 打开Gps设置界面</div><div class="line">register          : 注册</div><div class="line">unregister        : 注销</div><div class="line">getAddress        : 根据经纬度获取地理位置</div><div class="line">getCountryName    : 根据经纬度获取所在国家</div><div class="line">getLocality       : 根据经纬度获取所在地</div><div class="line">getStreet         : 根据经纬度获取所在街道</div></pre></td></tr></table></figure></li><li><p><strong>日志相关→<a href="https://github.com/Blankj/AndroidUtilCode/blob/master/utilcode/src/main/java/com/blankj/utilcode/utils/LogUtils.java" target="_blank" rel="external">LogUtils.java</a>→<a href="https://github.com/Blankj/AndroidUtilCode/blob/master/utilcode/src/test/java/com/blankj/utilcode/utils/LogUtilsTest.java" target="_blank" rel="external">Test</a></strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">init       : 初始化函数</div><div class="line">getBuilder : 获取LogUtils建造者</div><div class="line">v          : Verbose日志</div><div class="line">d          : Debug日志</div><div class="line">i          : Info日志</div><div class="line">w          : Warn日志</div><div class="line">e          : Error日志</div></pre></td></tr></table></figure></li><li><p><strong>网络相关→<a href="https://github.com/Blankj/AndroidUtilCode/blob/master/utilcode/src/main/java/com/blankj/utilcode/utils/NetworkUtils.java" target="_blank" rel="external">NetworkUtils.java</a>→<a href="https://github.com/Blankj/AndroidUtilCode/blob/master/app/src/main/java/com/blankj/androidutilcode/activities/NetworkActivity.java" target="_blank" rel="external">Demo</a></strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">openWirelessSettings   : 打开网络设置界面</div><div class="line">isConnected            : 判断网络是否连接</div><div class="line">isAvailableByPing      : 判断网络是否可用</div><div class="line">getDataEnabled         : 判断移动数据是否打开</div><div class="line">setDataEnabled         : 打开或关闭移动数据</div><div class="line">is4G                   : 判断网络是否是4G</div><div class="line">getWifiEnabled         : 判断wifi是否打开</div><div class="line">setWifiEnabled         : 打开或关闭wifi</div><div class="line">isWifiConnected        : 判断wifi是否连接状态</div><div class="line">isWifiAvailable        : 判断wifi数据是否可用</div><div class="line">getNetworkOperatorName : 获取移动网络运营商名称</div><div class="line">getNetworkType         : 获取当前网络类型</div><div class="line">getIPAddress           : 获取IP地址</div><div class="line">getDomainAddress       : 获取域名ip地址</div></pre></td></tr></table></figure></li><li><p><strong>手机相关→<a href="https://github.com/Blankj/AndroidUtilCode/blob/master/utilcode/src/main/java/com/blankj/utilcode/utils/PhoneUtils.java" target="_blank" rel="external">PhoneUtils.java</a>→<a href="https://github.com/Blankj/AndroidUtilCode/blob/master/app/src/main/java/com/blankj/androidutilcode/activities/PhoneActivity.java" target="_blank" rel="external">Demo</a></strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">isPhone                                 : 判断设备是否是手机</div><div class="line">getIMEI                                 : 获取IMEI码</div><div class="line">getIMSI                                 : 获取IMSI码</div><div class="line">getPhoneType                            : 获取移动终端类型</div><div class="line">isSimCardReady                          : 判断sim卡是否准备好</div><div class="line">getSimOperatorName, getSimOperatorByMnc : 获取Sim卡运营商名称</div><div class="line">getPhoneStatus                          : 获取手机状态信息</div><div class="line">dial                                    : 跳至拨号界面</div><div class="line">call                                    : 拨打phoneNumber</div><div class="line">sendSms                                 : 跳至发送短信界面</div><div class="line">sendSmsSilent                           : 发送短信</div><div class="line">getAllContactInfo                       : 获取手机联系人</div><div class="line">getContactNum                           : 打开手机联系人界面点击联系人后便获取该号码</div><div class="line">getAllSMS                               : 获取手机短信并保存到xml中</div></pre></td></tr></table></figure></li><li><p><strong>拼音相关→<a href="https://github.com/Blankj/AndroidUtilCode/blob/master/utilcode/src/main/java/com/blankj/utilcode/utils/PinyinUtils.java" target="_blank" rel="external">PinyinUtils.java</a>→<a href="https://github.com/Blankj/AndroidUtilCode/blob/master/utilcode/src/test/java/com/blankj/utilcode/utils/PinyinUtilsTest.java" target="_blank" rel="external">Test</a></strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">getPinyinFirstLetter : 获取第一个汉字首字母</div><div class="line">ccs2Pinyin           : 汉字转拼音</div></pre></td></tr></table></figure></li><li><p><strong>进程相关→<a href="https://github.com/Blankj/AndroidUtilCode/blob/master/utilcode/src/main/java/com/blankj/utilcode/utils/ProcessUtils.java" target="_blank" rel="external">ProcessUtils.java</a>→<a href="https://github.com/Blankj/AndroidUtilCode/blob/master/app/src/main/java/com/blankj/androidutilcode/activities/ProcessActivity.java" target="_blank" rel="external">Demo</a></strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">getForegroundProcessName                              : 获取前台线程包名</div><div class="line">cleanAllBackgroundProcesses, cleanBackgroundProcesses : 清理后台服务进程</div></pre></td></tr></table></figure></li><li><p><strong>正则相关→<a href="https://github.com/Blankj/AndroidUtilCode/blob/master/utilcode/src/main/java/com/blankj/utilcode/utils/RegexUtils.java" target="_blank" rel="external">RegexUtils.java</a>→<a href="https://github.com/Blankj/AndroidUtilCode/blob/master/utilcode/src/test/java/com/blankj/utilcode/utils/RegexUtilsTest.java" target="_blank" rel="external">Test</a></strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">isMobileSimple  : 验证手机号（简单）</div><div class="line">isMobileExact   : 验证手机号（精确）</div><div class="line">isTel           : 验证电话号码</div><div class="line">isIDCard15      : 验证身份证号码15位</div><div class="line">isIDCard18      : 验证身份证号码18位</div><div class="line">isEmail         : 验证邮箱</div><div class="line">isURL           : 验证URL</div><div class="line">isZh            : 验证汉字</div><div class="line">isUsername      : 验证用户名</div><div class="line">isDate          : 验证yyyy-MM-dd格式的日期校验，已考虑平闰年</div><div class="line">isIP            : 验证IP地址</div><div class="line">isMatch         : 判断是否匹配正则</div><div class="line">getMatches      : 获取正则匹配的部分</div><div class="line">getSplits       : 获取正则匹配分组</div><div class="line">getReplaceFirst : 替换正则匹配的第一部分</div><div class="line">getReplaceAll   : 替换所有正则匹配的部分</div></pre></td></tr></table></figure></li><li><p><strong>屏幕相关→<a href="https://github.com/Blankj/AndroidUtilCode/blob/master/utilcode/src/main/java/com/blankj/utilcode/utils/ScreenUtils.java" target="_blank" rel="external">ScreenUtils.java</a></strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">getScreenWidth          : 获取屏幕的宽度（单位：px）</div><div class="line">getScreenHeight         : 获取屏幕的高度（单位：px）</div><div class="line">setLandscape            : 设置屏幕为横屏</div><div class="line">setPortrait             : 设置屏幕为竖屏</div><div class="line">isLandscape             : 判断是否横屏</div><div class="line">isPortrait              : 判断是否竖屏</div><div class="line">getScreenRotation       : 获取屏幕旋转角度</div><div class="line">captureWithStatusBar    : 获取当前屏幕截图，包含状态栏</div><div class="line">captureWithoutStatusBar : 获取当前屏幕截图，不包含状态栏</div><div class="line">isScreenLock            : 判断是否锁屏</div></pre></td></tr></table></figure></li><li><p><strong>SD卡相关→<a href="https://github.com/Blankj/AndroidUtilCode/blob/master/utilcode/src/main/java/com/blankj/utilcode/utils/SDCardUtils.java" target="_blank" rel="external">SDCardUtils.java</a>→<a href="https://github.com/Blankj/AndroidUtilCode/blob/master/app/src/main/java/com/blankj/androidutilcode/activities/SDCardActivity.java" target="_blank" rel="external">Demo</a></strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">isSDCardEnable : 判断SD卡是否可用</div><div class="line">getSDCardPath  : 获取SD卡路径</div><div class="line">getDataPath    : 获取SD卡Data路径</div><div class="line">getFreeSpace   : 计算SD卡的剩余空间</div><div class="line">getSDCardInfo  : 获取SD卡信息</div></pre></td></tr></table></figure></li><li><p><strong>服务相关→<a href="https://github.com/Blankj/AndroidUtilCode/blob/master/utilcode/src/main/java/com/blankj/utilcode/utils/ServiceUtils.java" target="_blank" rel="external">ServiceUtils.java</a></strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">getAllRunningService : 获取所有运行的服务</div><div class="line">startService         : 启动服务</div><div class="line">stopService          : 停止服务</div><div class="line">bindService          : 绑定服务</div><div class="line">unbindService        : 解绑服务</div><div class="line">isServiceRunning     : 判断服务是否运行</div></pre></td></tr></table></figure></li><li><p><strong>Shell相关→<a href="https://github.com/Blankj/AndroidUtilCode/blob/master/utilcode/src/main/java/com/blankj/utilcode/utils/ShellUtils.java" target="_blank" rel="external">ShellUtils.java</a></strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">execCmd : 是否是在root下执行命令</div></pre></td></tr></table></figure></li><li><p><strong>尺寸相关→<a href="https://github.com/Blankj/AndroidUtilCode/blob/master/utilcode/src/main/java/com/blankj/utilcode/utils/SizeUtils.java" target="_blank" rel="external">SizeUtils.java</a></strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">dp2px, px2dp      : dp与px转换</div><div class="line">sp2px, px2sp      : sp与px转换</div><div class="line">applyDimension    : 各种单位转换</div><div class="line">forceGetViewSize  : 在onCreate中获取视图的尺寸</div><div class="line">measureView       : 测量视图尺寸</div><div class="line">getMeasuredWidth  : 获取测量视图宽度</div><div class="line">getMeasuredHeight : 获取测量视图高度</div></pre></td></tr></table></figure></li><li><p><strong>Snackbar相关→<a href="https://github.com/Blankj/AndroidUtilCode/blob/master/utilcode/src/main/java/com/blankj/utilcode/utils/SnackbarUtils.java" target="_blank" rel="external">SnackbarUtils.java</a>→<a href="https://github.com/Blankj/AndroidUtilCode/blob/master/app/src/main/java/com/blankj/androidutilcode/activities/SnackbarActivity.java" target="_blank" rel="external">Demo</a></strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">showShortSnackbar      : 显示短时snackbar</div><div class="line">showLongSnackbar       : 显示长时snackbar</div><div class="line">showIndefiniteSnackbar : 显示自定义时长snackbar</div><div class="line">addView                : 为SnackBar添加布局</div><div class="line">dismissSnackbar        : 取消snackbar显示</div></pre></td></tr></table></figure></li><li><p><strong>SP相关→<a href="https://github.com/Blankj/AndroidUtilCode/blob/master/utilcode/src/main/java/com/blankj/utilcode/utils/SPUtils.java" target="_blank" rel="external">SPUtils.java</a>→<a href="https://github.com/Blankj/AndroidUtilCode/blob/master/utilcode/src/test/java/com/blankj/utilcode/utils/SPUtilsTest.java" target="_blank" rel="external">Test</a></strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">SPUtils    : SPUtils构造函数</div><div class="line">putString  : SP中写入String类型value</div><div class="line">getString  : SP中读取String</div><div class="line">putInt     : SP中写入int类型value</div><div class="line">getInt     : SP中读取int</div><div class="line">putLong    : SP中写入long类型value</div><div class="line">getLong    : SP中读取long</div><div class="line">putFloat   : SP中写入float类型value</div><div class="line">getFloat   : SP中读取float</div><div class="line">putBoolean : SP中写入boolean类型value</div><div class="line">getBoolean : SP中读取boolean</div><div class="line">getAll     : SP中获取所有键值对</div><div class="line">remove     : SP中移除该key</div><div class="line">contains   : SP中是否存在该key</div><div class="line">clear      : SP中清除所有数据</div></pre></td></tr></table></figure></li><li><p><strong>字符串相关→<a href="https://github.com/Blankj/AndroidUtilCode/blob/master/utilcode/src/main/java/com/blankj/utilcode/utils/StringUtils.java" target="_blank" rel="external">StringUtils.java</a>→<a href="https://github.com/Blankj/AndroidUtilCode/blob/master/utilcode/src/test/java/com/blankj/utilcode/utils/StringUtilsTest.java" target="_blank" rel="external">Test</a></strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">isEmpty          : 判断字符串是否为null或长度为0</div><div class="line">isSpace          : 判断字符串是否为null或全为空格</div><div class="line">equals           : 判断两字符串是否相等</div><div class="line">equalsIgnoreCase : 判断两字符串忽略大小写是否相等</div><div class="line">null2Length0     : null转为长度为0的字符串</div><div class="line">length           : 返回字符串长度</div><div class="line">upperFirstLetter : 首字母大写</div><div class="line">lowerFirstLetter : 首字母小写</div><div class="line">reverse          : 反转字符串</div><div class="line">toDBC            : 转化为半角字符</div><div class="line">toSBC            : 转化为全角字符</div></pre></td></tr></table></figure></li><li><p><strong>线程池相关→<a href="https://github.com/Blankj/AndroidUtilCode/blob/master/utilcode/src/main/java/com/blankj/utilcode/utils/ThreadPoolUtils.java" target="_blank" rel="external">ThreadPoolUtils.java</a></strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">ThreadPoolUtils        : ThreadPoolUtils构造函数</div><div class="line">execute                : 在未来某个时间执行给定的命令</div><div class="line">execute                : 在未来某个时间执行给定的命令链表</div><div class="line">shutDown               : 待以前提交的任务执行完毕后关闭线程池</div><div class="line">shutDownNow            : 试图停止所有正在执行的活动任务</div><div class="line">isShutDown             : 判断线程池是否已关闭</div><div class="line">isTerminated           : 关闭线程池后判断所有任务是否都已完成</div><div class="line">awaitTermination       : 请求关闭、发生超时或者当前线程中断</div><div class="line">submit                 : 提交一个Callable任务用于执行</div><div class="line">submit                 : 提交一个Runnable任务用于执行</div><div class="line">invokeAll, invokeAny   : 执行给定的任务</div><div class="line">schedule               : 延迟执行Runnable命令</div><div class="line">schedule               : 延迟执行Callable命令</div><div class="line">scheduleWithFixedRate  : 延迟并循环执行命令</div><div class="line">scheduleWithFixedDelay : 延迟并以固定休息时间循环执行命令</div></pre></td></tr></table></figure></li><li><p><strong>时间相关→<a href="https://github.com/Blankj/AndroidUtilCode/blob/master/utilcode/src/main/java/com/blankj/utilcode/utils/TimeUtils.java" target="_blank" rel="external">TimeUtils.java</a>→<a href="https://github.com/Blankj/AndroidUtilCode/blob/master/utilcode/src/test/java/com/blankj/utilcode/utils/TimeUtilsTest.java" target="_blank" rel="external">Test</a></strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">milliseconds2String   : 将时间戳转为时间字符串</div><div class="line">string2Milliseconds   : 将时间字符串转为时间戳</div><div class="line">string2Date           : 将时间字符串转为Date类型</div><div class="line">date2String           : 将Date类型转为时间字符串</div><div class="line">date2Milliseconds     : 将Date类型转为时间戳</div><div class="line">milliseconds2Date     : 将时间戳转为Date类型</div><div class="line">milliseconds2Unit     : 毫秒时间戳单位转换（单位：unit）</div><div class="line">getIntervalTime       : 获取两个时间差（单位：unit）</div><div class="line">getCurTimeMills       : 获取当前时间戳</div><div class="line">getCurTimeString      : 获取当前时间字符串</div><div class="line">getCurTimeDate        : 获取当前Date</div><div class="line">getIntervalByNow      : 获取与当前时间的差（单位：unit）</div><div class="line">isLeapYear            : 判断闰年</div><div class="line">getWeek, getWeekIndex : 获取星期</div><div class="line">getWeekOfMonth        : 获取月份中的第几周</div><div class="line">getWeekOfYear         : 获取年份中的第几周</div></pre></td></tr></table></figure></li><li><p><strong>吐司相关→<a href="https://github.com/Blankj/AndroidUtilCode/blob/master/utilcode/src/main/java/com/blankj/utilcode/utils/ToastUtils.java" target="_blank" rel="external">ToastUtils.java</a>→<a href="https://github.com/Blankj/AndroidUtilCode/blob/master/app/src/main/java/com/blankj/androidutilcode/activities/ToastActivity.java" target="_blank" rel="external">Demo</a></strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">init               : 吐司初始化</div><div class="line">showShortToastSafe : 安全地显示短时吐司</div><div class="line">showLongToastSafe  : 安全地显示长时吐司</div><div class="line">showShortToast     : 显示短时吐司</div><div class="line">showLongToast      : 显示长时吐司</div><div class="line">cancelToast        : 取消吐司显示</div></pre></td></tr></table></figure></li><li><p><strong>压缩相关→<a href="https://github.com/Blankj/AndroidUtilCode/blob/master/utilcode/src/main/java/com/blankj/utilcode/utils/ZipUtils.java" target="_blank" rel="external">ZipUtils.java</a>→<a href="https://github.com/Blankj/AndroidUtilCode/blob/master/utilcode/src/test/java/com/blankj/utilcode/utils/ZipUtilsTest.java" target="_blank" rel="external">Test</a></strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">zipFiles           : 批量压缩文件</div><div class="line">zipFile            : 压缩文件</div><div class="line">unzipFiles         : 批量解压文件</div><div class="line">unzipFile          : 解压文件</div><div class="line">unzipFileByKeyword : 解压带有关键字的文件</div><div class="line">getFilesPath       : 获取压缩文件中的文件路径链表</div><div class="line">getComments        : 获取压缩文件中的注释链表</div><div class="line">getEntries         : 获取压缩文件中的文件对象</div></pre></td></tr></table></figure></li><li><p><strong>更新Log→<a href="https://github.com/Blankj/AndroidUtilCode/blob/master/update_log.md" target="_blank" rel="external">update_log.md</a></strong></p></li></ul></blockquote><hr><h3 id="关于"><a href="#关于" class="headerlink" title="关于"></a>关于</h3><ul><li>做这份整理是想把它作为Android开发的小字典，当遇到一些琐碎问题时，不用再面向百度或者谷歌查询API的使用，费时费力，这里有的话，大家尽管撸走；同时也希望它能逐日壮大起来，期待大家的Star和完善，当然我也会一直更新发布版本和日志，为了方便大家导入，现已上传jcenter；其中很多代码也是汇四方之精华，谢谢前辈们的提供，当然最终还是要通过单元测试的，如有错误，请及时告之。</li><li>QQ群提供讨论，1群：74721490（已满）2群：25206533，至于验证问题对大家来说肯定都是小case。关于群：<a href="http://www.jianshu.com/p/8938015df951" target="_blank" rel="external">在别人生活里低调地做配角（我和466个程序员的故事）</a>。</li><li>我的<a href="http://weibo.com/blankcmj" target="_blank" rel="external">微博</a>,求个关注哈。</li></ul><h3 id="Download"><a href="#Download" class="headerlink" title="Download"></a>Download</h3><hr><p>Gradle:<br></p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">compile <span class="string">'com.blankj:utilcode:1.3.4'</span></div></pre></td></tr></table></figure><p></p><h3 id="Proguard"><a href="#Proguard" class="headerlink" title="Proguard"></a>Proguard</h3><hr><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">-keep class com.blankj.utilcode.** &#123; *; &#125;</div><div class="line">-keepclassmembers class com.blankj.utilcode.** &#123; *; &#125;</div><div class="line">-dontwarn com.blankj.utilcode.**</div></pre></td></tr></table></figure><h3 id="License"><a href="#License" class="headerlink" title="License"></a>License</h3><hr><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">Copyright 2016 Blankj</div><div class="line"></div><div class="line">Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);</div><div class="line">you may not use this file except in compliance with the License.</div><div class="line">You may obtain a copy of the License at</div><div class="line"></div><div class="line">	http://www.apache.org/licenses/LICENSE-2.0</div><div class="line"></div><div class="line">Unless required by applicable law or agreed to in writing, software</div><div class="line">distributed under the License is distributed on an &quot;AS IS&quot; BASIS,</div><div class="line">WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</div><div class="line">See the License for the specific language governing permissions and</div><div class="line">limitations under the License.</div></pre></td></tr></table></figure><!-- more -->]]></content>
    
    <summary type="html">
    
      &lt;p&gt;(&lt;a href=&quot;https://github.com/Blankj/AndroidUtilCode/blob/master/update_log.md&quot;&gt;持续更新中&lt;/a&gt;)&lt;/p&gt;&lt;p&gt;为方便查找，已进行大致归类，其目录如下所示：&lt;/p&gt;&lt;blockquote&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Activity相关→&lt;a href=&quot;https://github.com/Blankj/AndroidUtilCode/blob/master/utilcode/src/main/java/com/blankj/utilcode/utils/ActivityUtils.java&quot;&gt;ActivityUtils.java&lt;/a&gt;→&lt;a href=&quot;https://github.com/Blankj/AndroidUtilCode/blob/master/app/src/main/java/com/blankj/androidutilcode/activities/ActivityActivity.java&quot;&gt;Demo&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/blockquote&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;isActivityExists    : 判断是否存在Activity&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;launchActivity      : 打开Activity&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;getLauncherActivity : 获取入口activity&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Android" scheme="https://djlinkiot.github.io/categories/Android/"/>
    
      <category term="Android Utils" scheme="https://djlinkiot.github.io/categories/Android/Android-Utils/"/>
    
    
      <category term="Android" scheme="https://djlinkiot.github.io/tags/Android/"/>
    
      <category term="Android Tips" scheme="https://djlinkiot.github.io/tags/Android-Tips/"/>
    
      <category term="Android Utils" scheme="https://djlinkiot.github.io/tags/Android-Utils/"/>
    
  </entry>
  
  <entry>
    <title>Visual Studio Code 使用教程</title>
    <link href="https://djlinkiot.github.io/2016/11/30/ide-vscode-use/"/>
    <id>https://djlinkiot.github.io/2016/11/30/ide-vscode-use/</id>
    <published>2016-11-30T12:25:48.000Z</published>
    <updated>2016-12-22T09:16:24.478Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>Visual Studio Code（简称VSCode）是继 Sublime 之后最好用的轻量级跨平台编辑器IDE。本教程是关于如何安装和使用VSCode。</p><a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;Visual Studio Code（简称VSCode）是继 Sublime 之后最好用的轻量级跨平台编辑器IDE。本教程是关于如何安装和使用VSCode。&lt;/p&gt;
    
    </summary>
    
      <category term="IDE" scheme="https://djlinkiot.github.io/categories/IDE/"/>
    
      <category term="VSCode" scheme="https://djlinkiot.github.io/categories/IDE/VSCode/"/>
    
    
      <category term="IDE" scheme="https://djlinkiot.github.io/tags/IDE/"/>
    
      <category term="VisualStudioCode" scheme="https://djlinkiot.github.io/tags/VisualStudioCode/"/>
    
      <category term="VSCode" scheme="https://djlinkiot.github.io/tags/VSCode/"/>
    
      <category term="Plugins" scheme="https://djlinkiot.github.io/tags/Plugins/"/>
    
  </entry>
  
  <entry>
    <title>Hexo 插件、小技巧 和 主题相关</title>
    <link href="https://djlinkiot.github.io/2016/11/30/hexo-plugin-matter-tips/"/>
    <id>https://djlinkiot.github.io/2016/11/30/hexo-plugin-matter-tips/</id>
    <published>2016-11-30T10:03:46.000Z</published>
    <updated>2016-12-22T09:16:24.478Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Hexo插件"><a href="#Hexo插件" class="headerlink" title="Hexo插件"></a>Hexo插件</h1><h2 id="图片插件"><a href="#图片插件" class="headerlink" title="图片插件"></a>图片插件</h2><ul><li><a href="https://github.com/gyk001/hexo-qiniu-sync" target="_blank" rel="external">Hexo七牛同步插件</a></li></ul><a id="more"></a><h1 id="Hexo-Tips"><a href="#Hexo-Tips" class="headerlink" title="Hexo Tips"></a>Hexo Tips</h1><ul><li><p>Hexo 是有<a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="external">中文文档</a>的，当然更推荐看<a href="https://hexo.io/docs/" target="_blank" rel="external">英文文档</a></p></li><li><p>关于几个文件夹功能的释义</p><ul><li><code>scaffolds</code> 为模板文件夹，模板用于预先定义 <code>new</code> 出来的文章的 <code>layout</code></li><li><code>source</code> 内 <code>_drafts</code> 文件夹用于放置草稿，使用 <code>hexo --draft</code> 可查看所有草稿文章；草稿完稿后可以使用 <code>publish</code> 命令发布到 <code>_post</code> 文件夹内，等待 <code>generate</code></li></ul></li><li><p>自定义的其他模板和 <code>post</code> 模板相同，<code>new</code> 出来的文章都将储存到 <code>source/_posts</code> 文件夹</p></li><li><p>当你不想你的文章被发布，同时又不想删除文章，将文章的 <code>Front-Matter</code> 中的 <code>layout</code>: 设为 <code>false</code></p></li><li><p>文章的 <code>Front-matter</code> 采用 <code>YAML</code> 语法格式，多个标签与分类不是用逗号隔开，而是采用 <code>YAML</code> 中的 列表/并列 写法</p></li><li><p><code>Hexo</code> 支持更强大的 <code>quote</code> 块：可以添加引用作者、来源、链接等；在有这些需求的时候可以引用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&#123;% blockquote [author[, source]] [link] [source_link_title] %&#125;</div><div class="line">content</div><div class="line">&#123;% endblockquote %&#125;</div></pre></td></tr></table></figure></li><li><p><code>Hexo</code> 支持更强大的 <code>code</code> 块：支持为 <code>code</code> 块添加标题和链接；当我们需要引用某个链接内的代码时可以使用，一般情况下使用 <code>md</code> 的代码块语法即可</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&#123;% codeblock [title] [lang:language] [url] [link text] %&#125;</div><div class="line">code snippet</div><div class="line">&#123;% endcodeblock %&#125;</div></pre></td></tr></table></figure></li><li><p>引入 <code>gist</code> 时，插入 <code>fileName</code> 似乎会失败，所以，引入 <code>gist</code> 时只需要使用 <code>gist hash-id</code> 即可</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123;% gist 5b3ee7efd535ab63cd56 %&#125;</div></pre></td></tr></table></figure></li><li><p>Hexo 支持更使用特定的语法，插入指定大小的图片，如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">// 语法</div><div class="line">&#123;% img [class names] /path/to/image [width] [height] [title text [alt text]] %&#125;</div><div class="line"></div><div class="line">// 实例</div><div class="line">&#123;% img full-image /hexo-experiences/PL01.jpg 180 180 hello %&#125;</div><div class="line"></div><div class="line">// 生成的代码</div><div class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"/blog/hexo-experiences/PL01.jpg"</span> <span class="attr">class</span>=<span class="string">"full-image"</span> <span class="attr">width</span>=<span class="string">"180"</span> <span class="attr">height</span>=<span class="string">"180"</span> <span class="attr">title</span>=<span class="string">"hello"</span>&gt;</span></div></pre></td></tr></table></figure><p>值的注意的几点：</p><ul><li>路径名必须以 <code>/</code> 开始，否则会解析出错</li><li><p>路径是相对于 <code>conifg</code> 内的 <code>root</code> 的，这一点挺坑，可以在 <code>source/</code> 下新建一个 <code>uploads</code> 文件夹用于专门放置这些图片资源</p><pre><code>{\% img hi /uploads/images/test.jpg 100 100 hello hello %}
</code></pre></li><li>图片宽高只能使用数值，不能包含字符串，也不能是百分数</li><li>最后一个字段可以为图片添加标题</li></ul></li><li><p>引入某个文件中的代码，使用 <code>include_code</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">// 语法</div><div class="line">&#123;% include_code [title] [lang:language] path/to/file %&#125;</div><div class="line">// 实例</div><div class="line">&#123;% include_code DOMUtil lang:javascript demo.js %&#125;</div></pre></td></tr></table></figure><p>值得注意的是：<code>code</code> 代码所在的文件必须在 <code>downloads/code/</code> 目录下，否则无法获取</p></li></ul><ul><li><p>引用其他文章的路径，基本功能不大</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">// 语法</div><div class="line">&#123;% post_path slug %&#125;</div><div class="line"></div><div class="line">// 实例</div><div class="line">&#123;% post_path OS-Brief-Intro %&#125; // &gt;&gt; /blog/2016/05/03/OS-Brief-Intro/</div></pre></td></tr></table></figure></li><li><p>引用其他文章的链接，用处很大，但是有一个小坑</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">// 语法</div><div class="line">&#123;% post_link slug [title] %&#125;</div><div class="line"></div><div class="line">// 实例</div><div class="line">&#123;% post_link OS-Brief-Intro 操作系统 %&#125;</div></pre></td></tr></table></figure></li></ul><pre><code>小坑：不能放在一段的段首，否则 `md` 文档或解析错误，出现莫名奇妙的 bug
</code></pre><ul><li><p>引用文章的资源：获取到的是文章对应 <code>asset</code> 目录下的资源</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">// 语法</div><div class="line">&#123;% asset_path slug %&#125;</div><div class="line">&#123;% asset_img slug [title] %&#125;</div><div class="line">&#123;% asset_link slug [title] %&#125;</div><div class="line"></div><div class="line">// 实例</div><div class="line">&#123;% asset_path 01.png %&#125;</div><div class="line">&#123;% asset_img 01.png 图片 %&#125;</div><div class="line">&#123;% asset_link 01.png 图片 %&#125;</div></pre></td></tr></table></figure></li><li><p>将 <code>_config.yml</code> 文件中的 <code>post_asset_folder</code> 选项设为 <code>true</code>，便可在 <code>new</code> 一篇新文章的同时创建对应的资源文件夹。引用资源文件夹内的文件请使用上面 <code>引用文章的资源</code> 中使用的方法，可以防止首页展示时链接错误的问题。</p></li><li><p><a href="https://hexo.io/zh-cn/docs/data-files.html" target="_blank" rel="external">链接：数据文件</a></p></li><li><p><code>hexo generate --watch</code> 可以监听文件变动，自动 <code>generate</code></p></li><li><p><code>hexo g -f</code> 可以强制重新生成，防止一些更改后无法 <code>generate</code> 的清理</p></li><li><p>自动提交脚本：<code>deploy.sh</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">hexo generate -f</div><div class="line">echo &quot;&gt;&gt;&gt;&gt;&gt;&gt;What is your commit message to blog-material repo?&quot;</div><div class="line">read COMMIT1</div><div class="line">git add --all</div><div class="line">git commit -m &quot;$COMMIT1&quot;</div><div class="line">echo &quot;commited&quot;</div><div class="line">git push</div><div class="line">echo &quot;pushed all to blog-material repo&quot;</div><div class="line">cd public</div><div class="line">echo &quot;&gt;&gt;&gt;&gt;&gt;&gt;What is your commit message to blog repo?&quot;</div><div class="line">read COMMIT2</div><div class="line">git add --all</div><div class="line">git commit -m &quot;$COMMIT2&quot;</div><div class="line">echo &quot;commited&quot;</div><div class="line">git push</div><div class="line">echo &quot;pushed all to blog repo&quot;</div><div class="line">cd ../</div></pre></td></tr></table></figure></li><li><p>实现 RSS 订阅：<a href="https://github.com/hexojs/hexo-generator-feed" target="_blank" rel="external">hexojs/hexo-generator-feed</a></p></li><li><p>Hexo 的 <code>markdown</code> 解析引擎不支持脚注，可以使用插件实现。</p><blockquote><p>但是笔者在使用了 <a href="https://github.com/LouisBarranqueiro/hexo-footnotes" target="_blank" rel="external">LouisBarranqueiro/hexo-footnotes</a> 之后发现 hexo server 命令无法使用了。</p></blockquote><p>更换默认的 <code>md</code> 渲染引擎 <code>hexo-renderer-marked</code>，改为 <code>hexo-renderer-markdown-it</code>，见 <a href="http://yangfch3.com/2016/05/08/hexo-experiences/hexo-renderer-marked-it.txt" target="_blank" rel="external">配置文档</a>。几大优点：</p><ul><li>支持脚注解析</li><li>支持上下标</li><li>支持 emoji – 需要额外配置</li></ul></li></ul><h1 id="Hexo主题"><a href="#Hexo主题" class="headerlink" title="Hexo主题"></a>Hexo主题</h1><h2 id="NexT"><a href="#NexT" class="headerlink" title="NexT"></a>NexT</h2><ul><li><p><code>NexT</code> 的一些菜单页（如：标签页、分类页、归档页）需要自己添加，方法见 <a href="http://theme-next.iissnan.com/theme-settings.html" target="_blank" rel="external">官网文档</a></p></li><li><p><code>NexT</code> 的 <code>i18n</code> 可以在 theme/next/language 下的 .yml 文件下自己定制</p></li><li><p><code>NexT</code> 支持文本居中的引用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&#123;% centerquote %&#125;blah blah blah&#123;% endcenterquote %&#125;</div><div class="line"></div><div class="line">&#123;% cq %&#125; blah blah blah &#123;% endcq %&#125;</div></pre></td></tr></table></figure></li><li><p>NexT 中的图片可以自由地突破容器宽度的限制（扩大 26%）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&#123;% fullimage /image-url, alt, title %&#125;</div><div class="line"></div><div class="line">&#123;% fi /image-url, alt, title %&#125;</div></pre></td></tr></table></figure></li><li><p>在为文章创建 Tags 的时候，避免标签内出现 “&amp;”，否则生成的 .xml 文件在浏览器端会解析错误，并且订阅功能也会出现故障</p></li></ul><h2 id="主题编写"><a href="#主题编写" class="headerlink" title="主题编写"></a>主题编写</h2><ul><li><p>Hexo 提供的辅助函数中截取一段长文字的前 n 个字符</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">// swig 的写法</div><div class="line">&#123;% truncate(&apos;long string&apos;, &#123;length: n&#125;) %&#125;</div><div class="line"></div><div class="line">// 实例</div><div class="line">&#123;% truncate(post.description, &#123;length:n&#125;) %&#125;</div></pre></td></tr></table></figure></li><li><p>在 swig 中，胡子或胡子百分号内不能再使用胡子或胡子百分号</p></li><li><p>DIY 主题，写法参考 <a href="https://github.com/yangfch3/Dandelion" target="_blank" rel="external">官网教程</a></p></li></ul><h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><ul><li><a href="http://yangfch3.com/2016/05/08/hexo-experiences/" target="_blank" rel="external">使用 Hexo 与 NexT 搭建博客的避坑总结</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Hexo插件&quot;&gt;&lt;a href=&quot;#Hexo插件&quot; class=&quot;headerlink&quot; title=&quot;Hexo插件&quot;&gt;&lt;/a&gt;Hexo插件&lt;/h1&gt;&lt;h2 id=&quot;图片插件&quot;&gt;&lt;a href=&quot;#图片插件&quot; class=&quot;headerlink&quot; title=&quot;图片插件&quot;&gt;&lt;/a&gt;图片插件&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/gyk001/hexo-qiniu-sync&quot;&gt;Hexo七牛同步插件&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;
    
    </summary>
    
      <category term="Workflow" scheme="https://djlinkiot.github.io/categories/Workflow/"/>
    
      <category term="Hexo" scheme="https://djlinkiot.github.io/categories/Workflow/Hexo/"/>
    
    
      <category term="Hexo" scheme="https://djlinkiot.github.io/tags/Hexo/"/>
    
      <category term="Hexo Plugin" scheme="https://djlinkiot.github.io/tags/Hexo-Plugin/"/>
    
      <category term="Hexo Tips" scheme="https://djlinkiot.github.io/tags/Hexo-Tips/"/>
    
      <category term="Hexo Matters" scheme="https://djlinkiot.github.io/tags/Hexo-Matters/"/>
    
  </entry>
  
  <entry>
    <title>Hexo博客提交文章指南</title>
    <link href="https://djlinkiot.github.io/2016/11/30/hexo-blog-contribution-guide/"/>
    <id>https://djlinkiot.github.io/2016/11/30/hexo-blog-contribution-guide/</id>
    <published>2016-11-30T09:59:19.000Z</published>
    <updated>2016-12-22T09:16:24.478Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="Workflow" scheme="https://djlinkiot.github.io/categories/Workflow/"/>
    
      <category term="Hexo" scheme="https://djlinkiot.github.io/categories/Workflow/Hexo/"/>
    
    
      <category term="Hexo" scheme="https://djlinkiot.github.io/tags/Hexo/"/>
    
      <category term="Blog" scheme="https://djlinkiot.github.io/tags/Blog/"/>
    
  </entry>
  
  <entry>
    <title>Gitlab CI Runner 打包机环境搭建 (Ubuntu + Windows)</title>
    <link href="https://djlinkiot.github.io/2016/11/28/gitlab-ci-runner-env-install/"/>
    <id>https://djlinkiot.github.io/2016/11/28/gitlab-ci-runner-env-install/</id>
    <published>2016-11-28T11:08:02.000Z</published>
    <updated>2016-12-22T09:16:24.478Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Ubuntu系统环境搭建"><a href="#Ubuntu系统环境搭建" class="headerlink" title="Ubuntu系统环境搭建"></a>Ubuntu系统环境搭建</h1><h2 id="基本配置"><a href="#基本配置" class="headerlink" title="基本配置"></a>基本配置</h2><h3 id="1-系统版本"><a href="#1-系统版本" class="headerlink" title="1. 系统版本"></a>1. 系统版本</h3><h4 id="Ubuntu"><a href="#Ubuntu" class="headerlink" title="Ubuntu"></a>Ubuntu</h4><ul><li><p>推荐版本: 14.04LTS</p></li><li><p>查看Ubuntu版本号</p></li></ul><blockquote><p>sudo lsb_release -a</p></blockquote><a id="more"></a><h3 id="2-内核版本"><a href="#2-内核版本" class="headerlink" title="2. 内核版本"></a>2. 内核版本</h3><ul><li><p>推荐版本: &gt; 4.4</p></li><li><p>查看Ubuntu版本号</p></li></ul><blockquote><p>uname -r</p></blockquote><ul><li>升级内核方法</li></ul><blockquote><p>sudo apt-get dist-upgrade</p></blockquote><h3 id="3-Git"><a href="#3-Git" class="headerlink" title="3. Git"></a>3. Git</h3><ul><li>设置最新Git源</li></ul><blockquote><p>sudo apt-add-repository ppa:git-core/ppa<br>sudo apt-get update</p></blockquote><ul><li>安装Client：</li></ul><blockquote><p>sudo apt-get install git</p></blockquote><ul><li>升级</li></ul><blockquote><p>sudo apt-get dist-upgrade</p></blockquote><h3 id="4-Shell-Zsh"><a href="#4-Shell-Zsh" class="headerlink" title="4. Shell (Zsh)"></a>4. Shell (Zsh)</h3><ul><li>配置与安装：<a href="http://www.jianshu.com/p/9189eac3e52d" target="_blank" rel="external">参考文章</a></li></ul><h3 id="5-JDK"><a href="#5-JDK" class="headerlink" title="5. JDK"></a>5. JDK</h3><h4 id="检查JDK"><a href="#检查JDK" class="headerlink" title="检查JDK"></a>检查JDK</h4><blockquote><p>java -version</p></blockquote><h4 id="安装SDK"><a href="#安装SDK" class="headerlink" title="安装SDK"></a>安装SDK</h4><ul><li>Installing default JRE/JDK</li></ul><blockquote><p>sudo apt-get install default-jdk</p></blockquote><ul><li>Installing Oracle JDK</li></ul><blockquote><p>sudo apt-get install python-software-properties<br>sudo add-apt-repository ppa:webupd8team/java<br>sudo apt-get update</p></blockquote><ul><li>Oracle JDK 6 (旧版本)</li></ul><blockquote><p>sudo apt-get install oracle-java6-installer</p></blockquote><ul><li>Oracle JDK 7 (较新的稳定版本)</li></ul><blockquote><p>sudo apt-get install oracle-java7-installer</p></blockquote><ul><li>Oracle JDK 8 (最新版本)</li></ul><blockquote><p>sudo apt-get install oracle-java8-installer</p></blockquote><h4 id="管理JDK"><a href="#管理JDK" class="headerlink" title="管理JDK"></a>管理JDK</h4><ul><li>通过update-alternatives，选择默认使用的JDK</li></ul><blockquote><p>sudo update-alternatives –config java<br>sudo update-alternatives –config javac</p></blockquote><h4 id="配置-JAVA-HOME-环境变量"><a href="#配置-JAVA-HOME-环境变量" class="headerlink" title="配置 JAVA_HOME 环境变量"></a>配置 JAVA_HOME 环境变量</h4><ul><li>根据设置时所选项来确定path</li></ul><blockquote><p>sudo update-alternatives –config java<br>得到安装路径：<br>/usr/lib/jvm/java-6-openjdk-amd64<br>/usr/lib/jvm/java-7-oracle<br>/usr/lib/jvm/java-8-oracle</p></blockquote><ul><li>我是用默认的java8，所以path为：</li></ul><blockquote><p>“/usr/lib/jvm/java-8-oracle”</p></blockquote><ul><li>编辑环境配置文件</li></ul><blockquote><p>sudo vim /etc/environment</p></blockquote><ul><li>在文件最后添加上：</li></ul><blockquote><p>JAVA_HOME=”/usr/lib/jvm/java-8-oracle”</p></blockquote><ul><li>reload 配置文件</li></ul><blockquote><p>source /etc/environment</p></blockquote><ul><li>检查是否安装成功</li></ul><blockquote><p>echo $JAVA_HOME</p></blockquote><ul><li>参考文章：</li></ul><ol><li><a href="https://www.digitalocean.com/community/tutorials/how-to-install-java-on-ubuntu-with-apt-get" target="_blank" rel="external">how-to-install-java-on-ubuntu-with-apt-get</a></li><li><a href="https://segmentfault.com/a/1190000001703180" target="_blank" rel="external">ubuntu 14.04 下通过apt-get 安装jdk</a></li></ol><h3 id="其他常用软件"><a href="#其他常用软件" class="headerlink" title="其他常用软件"></a>其他常用软件</h3><h4 id="翻墙"><a href="#翻墙" class="headerlink" title="翻墙"></a>翻墙</h4><ul><li>蓝灯</li><li>ShandowSocks</li></ul><h4 id="通信"><a href="#通信" class="headerlink" title="通信"></a>通信</h4><ul><li>WebQQ</li><li>TeamViewer</li></ul><h4 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h4><ul><li>监控网速CPU：<a href="http://blog.sina.com.cn/s/blog_1312684690101e7ur.html" target="_blank" rel="external">indicator-sysmonitor</a></li></ul><hr><h2 id="CI-环境搭建"><a href="#CI-环境搭建" class="headerlink" title="CI 环境搭建"></a>CI 环境搭建</h2><h3 id="GitLab-CI"><a href="#GitLab-CI" class="headerlink" title="GitLab CI"></a>GitLab CI</h3><ul><li><p><a href="https://gitlab.com/gitlab-org/gitlab-ci-multi-runner" target="_blank" rel="external">官网指导</a></p></li><li><p>Shell 安装</p></li></ul><blockquote><p>curl -L <a href="https://packages.gitlab.com/install/repositories/runner/gitlab-ci-multi-runner/script.deb.sh" target="_blank" rel="external">https://packages.gitlab.com/install/repositories/runner/gitlab-ci-multi-runner/script.deb.sh</a> | sudo bash<br>sudo apt-get install gitlab-ci-multi-runner</p></blockquote><ul><li>Docker 安装</li></ul><p>详见：<a href="https://gitlab.com/gitlab-org/gitlab-ci-multi-runner/blob/master/docs/install/docker.md" target="_blank" rel="external">这里</a></p><ul><li>注册Runner</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">sudo gitlab-ci-multi-runner register Please enter the gitlab-ci coordinator URL (e.g. https://gitlab.com )  </div><div class="line">https://gitlab.com  </div><div class="line">Please enter the gitlab-ci token for this runner  </div><div class="line">xxx  </div><div class="line">Please enter the gitlab-ci description for this runner  </div><div class="line">my-runner</div><div class="line">INFO[0034] fcf5c619 Registering runner... succeeded</div><div class="line">Please enter the executor: shell, docker, docker-ssh, ssh?  docker Please enter the Docker image (eg. ruby:2.1):</div><div class="line">ruby:2.1  </div><div class="line">INFO[0037] Runner registered successfully. Feel free to start it, but if it&apos;s running already the config should be automatically reloaded!</div></pre></td></tr></table></figure><h3 id="Jenkins"><a href="#Jenkins" class="headerlink" title="Jenkins"></a>Jenkins</h3><hr><h2 id="Android-环境搭建"><a href="#Android-环境搭建" class="headerlink" title="Android 环境搭建"></a>Android 环境搭建</h2><h3 id="1-Android-studio"><a href="#1-Android-studio" class="headerlink" title="1. Android studio"></a>1. Android studio</h3><ul><li><p>下载地址（官网）</p><ul><li><a href="https://developer.android.com/studio/index.html" target="_blank" rel="external">官网</a></li><li><a href="http://www.androiddevtools.cn/" target="_blank" rel="external">国内镜像</a></li></ul></li><li><p>配置</p></li></ul><h3 id="2-SDK"><a href="#2-SDK" class="headerlink" title="2. SDK"></a>2. SDK</h3><ul><li>配置代理</li></ul><blockquote><p>参考Bugly提供的代理仓库 <a href="https://dsx.bugly.qq.com/repository/1" target="_blank" rel="external">https://dsx.bugly.qq.com/repository/1</a></p></blockquote><ul><li>直接在AndroidStudio中下载</li></ul><blockquote><p>File -&gt; Settings -&gt; Appearance &amp; Behavior -&gt; System Settings -&gt; Android SDK</p></blockquote><ul><li><p>SDK Platorms : 下载最新的三个SDK</p></li><li><p>SDK Tools：</p><ul><li>必选：Build-Tools, SDK Platform-Tools, SDK Tools, Support Repository</li><li>可选：CMake, NDK, LLDB</li></ul></li></ul><h3 id="3-Gradle"><a href="#3-Gradle" class="headerlink" title="3. Gradle"></a>3. Gradle</h3><ul><li>网盘</li></ul><blockquote><p><a href="http://pan.baidu.com/s/1pLEkm4F#list/path=%2F" target="_blank" rel="external">http://pan.baidu.com/s/1pLEkm4F#list/path=%2F</a></p></blockquote><ul><li>下载最新的三个版本</li></ul><blockquote><p>解压到~/.gradle/wrapper/dists/</p></blockquote><ul><li>或者用sdkman安装（推荐）</li></ul><blockquote><p>curl -s <a href="https://get.sdkman.io" target="_blank" rel="external">https://get.sdkman.io</a> | bash</p></blockquote><ul><li>打开一个新 terminal，安装 Gradle</li></ul><blockquote><p>sdk install gradle {version}</p></blockquote><hr><h2 id="Node-js-环境搭建"><a href="#Node-js-环境搭建" class="headerlink" title="Node.js 环境搭建"></a>Node.js 环境搭建</h2><h3 id="NVM"><a href="#NVM" class="headerlink" title="NVM"></a>NVM</h3><ul><li>前置条件</li></ul><blockquote><p>sudo apt-get update<br>sudo apt-get install build-essential libssl-dev</p></blockquote><ul><li>安装脚本</li></ul><blockquote><p>curl -o- <a href="https://raw.githubusercontent.com/creationix/nvm/v0.32.0/install.sh" target="_blank" rel="external">https://raw.githubusercontent.com/creationix/nvm/v0.32.0/install.sh</a> | bash</p></blockquote><p>最新脚本参考 <a href="https://github.com/creationix/nvm" target="_blank" rel="external">https://github.com/creationix/nvm</a></p><ul><li>判断是否成功</li></ul><blockquote><p>command -v nvm</p></blockquote><ul><li>查看可安装node版本</li></ul><blockquote><p>nvm ls-remote</p></blockquote><ul><li>安装某一版本</li></ul><blockquote><p>nvm install {version}</p></blockquote><ul><li>查看已安装的版本</li></ul><blockquote><p>nvm ls</p></blockquote><ul><li>指定默认版本</li></ul><blockquote><p>nvm alias default {version}</p></blockquote><ul><li>使用默认版本</li></ul><blockquote><p>nvm use default</p></blockquote><ul><li>查看Node版本，检查是否安装成功</li></ul><blockquote><p>node -v</p></blockquote><h3 id="NPM"><a href="#NPM" class="headerlink" title="NPM"></a>NPM</h3><ul><li>修改淘宝NPM源</li></ul><blockquote><p>npm config set registry <a href="http://registry.cnpmjs.org" target="_blank" rel="external">http://registry.cnpmjs.org</a> //临时替换</p></blockquote><ul><li>替换CNPM</li></ul><blockquote><p>npm install -g cnpm –registry=<a href="http://registry.npm.taobao.org" target="_blank" rel="external">http://registry.npm.taobao.org</a><br>参考官网：<a href="https://npm.taobao.org/" target="_blank" rel="external">https://npm.taobao.org/</a></p></blockquote><hr><h2 id="J2EE-环境搭建"><a href="#J2EE-环境搭建" class="headerlink" title="J2EE 环境搭建"></a>J2EE 环境搭建</h2><h3 id="Maven"><a href="#Maven" class="headerlink" title="Maven"></a>Maven</h3><ul><li>用sdkman安装（推荐）</li></ul><blockquote><p>$ curl -s <a href="https://get.sdkman.io" target="_blank" rel="external">https://get.sdkman.io</a> | bash</p></blockquote><ul><li>打开一个新 terminal，安装 maven</li></ul><blockquote><p>$ sdk install maven {version}</p></blockquote><h3 id="Gradle"><a href="#Gradle" class="headerlink" title="Gradle"></a>Gradle</h3><ul><li>参考Android</li></ul><hr><h2 id="Python-环境搭建"><a href="#Python-环境搭建" class="headerlink" title="Python 环境搭建"></a>Python 环境搭建</h2><hr><h2 id="Ruby-环境搭建"><a href="#Ruby-环境搭建" class="headerlink" title="Ruby 环境搭建"></a>Ruby 环境搭建</h2><hr><h2 id="PHP-环境搭建"><a href="#PHP-环境搭建" class="headerlink" title="PHP 环境搭建"></a>PHP 环境搭建</h2><hr><h2 id="Go-环境搭建"><a href="#Go-环境搭建" class="headerlink" title="Go 环境搭建"></a>Go 环境搭建</h2><h1 id="Windows系统环境搭建"><a href="#Windows系统环境搭建" class="headerlink" title="Windows系统环境搭建"></a>Windows系统环境搭建</h1>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Ubuntu系统环境搭建&quot;&gt;&lt;a href=&quot;#Ubuntu系统环境搭建&quot; class=&quot;headerlink&quot; title=&quot;Ubuntu系统环境搭建&quot;&gt;&lt;/a&gt;Ubuntu系统环境搭建&lt;/h1&gt;&lt;h2 id=&quot;基本配置&quot;&gt;&lt;a href=&quot;#基本配置&quot; class=&quot;headerlink&quot; title=&quot;基本配置&quot;&gt;&lt;/a&gt;基本配置&lt;/h2&gt;&lt;h3 id=&quot;1-系统版本&quot;&gt;&lt;a href=&quot;#1-系统版本&quot; class=&quot;headerlink&quot; title=&quot;1. 系统版本&quot;&gt;&lt;/a&gt;1. 系统版本&lt;/h3&gt;&lt;h4 id=&quot;Ubuntu&quot;&gt;&lt;a href=&quot;#Ubuntu&quot; class=&quot;headerlink&quot; title=&quot;Ubuntu&quot;&gt;&lt;/a&gt;Ubuntu&lt;/h4&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;推荐版本: 14.04LTS&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;查看Ubuntu版本号&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;blockquote&gt;&lt;p&gt;sudo lsb_release -a&lt;/p&gt;&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Workflow" scheme="https://djlinkiot.github.io/categories/Workflow/"/>
    
      <category term="Gitlab" scheme="https://djlinkiot.github.io/categories/Workflow/Gitlab/"/>
    
    
      <category term="Gitlab" scheme="https://djlinkiot.github.io/tags/Gitlab/"/>
    
      <category term="Gitlab CI" scheme="https://djlinkiot.github.io/tags/Gitlab-CI/"/>
    
      <category term="CI" scheme="https://djlinkiot.github.io/tags/CI/"/>
    
      <category term="Gitlab CI Runner" scheme="https://djlinkiot.github.io/tags/Gitlab-CI-Runner/"/>
    
  </entry>
  
</feed>
